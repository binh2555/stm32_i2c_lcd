
i2c_lcd.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006260  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000042c  08006370  08006370  00016370  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800679c  0800679c  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  0800679c  0800679c  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800679c  0800679c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800679c  0800679c  0001679c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080067a0  080067a0  000167a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080067a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a4  200001dc  08006980  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000280  08006980  00020280  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007037  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001651  00000000  00000000  0002723c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007c8  00000000  00000000  00028890  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000728  00000000  00000000  00029058  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000178a0  00000000  00000000  00029780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000097e5  00000000  00000000  00041020  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000837f6  00000000  00000000  0004a805  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cdffb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003094  00000000  00000000  000ce04c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001dc 	.word	0x200001dc
 800012c:	00000000 	.word	0x00000000
 8000130:	08006358 	.word	0x08006358

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e0 	.word	0x200001e0
 800014c:	08006358 	.word	0x08006358

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b086      	sub	sp, #24
 8000b2c:	af02      	add	r7, sp, #8
 8000b2e:	4603      	mov	r3, r0
 8000b30:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000b32:	79fb      	ldrb	r3, [r7, #7]
 8000b34:	f023 030f 	bic.w	r3, r3, #15
 8000b38:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000b3a:	79fb      	ldrb	r3, [r7, #7]
 8000b3c:	011b      	lsls	r3, r3, #4
 8000b3e:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000b40:	7bfb      	ldrb	r3, [r7, #15]
 8000b42:	f043 030c 	orr.w	r3, r3, #12
 8000b46:	b2db      	uxtb	r3, r3
 8000b48:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000b4a:	7bfb      	ldrb	r3, [r7, #15]
 8000b4c:	f043 0308 	orr.w	r3, r3, #8
 8000b50:	b2db      	uxtb	r3, r3
 8000b52:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000b54:	7bbb      	ldrb	r3, [r7, #14]
 8000b56:	f043 030c 	orr.w	r3, r3, #12
 8000b5a:	b2db      	uxtb	r3, r3
 8000b5c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000b5e:	7bbb      	ldrb	r3, [r7, #14]
 8000b60:	f043 0308 	orr.w	r3, r3, #8
 8000b64:	b2db      	uxtb	r3, r3
 8000b66:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000b68:	f107 0208 	add.w	r2, r7, #8
 8000b6c:	2364      	movs	r3, #100	; 0x64
 8000b6e:	9300      	str	r3, [sp, #0]
 8000b70:	2304      	movs	r3, #4
 8000b72:	214e      	movs	r1, #78	; 0x4e
 8000b74:	4803      	ldr	r0, [pc, #12]	; (8000b84 <lcd_send_cmd+0x5c>)
 8000b76:	f001 f8a1 	bl	8001cbc <HAL_I2C_Master_Transmit>
}
 8000b7a:	bf00      	nop
 8000b7c:	3710      	adds	r7, #16
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	200001f8 	.word	0x200001f8

08000b88 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b086      	sub	sp, #24
 8000b8c:	af02      	add	r7, sp, #8
 8000b8e:	4603      	mov	r3, r0
 8000b90:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000b92:	79fb      	ldrb	r3, [r7, #7]
 8000b94:	f023 030f 	bic.w	r3, r3, #15
 8000b98:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8000b9a:	79fb      	ldrb	r3, [r7, #7]
 8000b9c:	011b      	lsls	r3, r3, #4
 8000b9e:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=1
 8000ba0:	7bfb      	ldrb	r3, [r7, #15]
 8000ba2:	f043 030d 	orr.w	r3, r3, #13
 8000ba6:	b2db      	uxtb	r3, r3
 8000ba8:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=1
 8000baa:	7bfb      	ldrb	r3, [r7, #15]
 8000bac:	f043 0309 	orr.w	r3, r3, #9
 8000bb0:	b2db      	uxtb	r3, r3
 8000bb2:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=1
 8000bb4:	7bbb      	ldrb	r3, [r7, #14]
 8000bb6:	f043 030d 	orr.w	r3, r3, #13
 8000bba:	b2db      	uxtb	r3, r3
 8000bbc:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=1
 8000bbe:	7bbb      	ldrb	r3, [r7, #14]
 8000bc0:	f043 0309 	orr.w	r3, r3, #9
 8000bc4:	b2db      	uxtb	r3, r3
 8000bc6:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000bc8:	f107 0208 	add.w	r2, r7, #8
 8000bcc:	2364      	movs	r3, #100	; 0x64
 8000bce:	9300      	str	r3, [sp, #0]
 8000bd0:	2304      	movs	r3, #4
 8000bd2:	214e      	movs	r1, #78	; 0x4e
 8000bd4:	4803      	ldr	r0, [pc, #12]	; (8000be4 <lcd_send_data+0x5c>)
 8000bd6:	f001 f871 	bl	8001cbc <HAL_I2C_Master_Transmit>
}
 8000bda:	bf00      	nop
 8000bdc:	3710      	adds	r7, #16
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	200001f8 	.word	0x200001f8

08000be8 <lcd_put_cur>:
		lcd_send_data (' ');
	}
}

void lcd_put_cur(int row, int col)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b082      	sub	sp, #8
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
 8000bf0:	6039      	str	r1, [r7, #0]
    switch (row)
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d003      	beq.n	8000c00 <lcd_put_cur+0x18>
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	2b01      	cmp	r3, #1
 8000bfc:	d005      	beq.n	8000c0a <lcd_put_cur+0x22>
 8000bfe:	e009      	b.n	8000c14 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 8000c00:	683b      	ldr	r3, [r7, #0]
 8000c02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c06:	603b      	str	r3, [r7, #0]
            break;
 8000c08:	e004      	b.n	8000c14 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000c10:	603b      	str	r3, [r7, #0]
            break;
 8000c12:	bf00      	nop
    }

    lcd_send_cmd (col);
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	b2db      	uxtb	r3, r3
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f7ff ff85 	bl	8000b28 <lcd_send_cmd>
}
 8000c1e:	bf00      	nop
 8000c20:	3708      	adds	r7, #8
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}

08000c26 <lcd_init>:


void lcd_init (void)
{
 8000c26:	b580      	push	{r7, lr}
 8000c28:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8000c2a:	2032      	movs	r0, #50	; 0x32
 8000c2c:	f000 fc76 	bl	800151c <HAL_Delay>
	lcd_send_cmd (0x30);
 8000c30:	2030      	movs	r0, #48	; 0x30
 8000c32:	f7ff ff79 	bl	8000b28 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8000c36:	2005      	movs	r0, #5
 8000c38:	f000 fc70 	bl	800151c <HAL_Delay>
	lcd_send_cmd (0x30);
 8000c3c:	2030      	movs	r0, #48	; 0x30
 8000c3e:	f7ff ff73 	bl	8000b28 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8000c42:	2001      	movs	r0, #1
 8000c44:	f000 fc6a 	bl	800151c <HAL_Delay>
	lcd_send_cmd (0x30);
 8000c48:	2030      	movs	r0, #48	; 0x30
 8000c4a:	f7ff ff6d 	bl	8000b28 <lcd_send_cmd>
	HAL_Delay(10);
 8000c4e:	200a      	movs	r0, #10
 8000c50:	f000 fc64 	bl	800151c <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8000c54:	2020      	movs	r0, #32
 8000c56:	f7ff ff67 	bl	8000b28 <lcd_send_cmd>
	HAL_Delay(10);
 8000c5a:	200a      	movs	r0, #10
 8000c5c:	f000 fc5e 	bl	800151c <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8000c60:	2028      	movs	r0, #40	; 0x28
 8000c62:	f7ff ff61 	bl	8000b28 <lcd_send_cmd>
	HAL_Delay(1);
 8000c66:	2001      	movs	r0, #1
 8000c68:	f000 fc58 	bl	800151c <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8000c6c:	2008      	movs	r0, #8
 8000c6e:	f7ff ff5b 	bl	8000b28 <lcd_send_cmd>
	HAL_Delay(1);
 8000c72:	2001      	movs	r0, #1
 8000c74:	f000 fc52 	bl	800151c <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8000c78:	2001      	movs	r0, #1
 8000c7a:	f7ff ff55 	bl	8000b28 <lcd_send_cmd>
	HAL_Delay(1);
 8000c7e:	2001      	movs	r0, #1
 8000c80:	f000 fc4c 	bl	800151c <HAL_Delay>
	HAL_Delay(1);
 8000c84:	2001      	movs	r0, #1
 8000c86:	f000 fc49 	bl	800151c <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000c8a:	2006      	movs	r0, #6
 8000c8c:	f7ff ff4c 	bl	8000b28 <lcd_send_cmd>
	HAL_Delay(1);
 8000c90:	2001      	movs	r0, #1
 8000c92:	f000 fc43 	bl	800151c <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000c96:	200c      	movs	r0, #12
 8000c98:	f7ff ff46 	bl	8000b28 <lcd_send_cmd>
}
 8000c9c:	bf00      	nop
 8000c9e:	bd80      	pop	{r7, pc}

08000ca0 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000ca8:	e006      	b.n	8000cb8 <lcd_send_string+0x18>
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	1c5a      	adds	r2, r3, #1
 8000cae:	607a      	str	r2, [r7, #4]
 8000cb0:	781b      	ldrb	r3, [r3, #0]
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f7ff ff68 	bl	8000b88 <lcd_send_data>
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	781b      	ldrb	r3, [r3, #0]
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d1f4      	bne.n	8000caa <lcd_send_string+0xa>
}
 8000cc0:	bf00      	nop
 8000cc2:	bf00      	nop
 8000cc4:	3708      	adds	r7, #8
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}

08000cca <bcdToDec>:
{
  return (uint8_t)( (val/10*16) + (val%10) );
}
// Convert binary coded decimal to normal decimal numbers
int bcdToDec(uint8_t val)
{
 8000cca:	b480      	push	{r7}
 8000ccc:	b083      	sub	sp, #12
 8000cce:	af00      	add	r7, sp, #0
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	71fb      	strb	r3, [r7, #7]
  return (int)( (val/16*10) + (val%16) );
 8000cd4:	79fb      	ldrb	r3, [r7, #7]
 8000cd6:	091b      	lsrs	r3, r3, #4
 8000cd8:	b2db      	uxtb	r3, r3
 8000cda:	461a      	mov	r2, r3
 8000cdc:	4613      	mov	r3, r2
 8000cde:	009b      	lsls	r3, r3, #2
 8000ce0:	4413      	add	r3, r2
 8000ce2:	005b      	lsls	r3, r3, #1
 8000ce4:	461a      	mov	r2, r3
 8000ce6:	79fb      	ldrb	r3, [r7, #7]
 8000ce8:	f003 030f 	and.w	r3, r3, #15
 8000cec:	4413      	add	r3, r2
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	370c      	adds	r7, #12
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bc80      	pop	{r7}
 8000cf6:	4770      	bx	lr

08000cf8 <set_time>:
TIME time;

//function to set time

void set_time(uint8_t sec,uint8_t min, uint8_t hour, uint8_t dow, uint8_t dom, uint8_t month, uint8_t year)
{
 8000cf8:	b590      	push	{r4, r7, lr}
 8000cfa:	b089      	sub	sp, #36	; 0x24
 8000cfc:	af04      	add	r7, sp, #16
 8000cfe:	4604      	mov	r4, r0
 8000d00:	4608      	mov	r0, r1
 8000d02:	4611      	mov	r1, r2
 8000d04:	461a      	mov	r2, r3
 8000d06:	4623      	mov	r3, r4
 8000d08:	71fb      	strb	r3, [r7, #7]
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	71bb      	strb	r3, [r7, #6]
 8000d0e:	460b      	mov	r3, r1
 8000d10:	717b      	strb	r3, [r7, #5]
 8000d12:	4613      	mov	r3, r2
 8000d14:	713b      	strb	r3, [r7, #4]
	uint8_t set_time[7];
	set_time[0] = bcdToDec(sec);
 8000d16:	79fb      	ldrb	r3, [r7, #7]
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f7ff ffd6 	bl	8000cca <bcdToDec>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	b2db      	uxtb	r3, r3
 8000d22:	723b      	strb	r3, [r7, #8]
	set_time[1] = bcdToDec(sec);
 8000d24:	79fb      	ldrb	r3, [r7, #7]
 8000d26:	4618      	mov	r0, r3
 8000d28:	f7ff ffcf 	bl	8000cca <bcdToDec>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	b2db      	uxtb	r3, r3
 8000d30:	727b      	strb	r3, [r7, #9]
	set_time[2] = bcdToDec(sec);
 8000d32:	79fb      	ldrb	r3, [r7, #7]
 8000d34:	4618      	mov	r0, r3
 8000d36:	f7ff ffc8 	bl	8000cca <bcdToDec>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	b2db      	uxtb	r3, r3
 8000d3e:	72bb      	strb	r3, [r7, #10]
	set_time[3] = bcdToDec(sec);
 8000d40:	79fb      	ldrb	r3, [r7, #7]
 8000d42:	4618      	mov	r0, r3
 8000d44:	f7ff ffc1 	bl	8000cca <bcdToDec>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	b2db      	uxtb	r3, r3
 8000d4c:	72fb      	strb	r3, [r7, #11]
	set_time[4] = bcdToDec(sec);
 8000d4e:	79fb      	ldrb	r3, [r7, #7]
 8000d50:	4618      	mov	r0, r3
 8000d52:	f7ff ffba 	bl	8000cca <bcdToDec>
 8000d56:	4603      	mov	r3, r0
 8000d58:	b2db      	uxtb	r3, r3
 8000d5a:	733b      	strb	r3, [r7, #12]
	set_time[5] = bcdToDec(sec);
 8000d5c:	79fb      	ldrb	r3, [r7, #7]
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f7ff ffb3 	bl	8000cca <bcdToDec>
 8000d64:	4603      	mov	r3, r0
 8000d66:	b2db      	uxtb	r3, r3
 8000d68:	737b      	strb	r3, [r7, #13]
	set_time[6] = bcdToDec(sec);
 8000d6a:	79fb      	ldrb	r3, [r7, #7]
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f7ff ffac 	bl	8000cca <bcdToDec>
 8000d72:	4603      	mov	r3, r0
 8000d74:	b2db      	uxtb	r3, r3
 8000d76:	73bb      	strb	r3, [r7, #14]

	HAL_I2C_Mem_Write(&hi2c1, DS3231_ADDRESS, 0x00, 1, set_time, 7, 1000);
 8000d78:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d7c:	9302      	str	r3, [sp, #8]
 8000d7e:	2307      	movs	r3, #7
 8000d80:	9301      	str	r3, [sp, #4]
 8000d82:	f107 0308 	add.w	r3, r7, #8
 8000d86:	9300      	str	r3, [sp, #0]
 8000d88:	2301      	movs	r3, #1
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	21d0      	movs	r1, #208	; 0xd0
 8000d8e:	4803      	ldr	r0, [pc, #12]	; (8000d9c <set_time+0xa4>)
 8000d90:	f001 f892 	bl	8001eb8 <HAL_I2C_Mem_Write>
}
 8000d94:	bf00      	nop
 8000d96:	3714      	adds	r7, #20
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd90      	pop	{r4, r7, pc}
 8000d9c:	200001f8 	.word	0x200001f8

08000da0 <Get_Time>:

void Get_Time (void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b086      	sub	sp, #24
 8000da4:	af04      	add	r7, sp, #16
	uint8_t get_time[7];
	HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDRESS, 0x00, 1, get_time, 7, 1000);
 8000da6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000daa:	9302      	str	r3, [sp, #8]
 8000dac:	2307      	movs	r3, #7
 8000dae:	9301      	str	r3, [sp, #4]
 8000db0:	463b      	mov	r3, r7
 8000db2:	9300      	str	r3, [sp, #0]
 8000db4:	2301      	movs	r3, #1
 8000db6:	2200      	movs	r2, #0
 8000db8:	21d0      	movs	r1, #208	; 0xd0
 8000dba:	481f      	ldr	r0, [pc, #124]	; (8000e38 <Get_Time+0x98>)
 8000dbc:	f001 f976 	bl	80020ac <HAL_I2C_Mem_Read>
	time.seconds = bcdToDec(get_time[0]);
 8000dc0:	783b      	ldrb	r3, [r7, #0]
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f7ff ff81 	bl	8000cca <bcdToDec>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	b2da      	uxtb	r2, r3
 8000dcc:	4b1b      	ldr	r3, [pc, #108]	; (8000e3c <Get_Time+0x9c>)
 8000dce:	701a      	strb	r2, [r3, #0]
	time.minutes = bcdToDec(get_time[1]);
 8000dd0:	787b      	ldrb	r3, [r7, #1]
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f7ff ff79 	bl	8000cca <bcdToDec>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	b2da      	uxtb	r2, r3
 8000ddc:	4b17      	ldr	r3, [pc, #92]	; (8000e3c <Get_Time+0x9c>)
 8000dde:	705a      	strb	r2, [r3, #1]
	time.hour = bcdToDec(get_time[2]);
 8000de0:	78bb      	ldrb	r3, [r7, #2]
 8000de2:	4618      	mov	r0, r3
 8000de4:	f7ff ff71 	bl	8000cca <bcdToDec>
 8000de8:	4603      	mov	r3, r0
 8000dea:	b2da      	uxtb	r2, r3
 8000dec:	4b13      	ldr	r3, [pc, #76]	; (8000e3c <Get_Time+0x9c>)
 8000dee:	709a      	strb	r2, [r3, #2]
	time.dayofweek = bcdToDec(get_time[3]);
 8000df0:	78fb      	ldrb	r3, [r7, #3]
 8000df2:	4618      	mov	r0, r3
 8000df4:	f7ff ff69 	bl	8000cca <bcdToDec>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	b2da      	uxtb	r2, r3
 8000dfc:	4b0f      	ldr	r3, [pc, #60]	; (8000e3c <Get_Time+0x9c>)
 8000dfe:	70da      	strb	r2, [r3, #3]
	time.dayofmonth = bcdToDec(get_time[4]);
 8000e00:	793b      	ldrb	r3, [r7, #4]
 8000e02:	4618      	mov	r0, r3
 8000e04:	f7ff ff61 	bl	8000cca <bcdToDec>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	b2da      	uxtb	r2, r3
 8000e0c:	4b0b      	ldr	r3, [pc, #44]	; (8000e3c <Get_Time+0x9c>)
 8000e0e:	711a      	strb	r2, [r3, #4]
	time.month = bcdToDec(get_time[5]);
 8000e10:	797b      	ldrb	r3, [r7, #5]
 8000e12:	4618      	mov	r0, r3
 8000e14:	f7ff ff59 	bl	8000cca <bcdToDec>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	b2da      	uxtb	r2, r3
 8000e1c:	4b07      	ldr	r3, [pc, #28]	; (8000e3c <Get_Time+0x9c>)
 8000e1e:	715a      	strb	r2, [r3, #5]
	time.year = bcdToDec(get_time[6]);
 8000e20:	79bb      	ldrb	r3, [r7, #6]
 8000e22:	4618      	mov	r0, r3
 8000e24:	f7ff ff51 	bl	8000cca <bcdToDec>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	b2da      	uxtb	r2, r3
 8000e2c:	4b03      	ldr	r3, [pc, #12]	; (8000e3c <Get_Time+0x9c>)
 8000e2e:	719a      	strb	r2, [r3, #6]
}
 8000e30:	bf00      	nop
 8000e32:	3708      	adds	r7, #8
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	200001f8 	.word	0x200001f8
 8000e3c:	2000024c 	.word	0x2000024c

08000e40 <Get_Temp>:

float Get_Temp (void)
{
 8000e40:	b5b0      	push	{r4, r5, r7, lr}
 8000e42:	b086      	sub	sp, #24
 8000e44:	af04      	add	r7, sp, #16
	uint8_t temp[2];

	HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDRESS, 0x11, 1, temp, 2, 1000);
 8000e46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e4a:	9302      	str	r3, [sp, #8]
 8000e4c:	2302      	movs	r3, #2
 8000e4e:	9301      	str	r3, [sp, #4]
 8000e50:	1d3b      	adds	r3, r7, #4
 8000e52:	9300      	str	r3, [sp, #0]
 8000e54:	2301      	movs	r3, #1
 8000e56:	2211      	movs	r2, #17
 8000e58:	21d0      	movs	r1, #208	; 0xd0
 8000e5a:	4812      	ldr	r0, [pc, #72]	; (8000ea4 <Get_Temp+0x64>)
 8000e5c:	f001 f926 	bl	80020ac <HAL_I2C_Mem_Read>
	return ((temp[0])+(temp[1]>>6)/4.0);
 8000e60:	793b      	ldrb	r3, [r7, #4]
 8000e62:	4618      	mov	r0, r3
 8000e64:	f7ff face 	bl	8000404 <__aeabi_i2d>
 8000e68:	4604      	mov	r4, r0
 8000e6a:	460d      	mov	r5, r1
 8000e6c:	797b      	ldrb	r3, [r7, #5]
 8000e6e:	099b      	lsrs	r3, r3, #6
 8000e70:	b2db      	uxtb	r3, r3
 8000e72:	4618      	mov	r0, r3
 8000e74:	f7ff fac6 	bl	8000404 <__aeabi_i2d>
 8000e78:	f04f 0200 	mov.w	r2, #0
 8000e7c:	4b0a      	ldr	r3, [pc, #40]	; (8000ea8 <Get_Temp+0x68>)
 8000e7e:	f7ff fc55 	bl	800072c <__aeabi_ddiv>
 8000e82:	4602      	mov	r2, r0
 8000e84:	460b      	mov	r3, r1
 8000e86:	4620      	mov	r0, r4
 8000e88:	4629      	mov	r1, r5
 8000e8a:	f7ff f96f 	bl	800016c <__adddf3>
 8000e8e:	4602      	mov	r2, r0
 8000e90:	460b      	mov	r3, r1
 8000e92:	4610      	mov	r0, r2
 8000e94:	4619      	mov	r1, r3
 8000e96:	f7ff fdf7 	bl	8000a88 <__aeabi_d2f>
 8000e9a:	4603      	mov	r3, r0
}
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	3708      	adds	r7, #8
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bdb0      	pop	{r4, r5, r7, pc}
 8000ea4:	200001f8 	.word	0x200001f8
 8000ea8:	40100000 	.word	0x40100000

08000eac <force_temp_conv>:

void force_temp_conv (void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b086      	sub	sp, #24
 8000eb0:	af04      	add	r7, sp, #16
	uint8_t status=0;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	71fb      	strb	r3, [r7, #7]
	uint8_t control=0;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDRESS, 0x0F, 1, &status, 1, 100);  // read status register
 8000eba:	2364      	movs	r3, #100	; 0x64
 8000ebc:	9302      	str	r3, [sp, #8]
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	9301      	str	r3, [sp, #4]
 8000ec2:	1dfb      	adds	r3, r7, #7
 8000ec4:	9300      	str	r3, [sp, #0]
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	220f      	movs	r2, #15
 8000eca:	21d0      	movs	r1, #208	; 0xd0
 8000ecc:	4813      	ldr	r0, [pc, #76]	; (8000f1c <force_temp_conv+0x70>)
 8000ece:	f001 f8ed 	bl	80020ac <HAL_I2C_Mem_Read>
	if (!(status&0x04))
 8000ed2:	79fb      	ldrb	r3, [r7, #7]
 8000ed4:	f003 0304 	and.w	r3, r3, #4
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d11b      	bne.n	8000f14 <force_temp_conv+0x68>
	{
		HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDRESS, 0x0E, 1, &control, 1, 100);  // read control register
 8000edc:	2364      	movs	r3, #100	; 0x64
 8000ede:	9302      	str	r3, [sp, #8]
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	9301      	str	r3, [sp, #4]
 8000ee4:	1dbb      	adds	r3, r7, #6
 8000ee6:	9300      	str	r3, [sp, #0]
 8000ee8:	2301      	movs	r3, #1
 8000eea:	220e      	movs	r2, #14
 8000eec:	21d0      	movs	r1, #208	; 0xd0
 8000eee:	480b      	ldr	r0, [pc, #44]	; (8000f1c <force_temp_conv+0x70>)
 8000ef0:	f001 f8dc 	bl	80020ac <HAL_I2C_Mem_Read>
		HAL_I2C_Mem_Write(&hi2c1, DS3231_ADDRESS, 0x0E, 1, (uint8_t *)(control|(0x20)), 1, 100);
 8000ef4:	79bb      	ldrb	r3, [r7, #6]
 8000ef6:	f043 0320 	orr.w	r3, r3, #32
 8000efa:	b2db      	uxtb	r3, r3
 8000efc:	461a      	mov	r2, r3
 8000efe:	2364      	movs	r3, #100	; 0x64
 8000f00:	9302      	str	r3, [sp, #8]
 8000f02:	2301      	movs	r3, #1
 8000f04:	9301      	str	r3, [sp, #4]
 8000f06:	9200      	str	r2, [sp, #0]
 8000f08:	2301      	movs	r3, #1
 8000f0a:	220e      	movs	r2, #14
 8000f0c:	21d0      	movs	r1, #208	; 0xd0
 8000f0e:	4803      	ldr	r0, [pc, #12]	; (8000f1c <force_temp_conv+0x70>)
 8000f10:	f000 ffd2 	bl	8001eb8 <HAL_I2C_Mem_Write>
	}
}
 8000f14:	bf00      	nop
 8000f16:	3708      	adds	r7, #8
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	200001f8 	.word	0x200001f8

08000f20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b084      	sub	sp, #16
 8000f24:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f26:	f000 fa97 	bl	8001458 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f2a:	f000 f869 	bl	8001000 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f2e:	f000 f8db 	bl	80010e8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000f32:	f000 f8ab 	bl	800108c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();
 8000f36:	f7ff fe76 	bl	8000c26 <lcd_init>
  set_time(00, 35, 13, 5, 3, 1, 19);
 8000f3a:	2313      	movs	r3, #19
 8000f3c:	9302      	str	r3, [sp, #8]
 8000f3e:	2301      	movs	r3, #1
 8000f40:	9301      	str	r3, [sp, #4]
 8000f42:	2303      	movs	r3, #3
 8000f44:	9300      	str	r3, [sp, #0]
 8000f46:	2305      	movs	r3, #5
 8000f48:	220d      	movs	r2, #13
 8000f4a:	2123      	movs	r1, #35	; 0x23
 8000f4c:	2000      	movs	r0, #0
 8000f4e:	f7ff fed3 	bl	8000cf8 <set_time>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	 Get_Time();
 8000f52:	f7ff ff25 	bl	8000da0 <Get_Time>
	 sprintf (buffer, "%02d:%02d:%02d", time.hour, time.minutes, time.seconds);
 8000f56:	4b24      	ldr	r3, [pc, #144]	; (8000fe8 <main+0xc8>)
 8000f58:	789b      	ldrb	r3, [r3, #2]
 8000f5a:	461a      	mov	r2, r3
 8000f5c:	4b22      	ldr	r3, [pc, #136]	; (8000fe8 <main+0xc8>)
 8000f5e:	785b      	ldrb	r3, [r3, #1]
 8000f60:	4619      	mov	r1, r3
 8000f62:	4b21      	ldr	r3, [pc, #132]	; (8000fe8 <main+0xc8>)
 8000f64:	781b      	ldrb	r3, [r3, #0]
 8000f66:	9300      	str	r3, [sp, #0]
 8000f68:	460b      	mov	r3, r1
 8000f6a:	4920      	ldr	r1, [pc, #128]	; (8000fec <main+0xcc>)
 8000f6c:	4820      	ldr	r0, [pc, #128]	; (8000ff0 <main+0xd0>)
 8000f6e:	f002 ff79 	bl	8003e64 <siprintf>
	 lcd_put_cur (0,0);
 8000f72:	2100      	movs	r1, #0
 8000f74:	2000      	movs	r0, #0
 8000f76:	f7ff fe37 	bl	8000be8 <lcd_put_cur>
	 lcd_send_string(buffer);
 8000f7a:	481d      	ldr	r0, [pc, #116]	; (8000ff0 <main+0xd0>)
 8000f7c:	f7ff fe90 	bl	8000ca0 <lcd_send_string>

	 sprintf (buffer, "%02d-%02d-20%02d", time.dayofmonth, time.month, time.year);
 8000f80:	4b19      	ldr	r3, [pc, #100]	; (8000fe8 <main+0xc8>)
 8000f82:	791b      	ldrb	r3, [r3, #4]
 8000f84:	461a      	mov	r2, r3
 8000f86:	4b18      	ldr	r3, [pc, #96]	; (8000fe8 <main+0xc8>)
 8000f88:	795b      	ldrb	r3, [r3, #5]
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	4b16      	ldr	r3, [pc, #88]	; (8000fe8 <main+0xc8>)
 8000f8e:	799b      	ldrb	r3, [r3, #6]
 8000f90:	9300      	str	r3, [sp, #0]
 8000f92:	460b      	mov	r3, r1
 8000f94:	4917      	ldr	r1, [pc, #92]	; (8000ff4 <main+0xd4>)
 8000f96:	4816      	ldr	r0, [pc, #88]	; (8000ff0 <main+0xd0>)
 8000f98:	f002 ff64 	bl	8003e64 <siprintf>
	 lcd_put_cur(1, 0);
 8000f9c:	2100      	movs	r1, #0
 8000f9e:	2001      	movs	r0, #1
 8000fa0:	f7ff fe22 	bl	8000be8 <lcd_put_cur>
	 lcd_send_string(buffer);
 8000fa4:	4812      	ldr	r0, [pc, #72]	; (8000ff0 <main+0xd0>)
 8000fa6:	f7ff fe7b 	bl	8000ca0 <lcd_send_string>

	 force_temp_conv();
 8000faa:	f7ff ff7f 	bl	8000eac <force_temp_conv>

	 TEMP = Get_Temp();
 8000fae:	f7ff ff47 	bl	8000e40 <Get_Temp>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	4a10      	ldr	r2, [pc, #64]	; (8000ff8 <main+0xd8>)
 8000fb6:	6013      	str	r3, [r2, #0]

	 lcd_put_cur(0, 10);
 8000fb8:	210a      	movs	r1, #10
 8000fba:	2000      	movs	r0, #0
 8000fbc:	f7ff fe14 	bl	8000be8 <lcd_put_cur>

	 sprintf (buffer, "%f", TEMP);
 8000fc0:	4b0d      	ldr	r3, [pc, #52]	; (8000ff8 <main+0xd8>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f7ff fa2f 	bl	8000428 <__aeabi_f2d>
 8000fca:	4602      	mov	r2, r0
 8000fcc:	460b      	mov	r3, r1
 8000fce:	490b      	ldr	r1, [pc, #44]	; (8000ffc <main+0xdc>)
 8000fd0:	4807      	ldr	r0, [pc, #28]	; (8000ff0 <main+0xd0>)
 8000fd2:	f002 ff47 	bl	8003e64 <siprintf>

	 lcd_send_string(buffer);
 8000fd6:	4806      	ldr	r0, [pc, #24]	; (8000ff0 <main+0xd0>)
 8000fd8:	f7ff fe62 	bl	8000ca0 <lcd_send_string>

	 HAL_Delay(500);
 8000fdc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000fe0:	f000 fa9c 	bl	800151c <HAL_Delay>
	 Get_Time();
 8000fe4:	e7b5      	b.n	8000f52 <main+0x32>
 8000fe6:	bf00      	nop
 8000fe8:	2000024c 	.word	0x2000024c
 8000fec:	08006370 	.word	0x08006370
 8000ff0:	20000258 	.word	0x20000258
 8000ff4:	08006380 	.word	0x08006380
 8000ff8:	20000254 	.word	0x20000254
 8000ffc:	08006394 	.word	0x08006394

08001000 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b090      	sub	sp, #64	; 0x40
 8001004:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001006:	f107 0318 	add.w	r3, r7, #24
 800100a:	2228      	movs	r2, #40	; 0x28
 800100c:	2100      	movs	r1, #0
 800100e:	4618      	mov	r0, r3
 8001010:	f002 fac0 	bl	8003594 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001014:	1d3b      	adds	r3, r7, #4
 8001016:	2200      	movs	r2, #0
 8001018:	601a      	str	r2, [r3, #0]
 800101a:	605a      	str	r2, [r3, #4]
 800101c:	609a      	str	r2, [r3, #8]
 800101e:	60da      	str	r2, [r3, #12]
 8001020:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001022:	2301      	movs	r3, #1
 8001024:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001026:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800102a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800102c:	2300      	movs	r3, #0
 800102e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001030:	2301      	movs	r3, #1
 8001032:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001034:	2302      	movs	r3, #2
 8001036:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001038:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800103c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800103e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001042:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001044:	f107 0318 	add.w	r3, r7, #24
 8001048:	4618      	mov	r0, r3
 800104a:	f001 fe73 	bl	8002d34 <HAL_RCC_OscConfig>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d001      	beq.n	8001058 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001054:	f000 f876 	bl	8001144 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001058:	230f      	movs	r3, #15
 800105a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800105c:	2302      	movs	r3, #2
 800105e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001060:	2300      	movs	r3, #0
 8001062:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001064:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001068:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800106a:	2300      	movs	r3, #0
 800106c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800106e:	1d3b      	adds	r3, r7, #4
 8001070:	2102      	movs	r1, #2
 8001072:	4618      	mov	r0, r3
 8001074:	f002 f8e0 	bl	8003238 <HAL_RCC_ClockConfig>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800107e:	f000 f861 	bl	8001144 <Error_Handler>
  }
}
 8001082:	bf00      	nop
 8001084:	3740      	adds	r7, #64	; 0x40
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
	...

0800108c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001090:	4b12      	ldr	r3, [pc, #72]	; (80010dc <MX_I2C1_Init+0x50>)
 8001092:	4a13      	ldr	r2, [pc, #76]	; (80010e0 <MX_I2C1_Init+0x54>)
 8001094:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001096:	4b11      	ldr	r3, [pc, #68]	; (80010dc <MX_I2C1_Init+0x50>)
 8001098:	4a12      	ldr	r2, [pc, #72]	; (80010e4 <MX_I2C1_Init+0x58>)
 800109a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800109c:	4b0f      	ldr	r3, [pc, #60]	; (80010dc <MX_I2C1_Init+0x50>)
 800109e:	2200      	movs	r2, #0
 80010a0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80010a2:	4b0e      	ldr	r3, [pc, #56]	; (80010dc <MX_I2C1_Init+0x50>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010a8:	4b0c      	ldr	r3, [pc, #48]	; (80010dc <MX_I2C1_Init+0x50>)
 80010aa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80010ae:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010b0:	4b0a      	ldr	r3, [pc, #40]	; (80010dc <MX_I2C1_Init+0x50>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80010b6:	4b09      	ldr	r3, [pc, #36]	; (80010dc <MX_I2C1_Init+0x50>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010bc:	4b07      	ldr	r3, [pc, #28]	; (80010dc <MX_I2C1_Init+0x50>)
 80010be:	2200      	movs	r2, #0
 80010c0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010c2:	4b06      	ldr	r3, [pc, #24]	; (80010dc <MX_I2C1_Init+0x50>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010c8:	4804      	ldr	r0, [pc, #16]	; (80010dc <MX_I2C1_Init+0x50>)
 80010ca:	f000 fcb3 	bl	8001a34 <HAL_I2C_Init>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d001      	beq.n	80010d8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80010d4:	f000 f836 	bl	8001144 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80010d8:	bf00      	nop
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	200001f8 	.word	0x200001f8
 80010e0:	40005400 	.word	0x40005400
 80010e4:	000186a0 	.word	0x000186a0

080010e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b085      	sub	sp, #20
 80010ec:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010ee:	4b14      	ldr	r3, [pc, #80]	; (8001140 <MX_GPIO_Init+0x58>)
 80010f0:	699b      	ldr	r3, [r3, #24]
 80010f2:	4a13      	ldr	r2, [pc, #76]	; (8001140 <MX_GPIO_Init+0x58>)
 80010f4:	f043 0320 	orr.w	r3, r3, #32
 80010f8:	6193      	str	r3, [r2, #24]
 80010fa:	4b11      	ldr	r3, [pc, #68]	; (8001140 <MX_GPIO_Init+0x58>)
 80010fc:	699b      	ldr	r3, [r3, #24]
 80010fe:	f003 0320 	and.w	r3, r3, #32
 8001102:	60fb      	str	r3, [r7, #12]
 8001104:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001106:	4b0e      	ldr	r3, [pc, #56]	; (8001140 <MX_GPIO_Init+0x58>)
 8001108:	699b      	ldr	r3, [r3, #24]
 800110a:	4a0d      	ldr	r2, [pc, #52]	; (8001140 <MX_GPIO_Init+0x58>)
 800110c:	f043 0304 	orr.w	r3, r3, #4
 8001110:	6193      	str	r3, [r2, #24]
 8001112:	4b0b      	ldr	r3, [pc, #44]	; (8001140 <MX_GPIO_Init+0x58>)
 8001114:	699b      	ldr	r3, [r3, #24]
 8001116:	f003 0304 	and.w	r3, r3, #4
 800111a:	60bb      	str	r3, [r7, #8]
 800111c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800111e:	4b08      	ldr	r3, [pc, #32]	; (8001140 <MX_GPIO_Init+0x58>)
 8001120:	699b      	ldr	r3, [r3, #24]
 8001122:	4a07      	ldr	r2, [pc, #28]	; (8001140 <MX_GPIO_Init+0x58>)
 8001124:	f043 0308 	orr.w	r3, r3, #8
 8001128:	6193      	str	r3, [r2, #24]
 800112a:	4b05      	ldr	r3, [pc, #20]	; (8001140 <MX_GPIO_Init+0x58>)
 800112c:	699b      	ldr	r3, [r3, #24]
 800112e:	f003 0308 	and.w	r3, r3, #8
 8001132:	607b      	str	r3, [r7, #4]
 8001134:	687b      	ldr	r3, [r7, #4]

}
 8001136:	bf00      	nop
 8001138:	3714      	adds	r7, #20
 800113a:	46bd      	mov	sp, r7
 800113c:	bc80      	pop	{r7}
 800113e:	4770      	bx	lr
 8001140:	40021000 	.word	0x40021000

08001144 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001148:	b672      	cpsid	i
}
 800114a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800114c:	e7fe      	b.n	800114c <Error_Handler+0x8>
	...

08001150 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001150:	b480      	push	{r7}
 8001152:	b085      	sub	sp, #20
 8001154:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001156:	4b15      	ldr	r3, [pc, #84]	; (80011ac <HAL_MspInit+0x5c>)
 8001158:	699b      	ldr	r3, [r3, #24]
 800115a:	4a14      	ldr	r2, [pc, #80]	; (80011ac <HAL_MspInit+0x5c>)
 800115c:	f043 0301 	orr.w	r3, r3, #1
 8001160:	6193      	str	r3, [r2, #24]
 8001162:	4b12      	ldr	r3, [pc, #72]	; (80011ac <HAL_MspInit+0x5c>)
 8001164:	699b      	ldr	r3, [r3, #24]
 8001166:	f003 0301 	and.w	r3, r3, #1
 800116a:	60bb      	str	r3, [r7, #8]
 800116c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800116e:	4b0f      	ldr	r3, [pc, #60]	; (80011ac <HAL_MspInit+0x5c>)
 8001170:	69db      	ldr	r3, [r3, #28]
 8001172:	4a0e      	ldr	r2, [pc, #56]	; (80011ac <HAL_MspInit+0x5c>)
 8001174:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001178:	61d3      	str	r3, [r2, #28]
 800117a:	4b0c      	ldr	r3, [pc, #48]	; (80011ac <HAL_MspInit+0x5c>)
 800117c:	69db      	ldr	r3, [r3, #28]
 800117e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001182:	607b      	str	r3, [r7, #4]
 8001184:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001186:	4b0a      	ldr	r3, [pc, #40]	; (80011b0 <HAL_MspInit+0x60>)
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	60fb      	str	r3, [r7, #12]
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001192:	60fb      	str	r3, [r7, #12]
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800119a:	60fb      	str	r3, [r7, #12]
 800119c:	4a04      	ldr	r2, [pc, #16]	; (80011b0 <HAL_MspInit+0x60>)
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011a2:	bf00      	nop
 80011a4:	3714      	adds	r7, #20
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bc80      	pop	{r7}
 80011aa:	4770      	bx	lr
 80011ac:	40021000 	.word	0x40021000
 80011b0:	40010000 	.word	0x40010000

080011b4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b088      	sub	sp, #32
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011bc:	f107 0310 	add.w	r3, r7, #16
 80011c0:	2200      	movs	r2, #0
 80011c2:	601a      	str	r2, [r3, #0]
 80011c4:	605a      	str	r2, [r3, #4]
 80011c6:	609a      	str	r2, [r3, #8]
 80011c8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4a15      	ldr	r2, [pc, #84]	; (8001224 <HAL_I2C_MspInit+0x70>)
 80011d0:	4293      	cmp	r3, r2
 80011d2:	d123      	bne.n	800121c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011d4:	4b14      	ldr	r3, [pc, #80]	; (8001228 <HAL_I2C_MspInit+0x74>)
 80011d6:	699b      	ldr	r3, [r3, #24]
 80011d8:	4a13      	ldr	r2, [pc, #76]	; (8001228 <HAL_I2C_MspInit+0x74>)
 80011da:	f043 0308 	orr.w	r3, r3, #8
 80011de:	6193      	str	r3, [r2, #24]
 80011e0:	4b11      	ldr	r3, [pc, #68]	; (8001228 <HAL_I2C_MspInit+0x74>)
 80011e2:	699b      	ldr	r3, [r3, #24]
 80011e4:	f003 0308 	and.w	r3, r3, #8
 80011e8:	60fb      	str	r3, [r7, #12]
 80011ea:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80011ec:	23c0      	movs	r3, #192	; 0xc0
 80011ee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011f0:	2312      	movs	r3, #18
 80011f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011f4:	2303      	movs	r3, #3
 80011f6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011f8:	f107 0310 	add.w	r3, r7, #16
 80011fc:	4619      	mov	r1, r3
 80011fe:	480b      	ldr	r0, [pc, #44]	; (800122c <HAL_I2C_MspInit+0x78>)
 8001200:	f000 fa94 	bl	800172c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001204:	4b08      	ldr	r3, [pc, #32]	; (8001228 <HAL_I2C_MspInit+0x74>)
 8001206:	69db      	ldr	r3, [r3, #28]
 8001208:	4a07      	ldr	r2, [pc, #28]	; (8001228 <HAL_I2C_MspInit+0x74>)
 800120a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800120e:	61d3      	str	r3, [r2, #28]
 8001210:	4b05      	ldr	r3, [pc, #20]	; (8001228 <HAL_I2C_MspInit+0x74>)
 8001212:	69db      	ldr	r3, [r3, #28]
 8001214:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001218:	60bb      	str	r3, [r7, #8]
 800121a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800121c:	bf00      	nop
 800121e:	3720      	adds	r7, #32
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	40005400 	.word	0x40005400
 8001228:	40021000 	.word	0x40021000
 800122c:	40010c00 	.word	0x40010c00

08001230 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001234:	e7fe      	b.n	8001234 <NMI_Handler+0x4>

08001236 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001236:	b480      	push	{r7}
 8001238:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800123a:	e7fe      	b.n	800123a <HardFault_Handler+0x4>

0800123c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001240:	e7fe      	b.n	8001240 <MemManage_Handler+0x4>

08001242 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001242:	b480      	push	{r7}
 8001244:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001246:	e7fe      	b.n	8001246 <BusFault_Handler+0x4>

08001248 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800124c:	e7fe      	b.n	800124c <UsageFault_Handler+0x4>

0800124e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800124e:	b480      	push	{r7}
 8001250:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001252:	bf00      	nop
 8001254:	46bd      	mov	sp, r7
 8001256:	bc80      	pop	{r7}
 8001258:	4770      	bx	lr

0800125a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800125a:	b480      	push	{r7}
 800125c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800125e:	bf00      	nop
 8001260:	46bd      	mov	sp, r7
 8001262:	bc80      	pop	{r7}
 8001264:	4770      	bx	lr

08001266 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001266:	b480      	push	{r7}
 8001268:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800126a:	bf00      	nop
 800126c:	46bd      	mov	sp, r7
 800126e:	bc80      	pop	{r7}
 8001270:	4770      	bx	lr

08001272 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001272:	b580      	push	{r7, lr}
 8001274:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001276:	f000 f935 	bl	80014e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800127a:	bf00      	nop
 800127c:	bd80      	pop	{r7, pc}

0800127e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800127e:	b480      	push	{r7}
 8001280:	af00      	add	r7, sp, #0
  return 1;
 8001282:	2301      	movs	r3, #1
}
 8001284:	4618      	mov	r0, r3
 8001286:	46bd      	mov	sp, r7
 8001288:	bc80      	pop	{r7}
 800128a:	4770      	bx	lr

0800128c <_kill>:

int _kill(int pid, int sig)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
 8001294:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001296:	f002 f953 	bl	8003540 <__errno>
 800129a:	4603      	mov	r3, r0
 800129c:	2216      	movs	r2, #22
 800129e:	601a      	str	r2, [r3, #0]
  return -1;
 80012a0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012a4:	4618      	mov	r0, r3
 80012a6:	3708      	adds	r7, #8
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}

080012ac <_exit>:

void _exit (int status)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80012b4:	f04f 31ff 	mov.w	r1, #4294967295
 80012b8:	6878      	ldr	r0, [r7, #4]
 80012ba:	f7ff ffe7 	bl	800128c <_kill>
  while (1) {}    /* Make sure we hang here */
 80012be:	e7fe      	b.n	80012be <_exit+0x12>

080012c0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b086      	sub	sp, #24
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	60f8      	str	r0, [r7, #12]
 80012c8:	60b9      	str	r1, [r7, #8]
 80012ca:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012cc:	2300      	movs	r3, #0
 80012ce:	617b      	str	r3, [r7, #20]
 80012d0:	e00a      	b.n	80012e8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80012d2:	f3af 8000 	nop.w
 80012d6:	4601      	mov	r1, r0
 80012d8:	68bb      	ldr	r3, [r7, #8]
 80012da:	1c5a      	adds	r2, r3, #1
 80012dc:	60ba      	str	r2, [r7, #8]
 80012de:	b2ca      	uxtb	r2, r1
 80012e0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	3301      	adds	r3, #1
 80012e6:	617b      	str	r3, [r7, #20]
 80012e8:	697a      	ldr	r2, [r7, #20]
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	429a      	cmp	r2, r3
 80012ee:	dbf0      	blt.n	80012d2 <_read+0x12>
  }

  return len;
 80012f0:	687b      	ldr	r3, [r7, #4]
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	3718      	adds	r7, #24
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}

080012fa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80012fa:	b580      	push	{r7, lr}
 80012fc:	b086      	sub	sp, #24
 80012fe:	af00      	add	r7, sp, #0
 8001300:	60f8      	str	r0, [r7, #12]
 8001302:	60b9      	str	r1, [r7, #8]
 8001304:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001306:	2300      	movs	r3, #0
 8001308:	617b      	str	r3, [r7, #20]
 800130a:	e009      	b.n	8001320 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800130c:	68bb      	ldr	r3, [r7, #8]
 800130e:	1c5a      	adds	r2, r3, #1
 8001310:	60ba      	str	r2, [r7, #8]
 8001312:	781b      	ldrb	r3, [r3, #0]
 8001314:	4618      	mov	r0, r3
 8001316:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800131a:	697b      	ldr	r3, [r7, #20]
 800131c:	3301      	adds	r3, #1
 800131e:	617b      	str	r3, [r7, #20]
 8001320:	697a      	ldr	r2, [r7, #20]
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	429a      	cmp	r2, r3
 8001326:	dbf1      	blt.n	800130c <_write+0x12>
  }
  return len;
 8001328:	687b      	ldr	r3, [r7, #4]
}
 800132a:	4618      	mov	r0, r3
 800132c:	3718      	adds	r7, #24
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}

08001332 <_close>:

int _close(int file)
{
 8001332:	b480      	push	{r7}
 8001334:	b083      	sub	sp, #12
 8001336:	af00      	add	r7, sp, #0
 8001338:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800133a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800133e:	4618      	mov	r0, r3
 8001340:	370c      	adds	r7, #12
 8001342:	46bd      	mov	sp, r7
 8001344:	bc80      	pop	{r7}
 8001346:	4770      	bx	lr

08001348 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001348:	b480      	push	{r7}
 800134a:	b083      	sub	sp, #12
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
 8001350:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001358:	605a      	str	r2, [r3, #4]
  return 0;
 800135a:	2300      	movs	r3, #0
}
 800135c:	4618      	mov	r0, r3
 800135e:	370c      	adds	r7, #12
 8001360:	46bd      	mov	sp, r7
 8001362:	bc80      	pop	{r7}
 8001364:	4770      	bx	lr

08001366 <_isatty>:

int _isatty(int file)
{
 8001366:	b480      	push	{r7}
 8001368:	b083      	sub	sp, #12
 800136a:	af00      	add	r7, sp, #0
 800136c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800136e:	2301      	movs	r3, #1
}
 8001370:	4618      	mov	r0, r3
 8001372:	370c      	adds	r7, #12
 8001374:	46bd      	mov	sp, r7
 8001376:	bc80      	pop	{r7}
 8001378:	4770      	bx	lr

0800137a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800137a:	b480      	push	{r7}
 800137c:	b085      	sub	sp, #20
 800137e:	af00      	add	r7, sp, #0
 8001380:	60f8      	str	r0, [r7, #12]
 8001382:	60b9      	str	r1, [r7, #8]
 8001384:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001386:	2300      	movs	r3, #0
}
 8001388:	4618      	mov	r0, r3
 800138a:	3714      	adds	r7, #20
 800138c:	46bd      	mov	sp, r7
 800138e:	bc80      	pop	{r7}
 8001390:	4770      	bx	lr
	...

08001394 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b086      	sub	sp, #24
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800139c:	4a14      	ldr	r2, [pc, #80]	; (80013f0 <_sbrk+0x5c>)
 800139e:	4b15      	ldr	r3, [pc, #84]	; (80013f4 <_sbrk+0x60>)
 80013a0:	1ad3      	subs	r3, r2, r3
 80013a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013a8:	4b13      	ldr	r3, [pc, #76]	; (80013f8 <_sbrk+0x64>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d102      	bne.n	80013b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013b0:	4b11      	ldr	r3, [pc, #68]	; (80013f8 <_sbrk+0x64>)
 80013b2:	4a12      	ldr	r2, [pc, #72]	; (80013fc <_sbrk+0x68>)
 80013b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013b6:	4b10      	ldr	r3, [pc, #64]	; (80013f8 <_sbrk+0x64>)
 80013b8:	681a      	ldr	r2, [r3, #0]
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	4413      	add	r3, r2
 80013be:	693a      	ldr	r2, [r7, #16]
 80013c0:	429a      	cmp	r2, r3
 80013c2:	d207      	bcs.n	80013d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013c4:	f002 f8bc 	bl	8003540 <__errno>
 80013c8:	4603      	mov	r3, r0
 80013ca:	220c      	movs	r2, #12
 80013cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013ce:	f04f 33ff 	mov.w	r3, #4294967295
 80013d2:	e009      	b.n	80013e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013d4:	4b08      	ldr	r3, [pc, #32]	; (80013f8 <_sbrk+0x64>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013da:	4b07      	ldr	r3, [pc, #28]	; (80013f8 <_sbrk+0x64>)
 80013dc:	681a      	ldr	r2, [r3, #0]
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	4413      	add	r3, r2
 80013e2:	4a05      	ldr	r2, [pc, #20]	; (80013f8 <_sbrk+0x64>)
 80013e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013e6:	68fb      	ldr	r3, [r7, #12]
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	3718      	adds	r7, #24
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	20005000 	.word	0x20005000
 80013f4:	00000400 	.word	0x00000400
 80013f8:	20000268 	.word	0x20000268
 80013fc:	20000280 	.word	0x20000280

08001400 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001404:	bf00      	nop
 8001406:	46bd      	mov	sp, r7
 8001408:	bc80      	pop	{r7}
 800140a:	4770      	bx	lr

0800140c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800140c:	480c      	ldr	r0, [pc, #48]	; (8001440 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800140e:	490d      	ldr	r1, [pc, #52]	; (8001444 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001410:	4a0d      	ldr	r2, [pc, #52]	; (8001448 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001412:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001414:	e002      	b.n	800141c <LoopCopyDataInit>

08001416 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001416:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001418:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800141a:	3304      	adds	r3, #4

0800141c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800141c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800141e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001420:	d3f9      	bcc.n	8001416 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001422:	4a0a      	ldr	r2, [pc, #40]	; (800144c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001424:	4c0a      	ldr	r4, [pc, #40]	; (8001450 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001426:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001428:	e001      	b.n	800142e <LoopFillZerobss>

0800142a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800142a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800142c:	3204      	adds	r2, #4

0800142e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800142e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001430:	d3fb      	bcc.n	800142a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001432:	f7ff ffe5 	bl	8001400 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001436:	f002 f889 	bl	800354c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800143a:	f7ff fd71 	bl	8000f20 <main>
  bx lr
 800143e:	4770      	bx	lr
  ldr r0, =_sdata
 8001440:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001444:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001448:	080067a4 	.word	0x080067a4
  ldr r2, =_sbss
 800144c:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001450:	20000280 	.word	0x20000280

08001454 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001454:	e7fe      	b.n	8001454 <ADC1_2_IRQHandler>
	...

08001458 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800145c:	4b08      	ldr	r3, [pc, #32]	; (8001480 <HAL_Init+0x28>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4a07      	ldr	r2, [pc, #28]	; (8001480 <HAL_Init+0x28>)
 8001462:	f043 0310 	orr.w	r3, r3, #16
 8001466:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001468:	2003      	movs	r0, #3
 800146a:	f000 f92b 	bl	80016c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800146e:	200f      	movs	r0, #15
 8001470:	f000 f808 	bl	8001484 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001474:	f7ff fe6c 	bl	8001150 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001478:	2300      	movs	r3, #0
}
 800147a:	4618      	mov	r0, r3
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	40022000 	.word	0x40022000

08001484 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800148c:	4b12      	ldr	r3, [pc, #72]	; (80014d8 <HAL_InitTick+0x54>)
 800148e:	681a      	ldr	r2, [r3, #0]
 8001490:	4b12      	ldr	r3, [pc, #72]	; (80014dc <HAL_InitTick+0x58>)
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	4619      	mov	r1, r3
 8001496:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800149a:	fbb3 f3f1 	udiv	r3, r3, r1
 800149e:	fbb2 f3f3 	udiv	r3, r2, r3
 80014a2:	4618      	mov	r0, r3
 80014a4:	f000 f935 	bl	8001712 <HAL_SYSTICK_Config>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d001      	beq.n	80014b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014ae:	2301      	movs	r3, #1
 80014b0:	e00e      	b.n	80014d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	2b0f      	cmp	r3, #15
 80014b6:	d80a      	bhi.n	80014ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014b8:	2200      	movs	r2, #0
 80014ba:	6879      	ldr	r1, [r7, #4]
 80014bc:	f04f 30ff 	mov.w	r0, #4294967295
 80014c0:	f000 f90b 	bl	80016da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014c4:	4a06      	ldr	r2, [pc, #24]	; (80014e0 <HAL_InitTick+0x5c>)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014ca:	2300      	movs	r3, #0
 80014cc:	e000      	b.n	80014d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014ce:	2301      	movs	r3, #1
}
 80014d0:	4618      	mov	r0, r3
 80014d2:	3708      	adds	r7, #8
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	20000000 	.word	0x20000000
 80014dc:	20000008 	.word	0x20000008
 80014e0:	20000004 	.word	0x20000004

080014e4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014e8:	4b05      	ldr	r3, [pc, #20]	; (8001500 <HAL_IncTick+0x1c>)
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	461a      	mov	r2, r3
 80014ee:	4b05      	ldr	r3, [pc, #20]	; (8001504 <HAL_IncTick+0x20>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4413      	add	r3, r2
 80014f4:	4a03      	ldr	r2, [pc, #12]	; (8001504 <HAL_IncTick+0x20>)
 80014f6:	6013      	str	r3, [r2, #0]
}
 80014f8:	bf00      	nop
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bc80      	pop	{r7}
 80014fe:	4770      	bx	lr
 8001500:	20000008 	.word	0x20000008
 8001504:	2000026c 	.word	0x2000026c

08001508 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
  return uwTick;
 800150c:	4b02      	ldr	r3, [pc, #8]	; (8001518 <HAL_GetTick+0x10>)
 800150e:	681b      	ldr	r3, [r3, #0]
}
 8001510:	4618      	mov	r0, r3
 8001512:	46bd      	mov	sp, r7
 8001514:	bc80      	pop	{r7}
 8001516:	4770      	bx	lr
 8001518:	2000026c 	.word	0x2000026c

0800151c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b084      	sub	sp, #16
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001524:	f7ff fff0 	bl	8001508 <HAL_GetTick>
 8001528:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001534:	d005      	beq.n	8001542 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001536:	4b0a      	ldr	r3, [pc, #40]	; (8001560 <HAL_Delay+0x44>)
 8001538:	781b      	ldrb	r3, [r3, #0]
 800153a:	461a      	mov	r2, r3
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	4413      	add	r3, r2
 8001540:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001542:	bf00      	nop
 8001544:	f7ff ffe0 	bl	8001508 <HAL_GetTick>
 8001548:	4602      	mov	r2, r0
 800154a:	68bb      	ldr	r3, [r7, #8]
 800154c:	1ad3      	subs	r3, r2, r3
 800154e:	68fa      	ldr	r2, [r7, #12]
 8001550:	429a      	cmp	r2, r3
 8001552:	d8f7      	bhi.n	8001544 <HAL_Delay+0x28>
  {
  }
}
 8001554:	bf00      	nop
 8001556:	bf00      	nop
 8001558:	3710      	adds	r7, #16
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	20000008 	.word	0x20000008

08001564 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001564:	b480      	push	{r7}
 8001566:	b085      	sub	sp, #20
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	f003 0307 	and.w	r3, r3, #7
 8001572:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001574:	4b0c      	ldr	r3, [pc, #48]	; (80015a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001576:	68db      	ldr	r3, [r3, #12]
 8001578:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800157a:	68ba      	ldr	r2, [r7, #8]
 800157c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001580:	4013      	ands	r3, r2
 8001582:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001588:	68bb      	ldr	r3, [r7, #8]
 800158a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800158c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001590:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001594:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001596:	4a04      	ldr	r2, [pc, #16]	; (80015a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001598:	68bb      	ldr	r3, [r7, #8]
 800159a:	60d3      	str	r3, [r2, #12]
}
 800159c:	bf00      	nop
 800159e:	3714      	adds	r7, #20
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bc80      	pop	{r7}
 80015a4:	4770      	bx	lr
 80015a6:	bf00      	nop
 80015a8:	e000ed00 	.word	0xe000ed00

080015ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015b0:	4b04      	ldr	r3, [pc, #16]	; (80015c4 <__NVIC_GetPriorityGrouping+0x18>)
 80015b2:	68db      	ldr	r3, [r3, #12]
 80015b4:	0a1b      	lsrs	r3, r3, #8
 80015b6:	f003 0307 	and.w	r3, r3, #7
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	46bd      	mov	sp, r7
 80015be:	bc80      	pop	{r7}
 80015c0:	4770      	bx	lr
 80015c2:	bf00      	nop
 80015c4:	e000ed00 	.word	0xe000ed00

080015c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b083      	sub	sp, #12
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	4603      	mov	r3, r0
 80015d0:	6039      	str	r1, [r7, #0]
 80015d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	db0a      	blt.n	80015f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	b2da      	uxtb	r2, r3
 80015e0:	490c      	ldr	r1, [pc, #48]	; (8001614 <__NVIC_SetPriority+0x4c>)
 80015e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015e6:	0112      	lsls	r2, r2, #4
 80015e8:	b2d2      	uxtb	r2, r2
 80015ea:	440b      	add	r3, r1
 80015ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015f0:	e00a      	b.n	8001608 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	b2da      	uxtb	r2, r3
 80015f6:	4908      	ldr	r1, [pc, #32]	; (8001618 <__NVIC_SetPriority+0x50>)
 80015f8:	79fb      	ldrb	r3, [r7, #7]
 80015fa:	f003 030f 	and.w	r3, r3, #15
 80015fe:	3b04      	subs	r3, #4
 8001600:	0112      	lsls	r2, r2, #4
 8001602:	b2d2      	uxtb	r2, r2
 8001604:	440b      	add	r3, r1
 8001606:	761a      	strb	r2, [r3, #24]
}
 8001608:	bf00      	nop
 800160a:	370c      	adds	r7, #12
 800160c:	46bd      	mov	sp, r7
 800160e:	bc80      	pop	{r7}
 8001610:	4770      	bx	lr
 8001612:	bf00      	nop
 8001614:	e000e100 	.word	0xe000e100
 8001618:	e000ed00 	.word	0xe000ed00

0800161c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800161c:	b480      	push	{r7}
 800161e:	b089      	sub	sp, #36	; 0x24
 8001620:	af00      	add	r7, sp, #0
 8001622:	60f8      	str	r0, [r7, #12]
 8001624:	60b9      	str	r1, [r7, #8]
 8001626:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	f003 0307 	and.w	r3, r3, #7
 800162e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001630:	69fb      	ldr	r3, [r7, #28]
 8001632:	f1c3 0307 	rsb	r3, r3, #7
 8001636:	2b04      	cmp	r3, #4
 8001638:	bf28      	it	cs
 800163a:	2304      	movcs	r3, #4
 800163c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800163e:	69fb      	ldr	r3, [r7, #28]
 8001640:	3304      	adds	r3, #4
 8001642:	2b06      	cmp	r3, #6
 8001644:	d902      	bls.n	800164c <NVIC_EncodePriority+0x30>
 8001646:	69fb      	ldr	r3, [r7, #28]
 8001648:	3b03      	subs	r3, #3
 800164a:	e000      	b.n	800164e <NVIC_EncodePriority+0x32>
 800164c:	2300      	movs	r3, #0
 800164e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001650:	f04f 32ff 	mov.w	r2, #4294967295
 8001654:	69bb      	ldr	r3, [r7, #24]
 8001656:	fa02 f303 	lsl.w	r3, r2, r3
 800165a:	43da      	mvns	r2, r3
 800165c:	68bb      	ldr	r3, [r7, #8]
 800165e:	401a      	ands	r2, r3
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001664:	f04f 31ff 	mov.w	r1, #4294967295
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	fa01 f303 	lsl.w	r3, r1, r3
 800166e:	43d9      	mvns	r1, r3
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001674:	4313      	orrs	r3, r2
         );
}
 8001676:	4618      	mov	r0, r3
 8001678:	3724      	adds	r7, #36	; 0x24
 800167a:	46bd      	mov	sp, r7
 800167c:	bc80      	pop	{r7}
 800167e:	4770      	bx	lr

08001680 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b082      	sub	sp, #8
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	3b01      	subs	r3, #1
 800168c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001690:	d301      	bcc.n	8001696 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001692:	2301      	movs	r3, #1
 8001694:	e00f      	b.n	80016b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001696:	4a0a      	ldr	r2, [pc, #40]	; (80016c0 <SysTick_Config+0x40>)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	3b01      	subs	r3, #1
 800169c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800169e:	210f      	movs	r1, #15
 80016a0:	f04f 30ff 	mov.w	r0, #4294967295
 80016a4:	f7ff ff90 	bl	80015c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016a8:	4b05      	ldr	r3, [pc, #20]	; (80016c0 <SysTick_Config+0x40>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016ae:	4b04      	ldr	r3, [pc, #16]	; (80016c0 <SysTick_Config+0x40>)
 80016b0:	2207      	movs	r2, #7
 80016b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016b4:	2300      	movs	r3, #0
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	3708      	adds	r7, #8
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	e000e010 	.word	0xe000e010

080016c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b082      	sub	sp, #8
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016cc:	6878      	ldr	r0, [r7, #4]
 80016ce:	f7ff ff49 	bl	8001564 <__NVIC_SetPriorityGrouping>
}
 80016d2:	bf00      	nop
 80016d4:	3708      	adds	r7, #8
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}

080016da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016da:	b580      	push	{r7, lr}
 80016dc:	b086      	sub	sp, #24
 80016de:	af00      	add	r7, sp, #0
 80016e0:	4603      	mov	r3, r0
 80016e2:	60b9      	str	r1, [r7, #8]
 80016e4:	607a      	str	r2, [r7, #4]
 80016e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016e8:	2300      	movs	r3, #0
 80016ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016ec:	f7ff ff5e 	bl	80015ac <__NVIC_GetPriorityGrouping>
 80016f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016f2:	687a      	ldr	r2, [r7, #4]
 80016f4:	68b9      	ldr	r1, [r7, #8]
 80016f6:	6978      	ldr	r0, [r7, #20]
 80016f8:	f7ff ff90 	bl	800161c <NVIC_EncodePriority>
 80016fc:	4602      	mov	r2, r0
 80016fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001702:	4611      	mov	r1, r2
 8001704:	4618      	mov	r0, r3
 8001706:	f7ff ff5f 	bl	80015c8 <__NVIC_SetPriority>
}
 800170a:	bf00      	nop
 800170c:	3718      	adds	r7, #24
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}

08001712 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001712:	b580      	push	{r7, lr}
 8001714:	b082      	sub	sp, #8
 8001716:	af00      	add	r7, sp, #0
 8001718:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800171a:	6878      	ldr	r0, [r7, #4]
 800171c:	f7ff ffb0 	bl	8001680 <SysTick_Config>
 8001720:	4603      	mov	r3, r0
}
 8001722:	4618      	mov	r0, r3
 8001724:	3708      	adds	r7, #8
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
	...

0800172c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800172c:	b480      	push	{r7}
 800172e:	b08b      	sub	sp, #44	; 0x2c
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
 8001734:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001736:	2300      	movs	r3, #0
 8001738:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800173a:	2300      	movs	r3, #0
 800173c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800173e:	e169      	b.n	8001a14 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001740:	2201      	movs	r2, #1
 8001742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001744:	fa02 f303 	lsl.w	r3, r2, r3
 8001748:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	69fa      	ldr	r2, [r7, #28]
 8001750:	4013      	ands	r3, r2
 8001752:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001754:	69ba      	ldr	r2, [r7, #24]
 8001756:	69fb      	ldr	r3, [r7, #28]
 8001758:	429a      	cmp	r2, r3
 800175a:	f040 8158 	bne.w	8001a0e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	4a9a      	ldr	r2, [pc, #616]	; (80019cc <HAL_GPIO_Init+0x2a0>)
 8001764:	4293      	cmp	r3, r2
 8001766:	d05e      	beq.n	8001826 <HAL_GPIO_Init+0xfa>
 8001768:	4a98      	ldr	r2, [pc, #608]	; (80019cc <HAL_GPIO_Init+0x2a0>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d875      	bhi.n	800185a <HAL_GPIO_Init+0x12e>
 800176e:	4a98      	ldr	r2, [pc, #608]	; (80019d0 <HAL_GPIO_Init+0x2a4>)
 8001770:	4293      	cmp	r3, r2
 8001772:	d058      	beq.n	8001826 <HAL_GPIO_Init+0xfa>
 8001774:	4a96      	ldr	r2, [pc, #600]	; (80019d0 <HAL_GPIO_Init+0x2a4>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d86f      	bhi.n	800185a <HAL_GPIO_Init+0x12e>
 800177a:	4a96      	ldr	r2, [pc, #600]	; (80019d4 <HAL_GPIO_Init+0x2a8>)
 800177c:	4293      	cmp	r3, r2
 800177e:	d052      	beq.n	8001826 <HAL_GPIO_Init+0xfa>
 8001780:	4a94      	ldr	r2, [pc, #592]	; (80019d4 <HAL_GPIO_Init+0x2a8>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d869      	bhi.n	800185a <HAL_GPIO_Init+0x12e>
 8001786:	4a94      	ldr	r2, [pc, #592]	; (80019d8 <HAL_GPIO_Init+0x2ac>)
 8001788:	4293      	cmp	r3, r2
 800178a:	d04c      	beq.n	8001826 <HAL_GPIO_Init+0xfa>
 800178c:	4a92      	ldr	r2, [pc, #584]	; (80019d8 <HAL_GPIO_Init+0x2ac>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d863      	bhi.n	800185a <HAL_GPIO_Init+0x12e>
 8001792:	4a92      	ldr	r2, [pc, #584]	; (80019dc <HAL_GPIO_Init+0x2b0>)
 8001794:	4293      	cmp	r3, r2
 8001796:	d046      	beq.n	8001826 <HAL_GPIO_Init+0xfa>
 8001798:	4a90      	ldr	r2, [pc, #576]	; (80019dc <HAL_GPIO_Init+0x2b0>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d85d      	bhi.n	800185a <HAL_GPIO_Init+0x12e>
 800179e:	2b12      	cmp	r3, #18
 80017a0:	d82a      	bhi.n	80017f8 <HAL_GPIO_Init+0xcc>
 80017a2:	2b12      	cmp	r3, #18
 80017a4:	d859      	bhi.n	800185a <HAL_GPIO_Init+0x12e>
 80017a6:	a201      	add	r2, pc, #4	; (adr r2, 80017ac <HAL_GPIO_Init+0x80>)
 80017a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017ac:	08001827 	.word	0x08001827
 80017b0:	08001801 	.word	0x08001801
 80017b4:	08001813 	.word	0x08001813
 80017b8:	08001855 	.word	0x08001855
 80017bc:	0800185b 	.word	0x0800185b
 80017c0:	0800185b 	.word	0x0800185b
 80017c4:	0800185b 	.word	0x0800185b
 80017c8:	0800185b 	.word	0x0800185b
 80017cc:	0800185b 	.word	0x0800185b
 80017d0:	0800185b 	.word	0x0800185b
 80017d4:	0800185b 	.word	0x0800185b
 80017d8:	0800185b 	.word	0x0800185b
 80017dc:	0800185b 	.word	0x0800185b
 80017e0:	0800185b 	.word	0x0800185b
 80017e4:	0800185b 	.word	0x0800185b
 80017e8:	0800185b 	.word	0x0800185b
 80017ec:	0800185b 	.word	0x0800185b
 80017f0:	08001809 	.word	0x08001809
 80017f4:	0800181d 	.word	0x0800181d
 80017f8:	4a79      	ldr	r2, [pc, #484]	; (80019e0 <HAL_GPIO_Init+0x2b4>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d013      	beq.n	8001826 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80017fe:	e02c      	b.n	800185a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	68db      	ldr	r3, [r3, #12]
 8001804:	623b      	str	r3, [r7, #32]
          break;
 8001806:	e029      	b.n	800185c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	68db      	ldr	r3, [r3, #12]
 800180c:	3304      	adds	r3, #4
 800180e:	623b      	str	r3, [r7, #32]
          break;
 8001810:	e024      	b.n	800185c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	68db      	ldr	r3, [r3, #12]
 8001816:	3308      	adds	r3, #8
 8001818:	623b      	str	r3, [r7, #32]
          break;
 800181a:	e01f      	b.n	800185c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	68db      	ldr	r3, [r3, #12]
 8001820:	330c      	adds	r3, #12
 8001822:	623b      	str	r3, [r7, #32]
          break;
 8001824:	e01a      	b.n	800185c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	689b      	ldr	r3, [r3, #8]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d102      	bne.n	8001834 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800182e:	2304      	movs	r3, #4
 8001830:	623b      	str	r3, [r7, #32]
          break;
 8001832:	e013      	b.n	800185c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	689b      	ldr	r3, [r3, #8]
 8001838:	2b01      	cmp	r3, #1
 800183a:	d105      	bne.n	8001848 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800183c:	2308      	movs	r3, #8
 800183e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	69fa      	ldr	r2, [r7, #28]
 8001844:	611a      	str	r2, [r3, #16]
          break;
 8001846:	e009      	b.n	800185c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001848:	2308      	movs	r3, #8
 800184a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	69fa      	ldr	r2, [r7, #28]
 8001850:	615a      	str	r2, [r3, #20]
          break;
 8001852:	e003      	b.n	800185c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001854:	2300      	movs	r3, #0
 8001856:	623b      	str	r3, [r7, #32]
          break;
 8001858:	e000      	b.n	800185c <HAL_GPIO_Init+0x130>
          break;
 800185a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800185c:	69bb      	ldr	r3, [r7, #24]
 800185e:	2bff      	cmp	r3, #255	; 0xff
 8001860:	d801      	bhi.n	8001866 <HAL_GPIO_Init+0x13a>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	e001      	b.n	800186a <HAL_GPIO_Init+0x13e>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	3304      	adds	r3, #4
 800186a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800186c:	69bb      	ldr	r3, [r7, #24]
 800186e:	2bff      	cmp	r3, #255	; 0xff
 8001870:	d802      	bhi.n	8001878 <HAL_GPIO_Init+0x14c>
 8001872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001874:	009b      	lsls	r3, r3, #2
 8001876:	e002      	b.n	800187e <HAL_GPIO_Init+0x152>
 8001878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800187a:	3b08      	subs	r3, #8
 800187c:	009b      	lsls	r3, r3, #2
 800187e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	681a      	ldr	r2, [r3, #0]
 8001884:	210f      	movs	r1, #15
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	fa01 f303 	lsl.w	r3, r1, r3
 800188c:	43db      	mvns	r3, r3
 800188e:	401a      	ands	r2, r3
 8001890:	6a39      	ldr	r1, [r7, #32]
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	fa01 f303 	lsl.w	r3, r1, r3
 8001898:	431a      	orrs	r2, r3
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	f000 80b1 	beq.w	8001a0e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80018ac:	4b4d      	ldr	r3, [pc, #308]	; (80019e4 <HAL_GPIO_Init+0x2b8>)
 80018ae:	699b      	ldr	r3, [r3, #24]
 80018b0:	4a4c      	ldr	r2, [pc, #304]	; (80019e4 <HAL_GPIO_Init+0x2b8>)
 80018b2:	f043 0301 	orr.w	r3, r3, #1
 80018b6:	6193      	str	r3, [r2, #24]
 80018b8:	4b4a      	ldr	r3, [pc, #296]	; (80019e4 <HAL_GPIO_Init+0x2b8>)
 80018ba:	699b      	ldr	r3, [r3, #24]
 80018bc:	f003 0301 	and.w	r3, r3, #1
 80018c0:	60bb      	str	r3, [r7, #8]
 80018c2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80018c4:	4a48      	ldr	r2, [pc, #288]	; (80019e8 <HAL_GPIO_Init+0x2bc>)
 80018c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c8:	089b      	lsrs	r3, r3, #2
 80018ca:	3302      	adds	r3, #2
 80018cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018d0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80018d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d4:	f003 0303 	and.w	r3, r3, #3
 80018d8:	009b      	lsls	r3, r3, #2
 80018da:	220f      	movs	r2, #15
 80018dc:	fa02 f303 	lsl.w	r3, r2, r3
 80018e0:	43db      	mvns	r3, r3
 80018e2:	68fa      	ldr	r2, [r7, #12]
 80018e4:	4013      	ands	r3, r2
 80018e6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	4a40      	ldr	r2, [pc, #256]	; (80019ec <HAL_GPIO_Init+0x2c0>)
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d013      	beq.n	8001918 <HAL_GPIO_Init+0x1ec>
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	4a3f      	ldr	r2, [pc, #252]	; (80019f0 <HAL_GPIO_Init+0x2c4>)
 80018f4:	4293      	cmp	r3, r2
 80018f6:	d00d      	beq.n	8001914 <HAL_GPIO_Init+0x1e8>
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	4a3e      	ldr	r2, [pc, #248]	; (80019f4 <HAL_GPIO_Init+0x2c8>)
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d007      	beq.n	8001910 <HAL_GPIO_Init+0x1e4>
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	4a3d      	ldr	r2, [pc, #244]	; (80019f8 <HAL_GPIO_Init+0x2cc>)
 8001904:	4293      	cmp	r3, r2
 8001906:	d101      	bne.n	800190c <HAL_GPIO_Init+0x1e0>
 8001908:	2303      	movs	r3, #3
 800190a:	e006      	b.n	800191a <HAL_GPIO_Init+0x1ee>
 800190c:	2304      	movs	r3, #4
 800190e:	e004      	b.n	800191a <HAL_GPIO_Init+0x1ee>
 8001910:	2302      	movs	r3, #2
 8001912:	e002      	b.n	800191a <HAL_GPIO_Init+0x1ee>
 8001914:	2301      	movs	r3, #1
 8001916:	e000      	b.n	800191a <HAL_GPIO_Init+0x1ee>
 8001918:	2300      	movs	r3, #0
 800191a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800191c:	f002 0203 	and.w	r2, r2, #3
 8001920:	0092      	lsls	r2, r2, #2
 8001922:	4093      	lsls	r3, r2
 8001924:	68fa      	ldr	r2, [r7, #12]
 8001926:	4313      	orrs	r3, r2
 8001928:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800192a:	492f      	ldr	r1, [pc, #188]	; (80019e8 <HAL_GPIO_Init+0x2bc>)
 800192c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800192e:	089b      	lsrs	r3, r3, #2
 8001930:	3302      	adds	r3, #2
 8001932:	68fa      	ldr	r2, [r7, #12]
 8001934:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001940:	2b00      	cmp	r3, #0
 8001942:	d006      	beq.n	8001952 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001944:	4b2d      	ldr	r3, [pc, #180]	; (80019fc <HAL_GPIO_Init+0x2d0>)
 8001946:	681a      	ldr	r2, [r3, #0]
 8001948:	492c      	ldr	r1, [pc, #176]	; (80019fc <HAL_GPIO_Init+0x2d0>)
 800194a:	69bb      	ldr	r3, [r7, #24]
 800194c:	4313      	orrs	r3, r2
 800194e:	600b      	str	r3, [r1, #0]
 8001950:	e006      	b.n	8001960 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001952:	4b2a      	ldr	r3, [pc, #168]	; (80019fc <HAL_GPIO_Init+0x2d0>)
 8001954:	681a      	ldr	r2, [r3, #0]
 8001956:	69bb      	ldr	r3, [r7, #24]
 8001958:	43db      	mvns	r3, r3
 800195a:	4928      	ldr	r1, [pc, #160]	; (80019fc <HAL_GPIO_Init+0x2d0>)
 800195c:	4013      	ands	r3, r2
 800195e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001968:	2b00      	cmp	r3, #0
 800196a:	d006      	beq.n	800197a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800196c:	4b23      	ldr	r3, [pc, #140]	; (80019fc <HAL_GPIO_Init+0x2d0>)
 800196e:	685a      	ldr	r2, [r3, #4]
 8001970:	4922      	ldr	r1, [pc, #136]	; (80019fc <HAL_GPIO_Init+0x2d0>)
 8001972:	69bb      	ldr	r3, [r7, #24]
 8001974:	4313      	orrs	r3, r2
 8001976:	604b      	str	r3, [r1, #4]
 8001978:	e006      	b.n	8001988 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800197a:	4b20      	ldr	r3, [pc, #128]	; (80019fc <HAL_GPIO_Init+0x2d0>)
 800197c:	685a      	ldr	r2, [r3, #4]
 800197e:	69bb      	ldr	r3, [r7, #24]
 8001980:	43db      	mvns	r3, r3
 8001982:	491e      	ldr	r1, [pc, #120]	; (80019fc <HAL_GPIO_Init+0x2d0>)
 8001984:	4013      	ands	r3, r2
 8001986:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001990:	2b00      	cmp	r3, #0
 8001992:	d006      	beq.n	80019a2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001994:	4b19      	ldr	r3, [pc, #100]	; (80019fc <HAL_GPIO_Init+0x2d0>)
 8001996:	689a      	ldr	r2, [r3, #8]
 8001998:	4918      	ldr	r1, [pc, #96]	; (80019fc <HAL_GPIO_Init+0x2d0>)
 800199a:	69bb      	ldr	r3, [r7, #24]
 800199c:	4313      	orrs	r3, r2
 800199e:	608b      	str	r3, [r1, #8]
 80019a0:	e006      	b.n	80019b0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80019a2:	4b16      	ldr	r3, [pc, #88]	; (80019fc <HAL_GPIO_Init+0x2d0>)
 80019a4:	689a      	ldr	r2, [r3, #8]
 80019a6:	69bb      	ldr	r3, [r7, #24]
 80019a8:	43db      	mvns	r3, r3
 80019aa:	4914      	ldr	r1, [pc, #80]	; (80019fc <HAL_GPIO_Init+0x2d0>)
 80019ac:	4013      	ands	r3, r2
 80019ae:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d021      	beq.n	8001a00 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80019bc:	4b0f      	ldr	r3, [pc, #60]	; (80019fc <HAL_GPIO_Init+0x2d0>)
 80019be:	68da      	ldr	r2, [r3, #12]
 80019c0:	490e      	ldr	r1, [pc, #56]	; (80019fc <HAL_GPIO_Init+0x2d0>)
 80019c2:	69bb      	ldr	r3, [r7, #24]
 80019c4:	4313      	orrs	r3, r2
 80019c6:	60cb      	str	r3, [r1, #12]
 80019c8:	e021      	b.n	8001a0e <HAL_GPIO_Init+0x2e2>
 80019ca:	bf00      	nop
 80019cc:	10320000 	.word	0x10320000
 80019d0:	10310000 	.word	0x10310000
 80019d4:	10220000 	.word	0x10220000
 80019d8:	10210000 	.word	0x10210000
 80019dc:	10120000 	.word	0x10120000
 80019e0:	10110000 	.word	0x10110000
 80019e4:	40021000 	.word	0x40021000
 80019e8:	40010000 	.word	0x40010000
 80019ec:	40010800 	.word	0x40010800
 80019f0:	40010c00 	.word	0x40010c00
 80019f4:	40011000 	.word	0x40011000
 80019f8:	40011400 	.word	0x40011400
 80019fc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001a00:	4b0b      	ldr	r3, [pc, #44]	; (8001a30 <HAL_GPIO_Init+0x304>)
 8001a02:	68da      	ldr	r2, [r3, #12]
 8001a04:	69bb      	ldr	r3, [r7, #24]
 8001a06:	43db      	mvns	r3, r3
 8001a08:	4909      	ldr	r1, [pc, #36]	; (8001a30 <HAL_GPIO_Init+0x304>)
 8001a0a:	4013      	ands	r3, r2
 8001a0c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a10:	3301      	adds	r3, #1
 8001a12:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	681a      	ldr	r2, [r3, #0]
 8001a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a1a:	fa22 f303 	lsr.w	r3, r2, r3
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	f47f ae8e 	bne.w	8001740 <HAL_GPIO_Init+0x14>
  }
}
 8001a24:	bf00      	nop
 8001a26:	bf00      	nop
 8001a28:	372c      	adds	r7, #44	; 0x2c
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bc80      	pop	{r7}
 8001a2e:	4770      	bx	lr
 8001a30:	40010400 	.word	0x40010400

08001a34 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b084      	sub	sp, #16
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d101      	bne.n	8001a46 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001a42:	2301      	movs	r3, #1
 8001a44:	e12b      	b.n	8001c9e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a4c:	b2db      	uxtb	r3, r3
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d106      	bne.n	8001a60 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2200      	movs	r2, #0
 8001a56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001a5a:	6878      	ldr	r0, [r7, #4]
 8001a5c:	f7ff fbaa 	bl	80011b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2224      	movs	r2, #36	; 0x24
 8001a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	681a      	ldr	r2, [r3, #0]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f022 0201 	bic.w	r2, r2, #1
 8001a76:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	681a      	ldr	r2, [r3, #0]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001a86:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	681a      	ldr	r2, [r3, #0]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001a96:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001a98:	f001 fd20 	bl	80034dc <HAL_RCC_GetPCLK1Freq>
 8001a9c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	4a81      	ldr	r2, [pc, #516]	; (8001ca8 <HAL_I2C_Init+0x274>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d807      	bhi.n	8001ab8 <HAL_I2C_Init+0x84>
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	4a80      	ldr	r2, [pc, #512]	; (8001cac <HAL_I2C_Init+0x278>)
 8001aac:	4293      	cmp	r3, r2
 8001aae:	bf94      	ite	ls
 8001ab0:	2301      	movls	r3, #1
 8001ab2:	2300      	movhi	r3, #0
 8001ab4:	b2db      	uxtb	r3, r3
 8001ab6:	e006      	b.n	8001ac6 <HAL_I2C_Init+0x92>
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	4a7d      	ldr	r2, [pc, #500]	; (8001cb0 <HAL_I2C_Init+0x27c>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	bf94      	ite	ls
 8001ac0:	2301      	movls	r3, #1
 8001ac2:	2300      	movhi	r3, #0
 8001ac4:	b2db      	uxtb	r3, r3
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d001      	beq.n	8001ace <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
 8001acc:	e0e7      	b.n	8001c9e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	4a78      	ldr	r2, [pc, #480]	; (8001cb4 <HAL_I2C_Init+0x280>)
 8001ad2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ad6:	0c9b      	lsrs	r3, r3, #18
 8001ad8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	68ba      	ldr	r2, [r7, #8]
 8001aea:	430a      	orrs	r2, r1
 8001aec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	6a1b      	ldr	r3, [r3, #32]
 8001af4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	4a6a      	ldr	r2, [pc, #424]	; (8001ca8 <HAL_I2C_Init+0x274>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d802      	bhi.n	8001b08 <HAL_I2C_Init+0xd4>
 8001b02:	68bb      	ldr	r3, [r7, #8]
 8001b04:	3301      	adds	r3, #1
 8001b06:	e009      	b.n	8001b1c <HAL_I2C_Init+0xe8>
 8001b08:	68bb      	ldr	r3, [r7, #8]
 8001b0a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001b0e:	fb02 f303 	mul.w	r3, r2, r3
 8001b12:	4a69      	ldr	r2, [pc, #420]	; (8001cb8 <HAL_I2C_Init+0x284>)
 8001b14:	fba2 2303 	umull	r2, r3, r2, r3
 8001b18:	099b      	lsrs	r3, r3, #6
 8001b1a:	3301      	adds	r3, #1
 8001b1c:	687a      	ldr	r2, [r7, #4]
 8001b1e:	6812      	ldr	r2, [r2, #0]
 8001b20:	430b      	orrs	r3, r1
 8001b22:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	69db      	ldr	r3, [r3, #28]
 8001b2a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001b2e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	495c      	ldr	r1, [pc, #368]	; (8001ca8 <HAL_I2C_Init+0x274>)
 8001b38:	428b      	cmp	r3, r1
 8001b3a:	d819      	bhi.n	8001b70 <HAL_I2C_Init+0x13c>
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	1e59      	subs	r1, r3, #1
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	005b      	lsls	r3, r3, #1
 8001b46:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b4a:	1c59      	adds	r1, r3, #1
 8001b4c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001b50:	400b      	ands	r3, r1
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d00a      	beq.n	8001b6c <HAL_I2C_Init+0x138>
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	1e59      	subs	r1, r3, #1
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	005b      	lsls	r3, r3, #1
 8001b60:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b64:	3301      	adds	r3, #1
 8001b66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b6a:	e051      	b.n	8001c10 <HAL_I2C_Init+0x1dc>
 8001b6c:	2304      	movs	r3, #4
 8001b6e:	e04f      	b.n	8001c10 <HAL_I2C_Init+0x1dc>
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	689b      	ldr	r3, [r3, #8]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d111      	bne.n	8001b9c <HAL_I2C_Init+0x168>
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	1e58      	subs	r0, r3, #1
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6859      	ldr	r1, [r3, #4]
 8001b80:	460b      	mov	r3, r1
 8001b82:	005b      	lsls	r3, r3, #1
 8001b84:	440b      	add	r3, r1
 8001b86:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b8a:	3301      	adds	r3, #1
 8001b8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	bf0c      	ite	eq
 8001b94:	2301      	moveq	r3, #1
 8001b96:	2300      	movne	r3, #0
 8001b98:	b2db      	uxtb	r3, r3
 8001b9a:	e012      	b.n	8001bc2 <HAL_I2C_Init+0x18e>
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	1e58      	subs	r0, r3, #1
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6859      	ldr	r1, [r3, #4]
 8001ba4:	460b      	mov	r3, r1
 8001ba6:	009b      	lsls	r3, r3, #2
 8001ba8:	440b      	add	r3, r1
 8001baa:	0099      	lsls	r1, r3, #2
 8001bac:	440b      	add	r3, r1
 8001bae:	fbb0 f3f3 	udiv	r3, r0, r3
 8001bb2:	3301      	adds	r3, #1
 8001bb4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	bf0c      	ite	eq
 8001bbc:	2301      	moveq	r3, #1
 8001bbe:	2300      	movne	r3, #0
 8001bc0:	b2db      	uxtb	r3, r3
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d001      	beq.n	8001bca <HAL_I2C_Init+0x196>
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e022      	b.n	8001c10 <HAL_I2C_Init+0x1dc>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	689b      	ldr	r3, [r3, #8]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d10e      	bne.n	8001bf0 <HAL_I2C_Init+0x1bc>
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	1e58      	subs	r0, r3, #1
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6859      	ldr	r1, [r3, #4]
 8001bda:	460b      	mov	r3, r1
 8001bdc:	005b      	lsls	r3, r3, #1
 8001bde:	440b      	add	r3, r1
 8001be0:	fbb0 f3f3 	udiv	r3, r0, r3
 8001be4:	3301      	adds	r3, #1
 8001be6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001bee:	e00f      	b.n	8001c10 <HAL_I2C_Init+0x1dc>
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	1e58      	subs	r0, r3, #1
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6859      	ldr	r1, [r3, #4]
 8001bf8:	460b      	mov	r3, r1
 8001bfa:	009b      	lsls	r3, r3, #2
 8001bfc:	440b      	add	r3, r1
 8001bfe:	0099      	lsls	r1, r3, #2
 8001c00:	440b      	add	r3, r1
 8001c02:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c06:	3301      	adds	r3, #1
 8001c08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c0c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001c10:	6879      	ldr	r1, [r7, #4]
 8001c12:	6809      	ldr	r1, [r1, #0]
 8001c14:	4313      	orrs	r3, r2
 8001c16:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	69da      	ldr	r2, [r3, #28]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6a1b      	ldr	r3, [r3, #32]
 8001c2a:	431a      	orrs	r2, r3
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	430a      	orrs	r2, r1
 8001c32:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	689b      	ldr	r3, [r3, #8]
 8001c3a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001c3e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001c42:	687a      	ldr	r2, [r7, #4]
 8001c44:	6911      	ldr	r1, [r2, #16]
 8001c46:	687a      	ldr	r2, [r7, #4]
 8001c48:	68d2      	ldr	r2, [r2, #12]
 8001c4a:	4311      	orrs	r1, r2
 8001c4c:	687a      	ldr	r2, [r7, #4]
 8001c4e:	6812      	ldr	r2, [r2, #0]
 8001c50:	430b      	orrs	r3, r1
 8001c52:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	68db      	ldr	r3, [r3, #12]
 8001c5a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	695a      	ldr	r2, [r3, #20]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	699b      	ldr	r3, [r3, #24]
 8001c66:	431a      	orrs	r2, r3
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	430a      	orrs	r2, r1
 8001c6e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	681a      	ldr	r2, [r3, #0]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f042 0201 	orr.w	r2, r2, #1
 8001c7e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2200      	movs	r2, #0
 8001c84:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2220      	movs	r2, #32
 8001c8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2200      	movs	r2, #0
 8001c92:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2200      	movs	r2, #0
 8001c98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001c9c:	2300      	movs	r3, #0
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3710      	adds	r7, #16
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	000186a0 	.word	0x000186a0
 8001cac:	001e847f 	.word	0x001e847f
 8001cb0:	003d08ff 	.word	0x003d08ff
 8001cb4:	431bde83 	.word	0x431bde83
 8001cb8:	10624dd3 	.word	0x10624dd3

08001cbc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b088      	sub	sp, #32
 8001cc0:	af02      	add	r7, sp, #8
 8001cc2:	60f8      	str	r0, [r7, #12]
 8001cc4:	607a      	str	r2, [r7, #4]
 8001cc6:	461a      	mov	r2, r3
 8001cc8:	460b      	mov	r3, r1
 8001cca:	817b      	strh	r3, [r7, #10]
 8001ccc:	4613      	mov	r3, r2
 8001cce:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001cd0:	f7ff fc1a 	bl	8001508 <HAL_GetTick>
 8001cd4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cdc:	b2db      	uxtb	r3, r3
 8001cde:	2b20      	cmp	r3, #32
 8001ce0:	f040 80e0 	bne.w	8001ea4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	9300      	str	r3, [sp, #0]
 8001ce8:	2319      	movs	r3, #25
 8001cea:	2201      	movs	r2, #1
 8001cec:	4970      	ldr	r1, [pc, #448]	; (8001eb0 <HAL_I2C_Master_Transmit+0x1f4>)
 8001cee:	68f8      	ldr	r0, [r7, #12]
 8001cf0:	f000 fe44 	bl	800297c <I2C_WaitOnFlagUntilTimeout>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d001      	beq.n	8001cfe <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001cfa:	2302      	movs	r3, #2
 8001cfc:	e0d3      	b.n	8001ea6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d04:	2b01      	cmp	r3, #1
 8001d06:	d101      	bne.n	8001d0c <HAL_I2C_Master_Transmit+0x50>
 8001d08:	2302      	movs	r3, #2
 8001d0a:	e0cc      	b.n	8001ea6 <HAL_I2C_Master_Transmit+0x1ea>
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	2201      	movs	r2, #1
 8001d10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f003 0301 	and.w	r3, r3, #1
 8001d1e:	2b01      	cmp	r3, #1
 8001d20:	d007      	beq.n	8001d32 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	681a      	ldr	r2, [r3, #0]
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f042 0201 	orr.w	r2, r2, #1
 8001d30:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	681a      	ldr	r2, [r3, #0]
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d40:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	2221      	movs	r2, #33	; 0x21
 8001d46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	2210      	movs	r2, #16
 8001d4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	2200      	movs	r2, #0
 8001d56:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	687a      	ldr	r2, [r7, #4]
 8001d5c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	893a      	ldrh	r2, [r7, #8]
 8001d62:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d68:	b29a      	uxth	r2, r3
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	4a50      	ldr	r2, [pc, #320]	; (8001eb4 <HAL_I2C_Master_Transmit+0x1f8>)
 8001d72:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001d74:	8979      	ldrh	r1, [r7, #10]
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	6a3a      	ldr	r2, [r7, #32]
 8001d7a:	68f8      	ldr	r0, [r7, #12]
 8001d7c:	f000 fbfe 	bl	800257c <I2C_MasterRequestWrite>
 8001d80:	4603      	mov	r3, r0
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d001      	beq.n	8001d8a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
 8001d88:	e08d      	b.n	8001ea6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	613b      	str	r3, [r7, #16]
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	695b      	ldr	r3, [r3, #20]
 8001d94:	613b      	str	r3, [r7, #16]
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	699b      	ldr	r3, [r3, #24]
 8001d9c:	613b      	str	r3, [r7, #16]
 8001d9e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001da0:	e066      	b.n	8001e70 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001da2:	697a      	ldr	r2, [r7, #20]
 8001da4:	6a39      	ldr	r1, [r7, #32]
 8001da6:	68f8      	ldr	r0, [r7, #12]
 8001da8:	f000 febe 	bl	8002b28 <I2C_WaitOnTXEFlagUntilTimeout>
 8001dac:	4603      	mov	r3, r0
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d00d      	beq.n	8001dce <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db6:	2b04      	cmp	r3, #4
 8001db8:	d107      	bne.n	8001dca <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	681a      	ldr	r2, [r3, #0]
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001dc8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e06b      	b.n	8001ea6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dd2:	781a      	ldrb	r2, [r3, #0]
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dde:	1c5a      	adds	r2, r3, #1
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001de8:	b29b      	uxth	r3, r3
 8001dea:	3b01      	subs	r3, #1
 8001dec:	b29a      	uxth	r2, r3
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001df6:	3b01      	subs	r3, #1
 8001df8:	b29a      	uxth	r2, r3
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	695b      	ldr	r3, [r3, #20]
 8001e04:	f003 0304 	and.w	r3, r3, #4
 8001e08:	2b04      	cmp	r3, #4
 8001e0a:	d11b      	bne.n	8001e44 <HAL_I2C_Master_Transmit+0x188>
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d017      	beq.n	8001e44 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e18:	781a      	ldrb	r2, [r3, #0]
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e24:	1c5a      	adds	r2, r3, #1
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e2e:	b29b      	uxth	r3, r3
 8001e30:	3b01      	subs	r3, #1
 8001e32:	b29a      	uxth	r2, r3
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e3c:	3b01      	subs	r3, #1
 8001e3e:	b29a      	uxth	r2, r3
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e44:	697a      	ldr	r2, [r7, #20]
 8001e46:	6a39      	ldr	r1, [r7, #32]
 8001e48:	68f8      	ldr	r0, [r7, #12]
 8001e4a:	f000 feae 	bl	8002baa <I2C_WaitOnBTFFlagUntilTimeout>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d00d      	beq.n	8001e70 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e58:	2b04      	cmp	r3, #4
 8001e5a:	d107      	bne.n	8001e6c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	681a      	ldr	r2, [r3, #0]
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e6a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	e01a      	b.n	8001ea6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d194      	bne.n	8001da2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	681a      	ldr	r2, [r3, #0]
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e86:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	2220      	movs	r2, #32
 8001e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	2200      	movs	r2, #0
 8001e94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	e000      	b.n	8001ea6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001ea4:	2302      	movs	r3, #2
  }
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	3718      	adds	r7, #24
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	00100002 	.word	0x00100002
 8001eb4:	ffff0000 	.word	0xffff0000

08001eb8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b088      	sub	sp, #32
 8001ebc:	af02      	add	r7, sp, #8
 8001ebe:	60f8      	str	r0, [r7, #12]
 8001ec0:	4608      	mov	r0, r1
 8001ec2:	4611      	mov	r1, r2
 8001ec4:	461a      	mov	r2, r3
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	817b      	strh	r3, [r7, #10]
 8001eca:	460b      	mov	r3, r1
 8001ecc:	813b      	strh	r3, [r7, #8]
 8001ece:	4613      	mov	r3, r2
 8001ed0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001ed2:	f7ff fb19 	bl	8001508 <HAL_GetTick>
 8001ed6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ede:	b2db      	uxtb	r3, r3
 8001ee0:	2b20      	cmp	r3, #32
 8001ee2:	f040 80d9 	bne.w	8002098 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	9300      	str	r3, [sp, #0]
 8001eea:	2319      	movs	r3, #25
 8001eec:	2201      	movs	r2, #1
 8001eee:	496d      	ldr	r1, [pc, #436]	; (80020a4 <HAL_I2C_Mem_Write+0x1ec>)
 8001ef0:	68f8      	ldr	r0, [r7, #12]
 8001ef2:	f000 fd43 	bl	800297c <I2C_WaitOnFlagUntilTimeout>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d001      	beq.n	8001f00 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001efc:	2302      	movs	r3, #2
 8001efe:	e0cc      	b.n	800209a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f06:	2b01      	cmp	r3, #1
 8001f08:	d101      	bne.n	8001f0e <HAL_I2C_Mem_Write+0x56>
 8001f0a:	2302      	movs	r3, #2
 8001f0c:	e0c5      	b.n	800209a <HAL_I2C_Mem_Write+0x1e2>
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	2201      	movs	r2, #1
 8001f12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f003 0301 	and.w	r3, r3, #1
 8001f20:	2b01      	cmp	r3, #1
 8001f22:	d007      	beq.n	8001f34 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	681a      	ldr	r2, [r3, #0]
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f042 0201 	orr.w	r2, r2, #1
 8001f32:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	681a      	ldr	r2, [r3, #0]
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f42:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	2221      	movs	r2, #33	; 0x21
 8001f48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	2240      	movs	r2, #64	; 0x40
 8001f50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	2200      	movs	r2, #0
 8001f58:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	6a3a      	ldr	r2, [r7, #32]
 8001f5e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001f64:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f6a:	b29a      	uxth	r2, r3
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	4a4d      	ldr	r2, [pc, #308]	; (80020a8 <HAL_I2C_Mem_Write+0x1f0>)
 8001f74:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001f76:	88f8      	ldrh	r0, [r7, #6]
 8001f78:	893a      	ldrh	r2, [r7, #8]
 8001f7a:	8979      	ldrh	r1, [r7, #10]
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	9301      	str	r3, [sp, #4]
 8001f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f82:	9300      	str	r3, [sp, #0]
 8001f84:	4603      	mov	r3, r0
 8001f86:	68f8      	ldr	r0, [r7, #12]
 8001f88:	f000 fb7a 	bl	8002680 <I2C_RequestMemoryWrite>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d052      	beq.n	8002038 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	e081      	b.n	800209a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f96:	697a      	ldr	r2, [r7, #20]
 8001f98:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001f9a:	68f8      	ldr	r0, [r7, #12]
 8001f9c:	f000 fdc4 	bl	8002b28 <I2C_WaitOnTXEFlagUntilTimeout>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d00d      	beq.n	8001fc2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001faa:	2b04      	cmp	r3, #4
 8001fac:	d107      	bne.n	8001fbe <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	681a      	ldr	r2, [r3, #0]
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fbc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e06b      	b.n	800209a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc6:	781a      	ldrb	r2, [r3, #0]
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fd2:	1c5a      	adds	r2, r3, #1
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fdc:	3b01      	subs	r3, #1
 8001fde:	b29a      	uxth	r2, r3
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fe8:	b29b      	uxth	r3, r3
 8001fea:	3b01      	subs	r3, #1
 8001fec:	b29a      	uxth	r2, r3
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	695b      	ldr	r3, [r3, #20]
 8001ff8:	f003 0304 	and.w	r3, r3, #4
 8001ffc:	2b04      	cmp	r3, #4
 8001ffe:	d11b      	bne.n	8002038 <HAL_I2C_Mem_Write+0x180>
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002004:	2b00      	cmp	r3, #0
 8002006:	d017      	beq.n	8002038 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800200c:	781a      	ldrb	r2, [r3, #0]
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002018:	1c5a      	adds	r2, r3, #1
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002022:	3b01      	subs	r3, #1
 8002024:	b29a      	uxth	r2, r3
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800202e:	b29b      	uxth	r3, r3
 8002030:	3b01      	subs	r3, #1
 8002032:	b29a      	uxth	r2, r3
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800203c:	2b00      	cmp	r3, #0
 800203e:	d1aa      	bne.n	8001f96 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002040:	697a      	ldr	r2, [r7, #20]
 8002042:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002044:	68f8      	ldr	r0, [r7, #12]
 8002046:	f000 fdb0 	bl	8002baa <I2C_WaitOnBTFFlagUntilTimeout>
 800204a:	4603      	mov	r3, r0
 800204c:	2b00      	cmp	r3, #0
 800204e:	d00d      	beq.n	800206c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002054:	2b04      	cmp	r3, #4
 8002056:	d107      	bne.n	8002068 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	681a      	ldr	r2, [r3, #0]
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002066:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002068:	2301      	movs	r3, #1
 800206a:	e016      	b.n	800209a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	681a      	ldr	r2, [r3, #0]
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800207a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	2220      	movs	r2, #32
 8002080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	2200      	movs	r2, #0
 8002088:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	2200      	movs	r2, #0
 8002090:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002094:	2300      	movs	r3, #0
 8002096:	e000      	b.n	800209a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002098:	2302      	movs	r3, #2
  }
}
 800209a:	4618      	mov	r0, r3
 800209c:	3718      	adds	r7, #24
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	00100002 	.word	0x00100002
 80020a8:	ffff0000 	.word	0xffff0000

080020ac <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b08c      	sub	sp, #48	; 0x30
 80020b0:	af02      	add	r7, sp, #8
 80020b2:	60f8      	str	r0, [r7, #12]
 80020b4:	4608      	mov	r0, r1
 80020b6:	4611      	mov	r1, r2
 80020b8:	461a      	mov	r2, r3
 80020ba:	4603      	mov	r3, r0
 80020bc:	817b      	strh	r3, [r7, #10]
 80020be:	460b      	mov	r3, r1
 80020c0:	813b      	strh	r3, [r7, #8]
 80020c2:	4613      	mov	r3, r2
 80020c4:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80020c6:	2300      	movs	r3, #0
 80020c8:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80020ca:	f7ff fa1d 	bl	8001508 <HAL_GetTick>
 80020ce:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020d6:	b2db      	uxtb	r3, r3
 80020d8:	2b20      	cmp	r3, #32
 80020da:	f040 8244 	bne.w	8002566 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80020de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e0:	9300      	str	r3, [sp, #0]
 80020e2:	2319      	movs	r3, #25
 80020e4:	2201      	movs	r2, #1
 80020e6:	4982      	ldr	r1, [pc, #520]	; (80022f0 <HAL_I2C_Mem_Read+0x244>)
 80020e8:	68f8      	ldr	r0, [r7, #12]
 80020ea:	f000 fc47 	bl	800297c <I2C_WaitOnFlagUntilTimeout>
 80020ee:	4603      	mov	r3, r0
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d001      	beq.n	80020f8 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80020f4:	2302      	movs	r3, #2
 80020f6:	e237      	b.n	8002568 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020fe:	2b01      	cmp	r3, #1
 8002100:	d101      	bne.n	8002106 <HAL_I2C_Mem_Read+0x5a>
 8002102:	2302      	movs	r3, #2
 8002104:	e230      	b.n	8002568 <HAL_I2C_Mem_Read+0x4bc>
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	2201      	movs	r2, #1
 800210a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f003 0301 	and.w	r3, r3, #1
 8002118:	2b01      	cmp	r3, #1
 800211a:	d007      	beq.n	800212c <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	681a      	ldr	r2, [r3, #0]
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f042 0201 	orr.w	r2, r2, #1
 800212a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	681a      	ldr	r2, [r3, #0]
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800213a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	2222      	movs	r2, #34	; 0x22
 8002140:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	2240      	movs	r2, #64	; 0x40
 8002148:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	2200      	movs	r2, #0
 8002150:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002156:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800215c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002162:	b29a      	uxth	r2, r3
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	4a62      	ldr	r2, [pc, #392]	; (80022f4 <HAL_I2C_Mem_Read+0x248>)
 800216c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800216e:	88f8      	ldrh	r0, [r7, #6]
 8002170:	893a      	ldrh	r2, [r7, #8]
 8002172:	8979      	ldrh	r1, [r7, #10]
 8002174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002176:	9301      	str	r3, [sp, #4]
 8002178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800217a:	9300      	str	r3, [sp, #0]
 800217c:	4603      	mov	r3, r0
 800217e:	68f8      	ldr	r0, [r7, #12]
 8002180:	f000 fb14 	bl	80027ac <I2C_RequestMemoryRead>
 8002184:	4603      	mov	r3, r0
 8002186:	2b00      	cmp	r3, #0
 8002188:	d001      	beq.n	800218e <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	e1ec      	b.n	8002568 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002192:	2b00      	cmp	r3, #0
 8002194:	d113      	bne.n	80021be <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002196:	2300      	movs	r3, #0
 8002198:	61fb      	str	r3, [r7, #28]
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	695b      	ldr	r3, [r3, #20]
 80021a0:	61fb      	str	r3, [r7, #28]
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	699b      	ldr	r3, [r3, #24]
 80021a8:	61fb      	str	r3, [r7, #28]
 80021aa:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	681a      	ldr	r2, [r3, #0]
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021ba:	601a      	str	r2, [r3, #0]
 80021bc:	e1c0      	b.n	8002540 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021c2:	2b01      	cmp	r3, #1
 80021c4:	d11e      	bne.n	8002204 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	681a      	ldr	r2, [r3, #0]
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021d4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80021d6:	b672      	cpsid	i
}
 80021d8:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021da:	2300      	movs	r3, #0
 80021dc:	61bb      	str	r3, [r7, #24]
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	695b      	ldr	r3, [r3, #20]
 80021e4:	61bb      	str	r3, [r7, #24]
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	699b      	ldr	r3, [r3, #24]
 80021ec:	61bb      	str	r3, [r7, #24]
 80021ee:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	681a      	ldr	r2, [r3, #0]
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021fe:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002200:	b662      	cpsie	i
}
 8002202:	e035      	b.n	8002270 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002208:	2b02      	cmp	r3, #2
 800220a:	d11e      	bne.n	800224a <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800221a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800221c:	b672      	cpsid	i
}
 800221e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002220:	2300      	movs	r3, #0
 8002222:	617b      	str	r3, [r7, #20]
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	695b      	ldr	r3, [r3, #20]
 800222a:	617b      	str	r3, [r7, #20]
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	699b      	ldr	r3, [r3, #24]
 8002232:	617b      	str	r3, [r7, #20]
 8002234:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	681a      	ldr	r2, [r3, #0]
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002244:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002246:	b662      	cpsie	i
}
 8002248:	e012      	b.n	8002270 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	681a      	ldr	r2, [r3, #0]
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002258:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800225a:	2300      	movs	r3, #0
 800225c:	613b      	str	r3, [r7, #16]
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	695b      	ldr	r3, [r3, #20]
 8002264:	613b      	str	r3, [r7, #16]
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	699b      	ldr	r3, [r3, #24]
 800226c:	613b      	str	r3, [r7, #16]
 800226e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002270:	e166      	b.n	8002540 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002276:	2b03      	cmp	r3, #3
 8002278:	f200 811f 	bhi.w	80024ba <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002280:	2b01      	cmp	r3, #1
 8002282:	d123      	bne.n	80022cc <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002284:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002286:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002288:	68f8      	ldr	r0, [r7, #12]
 800228a:	f000 fccf 	bl	8002c2c <I2C_WaitOnRXNEFlagUntilTimeout>
 800228e:	4603      	mov	r3, r0
 8002290:	2b00      	cmp	r3, #0
 8002292:	d001      	beq.n	8002298 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8002294:	2301      	movs	r3, #1
 8002296:	e167      	b.n	8002568 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	691a      	ldr	r2, [r3, #16]
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a2:	b2d2      	uxtb	r2, r2
 80022a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022aa:	1c5a      	adds	r2, r3, #1
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022b4:	3b01      	subs	r3, #1
 80022b6:	b29a      	uxth	r2, r3
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022c0:	b29b      	uxth	r3, r3
 80022c2:	3b01      	subs	r3, #1
 80022c4:	b29a      	uxth	r2, r3
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80022ca:	e139      	b.n	8002540 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022d0:	2b02      	cmp	r3, #2
 80022d2:	d152      	bne.n	800237a <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80022d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d6:	9300      	str	r3, [sp, #0]
 80022d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022da:	2200      	movs	r2, #0
 80022dc:	4906      	ldr	r1, [pc, #24]	; (80022f8 <HAL_I2C_Mem_Read+0x24c>)
 80022de:	68f8      	ldr	r0, [r7, #12]
 80022e0:	f000 fb4c 	bl	800297c <I2C_WaitOnFlagUntilTimeout>
 80022e4:	4603      	mov	r3, r0
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d008      	beq.n	80022fc <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	e13c      	b.n	8002568 <HAL_I2C_Mem_Read+0x4bc>
 80022ee:	bf00      	nop
 80022f0:	00100002 	.word	0x00100002
 80022f4:	ffff0000 	.word	0xffff0000
 80022f8:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80022fc:	b672      	cpsid	i
}
 80022fe:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800230e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	691a      	ldr	r2, [r3, #16]
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800231a:	b2d2      	uxtb	r2, r2
 800231c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002322:	1c5a      	adds	r2, r3, #1
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800232c:	3b01      	subs	r3, #1
 800232e:	b29a      	uxth	r2, r3
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002338:	b29b      	uxth	r3, r3
 800233a:	3b01      	subs	r3, #1
 800233c:	b29a      	uxth	r2, r3
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002342:	b662      	cpsie	i
}
 8002344:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	691a      	ldr	r2, [r3, #16]
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002350:	b2d2      	uxtb	r2, r2
 8002352:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002358:	1c5a      	adds	r2, r3, #1
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002362:	3b01      	subs	r3, #1
 8002364:	b29a      	uxth	r2, r3
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800236e:	b29b      	uxth	r3, r3
 8002370:	3b01      	subs	r3, #1
 8002372:	b29a      	uxth	r2, r3
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002378:	e0e2      	b.n	8002540 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800237a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800237c:	9300      	str	r3, [sp, #0]
 800237e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002380:	2200      	movs	r2, #0
 8002382:	497b      	ldr	r1, [pc, #492]	; (8002570 <HAL_I2C_Mem_Read+0x4c4>)
 8002384:	68f8      	ldr	r0, [r7, #12]
 8002386:	f000 faf9 	bl	800297c <I2C_WaitOnFlagUntilTimeout>
 800238a:	4603      	mov	r3, r0
 800238c:	2b00      	cmp	r3, #0
 800238e:	d001      	beq.n	8002394 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8002390:	2301      	movs	r3, #1
 8002392:	e0e9      	b.n	8002568 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	681a      	ldr	r2, [r3, #0]
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023a2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80023a4:	b672      	cpsid	i
}
 80023a6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	691a      	ldr	r2, [r3, #16]
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023b2:	b2d2      	uxtb	r2, r2
 80023b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ba:	1c5a      	adds	r2, r3, #1
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023c4:	3b01      	subs	r3, #1
 80023c6:	b29a      	uxth	r2, r3
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023d0:	b29b      	uxth	r3, r3
 80023d2:	3b01      	subs	r3, #1
 80023d4:	b29a      	uxth	r2, r3
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80023da:	4b66      	ldr	r3, [pc, #408]	; (8002574 <HAL_I2C_Mem_Read+0x4c8>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	08db      	lsrs	r3, r3, #3
 80023e0:	4a65      	ldr	r2, [pc, #404]	; (8002578 <HAL_I2C_Mem_Read+0x4cc>)
 80023e2:	fba2 2303 	umull	r2, r3, r2, r3
 80023e6:	0a1a      	lsrs	r2, r3, #8
 80023e8:	4613      	mov	r3, r2
 80023ea:	009b      	lsls	r3, r3, #2
 80023ec:	4413      	add	r3, r2
 80023ee:	00da      	lsls	r2, r3, #3
 80023f0:	1ad3      	subs	r3, r2, r3
 80023f2:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80023f4:	6a3b      	ldr	r3, [r7, #32]
 80023f6:	3b01      	subs	r3, #1
 80023f8:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80023fa:	6a3b      	ldr	r3, [r7, #32]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d118      	bne.n	8002432 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	2200      	movs	r2, #0
 8002404:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	2220      	movs	r2, #32
 800240a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	2200      	movs	r2, #0
 8002412:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800241a:	f043 0220 	orr.w	r2, r3, #32
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002422:	b662      	cpsie	i
}
 8002424:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	2200      	movs	r2, #0
 800242a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e09a      	b.n	8002568 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	695b      	ldr	r3, [r3, #20]
 8002438:	f003 0304 	and.w	r3, r3, #4
 800243c:	2b04      	cmp	r3, #4
 800243e:	d1d9      	bne.n	80023f4 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	681a      	ldr	r2, [r3, #0]
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800244e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	691a      	ldr	r2, [r3, #16]
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800245a:	b2d2      	uxtb	r2, r2
 800245c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002462:	1c5a      	adds	r2, r3, #1
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800246c:	3b01      	subs	r3, #1
 800246e:	b29a      	uxth	r2, r3
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002478:	b29b      	uxth	r3, r3
 800247a:	3b01      	subs	r3, #1
 800247c:	b29a      	uxth	r2, r3
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002482:	b662      	cpsie	i
}
 8002484:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	691a      	ldr	r2, [r3, #16]
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002490:	b2d2      	uxtb	r2, r2
 8002492:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002498:	1c5a      	adds	r2, r3, #1
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024a2:	3b01      	subs	r3, #1
 80024a4:	b29a      	uxth	r2, r3
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024ae:	b29b      	uxth	r3, r3
 80024b0:	3b01      	subs	r3, #1
 80024b2:	b29a      	uxth	r2, r3
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80024b8:	e042      	b.n	8002540 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024bc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80024be:	68f8      	ldr	r0, [r7, #12]
 80024c0:	f000 fbb4 	bl	8002c2c <I2C_WaitOnRXNEFlagUntilTimeout>
 80024c4:	4603      	mov	r3, r0
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d001      	beq.n	80024ce <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 80024ca:	2301      	movs	r3, #1
 80024cc:	e04c      	b.n	8002568 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	691a      	ldr	r2, [r3, #16]
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024d8:	b2d2      	uxtb	r2, r2
 80024da:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e0:	1c5a      	adds	r2, r3, #1
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024ea:	3b01      	subs	r3, #1
 80024ec:	b29a      	uxth	r2, r3
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024f6:	b29b      	uxth	r3, r3
 80024f8:	3b01      	subs	r3, #1
 80024fa:	b29a      	uxth	r2, r3
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	695b      	ldr	r3, [r3, #20]
 8002506:	f003 0304 	and.w	r3, r3, #4
 800250a:	2b04      	cmp	r3, #4
 800250c:	d118      	bne.n	8002540 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	691a      	ldr	r2, [r3, #16]
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002518:	b2d2      	uxtb	r2, r2
 800251a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002520:	1c5a      	adds	r2, r3, #1
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800252a:	3b01      	subs	r3, #1
 800252c:	b29a      	uxth	r2, r3
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002536:	b29b      	uxth	r3, r3
 8002538:	3b01      	subs	r3, #1
 800253a:	b29a      	uxth	r2, r3
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002544:	2b00      	cmp	r3, #0
 8002546:	f47f ae94 	bne.w	8002272 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	2220      	movs	r2, #32
 800254e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	2200      	movs	r2, #0
 8002556:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	2200      	movs	r2, #0
 800255e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002562:	2300      	movs	r3, #0
 8002564:	e000      	b.n	8002568 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8002566:	2302      	movs	r3, #2
  }
}
 8002568:	4618      	mov	r0, r3
 800256a:	3728      	adds	r7, #40	; 0x28
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}
 8002570:	00010004 	.word	0x00010004
 8002574:	20000000 	.word	0x20000000
 8002578:	14f8b589 	.word	0x14f8b589

0800257c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b088      	sub	sp, #32
 8002580:	af02      	add	r7, sp, #8
 8002582:	60f8      	str	r0, [r7, #12]
 8002584:	607a      	str	r2, [r7, #4]
 8002586:	603b      	str	r3, [r7, #0]
 8002588:	460b      	mov	r3, r1
 800258a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002590:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	2b08      	cmp	r3, #8
 8002596:	d006      	beq.n	80025a6 <I2C_MasterRequestWrite+0x2a>
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	2b01      	cmp	r3, #1
 800259c:	d003      	beq.n	80025a6 <I2C_MasterRequestWrite+0x2a>
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80025a4:	d108      	bne.n	80025b8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	681a      	ldr	r2, [r3, #0]
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80025b4:	601a      	str	r2, [r3, #0]
 80025b6:	e00b      	b.n	80025d0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025bc:	2b12      	cmp	r3, #18
 80025be:	d107      	bne.n	80025d0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	681a      	ldr	r2, [r3, #0]
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80025ce:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	9300      	str	r3, [sp, #0]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2200      	movs	r2, #0
 80025d8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80025dc:	68f8      	ldr	r0, [r7, #12]
 80025de:	f000 f9cd 	bl	800297c <I2C_WaitOnFlagUntilTimeout>
 80025e2:	4603      	mov	r3, r0
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d00d      	beq.n	8002604 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025f6:	d103      	bne.n	8002600 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025fe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002600:	2303      	movs	r3, #3
 8002602:	e035      	b.n	8002670 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	691b      	ldr	r3, [r3, #16]
 8002608:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800260c:	d108      	bne.n	8002620 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800260e:	897b      	ldrh	r3, [r7, #10]
 8002610:	b2db      	uxtb	r3, r3
 8002612:	461a      	mov	r2, r3
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800261c:	611a      	str	r2, [r3, #16]
 800261e:	e01b      	b.n	8002658 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002620:	897b      	ldrh	r3, [r7, #10]
 8002622:	11db      	asrs	r3, r3, #7
 8002624:	b2db      	uxtb	r3, r3
 8002626:	f003 0306 	and.w	r3, r3, #6
 800262a:	b2db      	uxtb	r3, r3
 800262c:	f063 030f 	orn	r3, r3, #15
 8002630:	b2da      	uxtb	r2, r3
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	687a      	ldr	r2, [r7, #4]
 800263c:	490e      	ldr	r1, [pc, #56]	; (8002678 <I2C_MasterRequestWrite+0xfc>)
 800263e:	68f8      	ldr	r0, [r7, #12]
 8002640:	f000 f9f3 	bl	8002a2a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002644:	4603      	mov	r3, r0
 8002646:	2b00      	cmp	r3, #0
 8002648:	d001      	beq.n	800264e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	e010      	b.n	8002670 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800264e:	897b      	ldrh	r3, [r7, #10]
 8002650:	b2da      	uxtb	r2, r3
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	687a      	ldr	r2, [r7, #4]
 800265c:	4907      	ldr	r1, [pc, #28]	; (800267c <I2C_MasterRequestWrite+0x100>)
 800265e:	68f8      	ldr	r0, [r7, #12]
 8002660:	f000 f9e3 	bl	8002a2a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002664:	4603      	mov	r3, r0
 8002666:	2b00      	cmp	r3, #0
 8002668:	d001      	beq.n	800266e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	e000      	b.n	8002670 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800266e:	2300      	movs	r3, #0
}
 8002670:	4618      	mov	r0, r3
 8002672:	3718      	adds	r7, #24
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}
 8002678:	00010008 	.word	0x00010008
 800267c:	00010002 	.word	0x00010002

08002680 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b088      	sub	sp, #32
 8002684:	af02      	add	r7, sp, #8
 8002686:	60f8      	str	r0, [r7, #12]
 8002688:	4608      	mov	r0, r1
 800268a:	4611      	mov	r1, r2
 800268c:	461a      	mov	r2, r3
 800268e:	4603      	mov	r3, r0
 8002690:	817b      	strh	r3, [r7, #10]
 8002692:	460b      	mov	r3, r1
 8002694:	813b      	strh	r3, [r7, #8]
 8002696:	4613      	mov	r3, r2
 8002698:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80026a8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80026aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ac:	9300      	str	r3, [sp, #0]
 80026ae:	6a3b      	ldr	r3, [r7, #32]
 80026b0:	2200      	movs	r2, #0
 80026b2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80026b6:	68f8      	ldr	r0, [r7, #12]
 80026b8:	f000 f960 	bl	800297c <I2C_WaitOnFlagUntilTimeout>
 80026bc:	4603      	mov	r3, r0
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d00d      	beq.n	80026de <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80026d0:	d103      	bne.n	80026da <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80026d8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80026da:	2303      	movs	r3, #3
 80026dc:	e05f      	b.n	800279e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80026de:	897b      	ldrh	r3, [r7, #10]
 80026e0:	b2db      	uxtb	r3, r3
 80026e2:	461a      	mov	r2, r3
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80026ec:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80026ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f0:	6a3a      	ldr	r2, [r7, #32]
 80026f2:	492d      	ldr	r1, [pc, #180]	; (80027a8 <I2C_RequestMemoryWrite+0x128>)
 80026f4:	68f8      	ldr	r0, [r7, #12]
 80026f6:	f000 f998 	bl	8002a2a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80026fa:	4603      	mov	r3, r0
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d001      	beq.n	8002704 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002700:	2301      	movs	r3, #1
 8002702:	e04c      	b.n	800279e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002704:	2300      	movs	r3, #0
 8002706:	617b      	str	r3, [r7, #20]
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	695b      	ldr	r3, [r3, #20]
 800270e:	617b      	str	r3, [r7, #20]
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	699b      	ldr	r3, [r3, #24]
 8002716:	617b      	str	r3, [r7, #20]
 8002718:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800271a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800271c:	6a39      	ldr	r1, [r7, #32]
 800271e:	68f8      	ldr	r0, [r7, #12]
 8002720:	f000 fa02 	bl	8002b28 <I2C_WaitOnTXEFlagUntilTimeout>
 8002724:	4603      	mov	r3, r0
 8002726:	2b00      	cmp	r3, #0
 8002728:	d00d      	beq.n	8002746 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800272e:	2b04      	cmp	r3, #4
 8002730:	d107      	bne.n	8002742 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	681a      	ldr	r2, [r3, #0]
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002740:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	e02b      	b.n	800279e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002746:	88fb      	ldrh	r3, [r7, #6]
 8002748:	2b01      	cmp	r3, #1
 800274a:	d105      	bne.n	8002758 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800274c:	893b      	ldrh	r3, [r7, #8]
 800274e:	b2da      	uxtb	r2, r3
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	611a      	str	r2, [r3, #16]
 8002756:	e021      	b.n	800279c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002758:	893b      	ldrh	r3, [r7, #8]
 800275a:	0a1b      	lsrs	r3, r3, #8
 800275c:	b29b      	uxth	r3, r3
 800275e:	b2da      	uxtb	r2, r3
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002766:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002768:	6a39      	ldr	r1, [r7, #32]
 800276a:	68f8      	ldr	r0, [r7, #12]
 800276c:	f000 f9dc 	bl	8002b28 <I2C_WaitOnTXEFlagUntilTimeout>
 8002770:	4603      	mov	r3, r0
 8002772:	2b00      	cmp	r3, #0
 8002774:	d00d      	beq.n	8002792 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277a:	2b04      	cmp	r3, #4
 800277c:	d107      	bne.n	800278e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	681a      	ldr	r2, [r3, #0]
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800278c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800278e:	2301      	movs	r3, #1
 8002790:	e005      	b.n	800279e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002792:	893b      	ldrh	r3, [r7, #8]
 8002794:	b2da      	uxtb	r2, r3
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800279c:	2300      	movs	r3, #0
}
 800279e:	4618      	mov	r0, r3
 80027a0:	3718      	adds	r7, #24
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	bf00      	nop
 80027a8:	00010002 	.word	0x00010002

080027ac <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b088      	sub	sp, #32
 80027b0:	af02      	add	r7, sp, #8
 80027b2:	60f8      	str	r0, [r7, #12]
 80027b4:	4608      	mov	r0, r1
 80027b6:	4611      	mov	r1, r2
 80027b8:	461a      	mov	r2, r3
 80027ba:	4603      	mov	r3, r0
 80027bc:	817b      	strh	r3, [r7, #10]
 80027be:	460b      	mov	r3, r1
 80027c0:	813b      	strh	r3, [r7, #8]
 80027c2:	4613      	mov	r3, r2
 80027c4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	681a      	ldr	r2, [r3, #0]
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80027d4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	681a      	ldr	r2, [r3, #0]
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80027e4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80027e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e8:	9300      	str	r3, [sp, #0]
 80027ea:	6a3b      	ldr	r3, [r7, #32]
 80027ec:	2200      	movs	r2, #0
 80027ee:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80027f2:	68f8      	ldr	r0, [r7, #12]
 80027f4:	f000 f8c2 	bl	800297c <I2C_WaitOnFlagUntilTimeout>
 80027f8:	4603      	mov	r3, r0
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d00d      	beq.n	800281a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002808:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800280c:	d103      	bne.n	8002816 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002814:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002816:	2303      	movs	r3, #3
 8002818:	e0aa      	b.n	8002970 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800281a:	897b      	ldrh	r3, [r7, #10]
 800281c:	b2db      	uxtb	r3, r3
 800281e:	461a      	mov	r2, r3
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002828:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800282a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800282c:	6a3a      	ldr	r2, [r7, #32]
 800282e:	4952      	ldr	r1, [pc, #328]	; (8002978 <I2C_RequestMemoryRead+0x1cc>)
 8002830:	68f8      	ldr	r0, [r7, #12]
 8002832:	f000 f8fa 	bl	8002a2a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002836:	4603      	mov	r3, r0
 8002838:	2b00      	cmp	r3, #0
 800283a:	d001      	beq.n	8002840 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800283c:	2301      	movs	r3, #1
 800283e:	e097      	b.n	8002970 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002840:	2300      	movs	r3, #0
 8002842:	617b      	str	r3, [r7, #20]
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	695b      	ldr	r3, [r3, #20]
 800284a:	617b      	str	r3, [r7, #20]
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	699b      	ldr	r3, [r3, #24]
 8002852:	617b      	str	r3, [r7, #20]
 8002854:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002856:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002858:	6a39      	ldr	r1, [r7, #32]
 800285a:	68f8      	ldr	r0, [r7, #12]
 800285c:	f000 f964 	bl	8002b28 <I2C_WaitOnTXEFlagUntilTimeout>
 8002860:	4603      	mov	r3, r0
 8002862:	2b00      	cmp	r3, #0
 8002864:	d00d      	beq.n	8002882 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800286a:	2b04      	cmp	r3, #4
 800286c:	d107      	bne.n	800287e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	681a      	ldr	r2, [r3, #0]
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800287c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	e076      	b.n	8002970 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002882:	88fb      	ldrh	r3, [r7, #6]
 8002884:	2b01      	cmp	r3, #1
 8002886:	d105      	bne.n	8002894 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002888:	893b      	ldrh	r3, [r7, #8]
 800288a:	b2da      	uxtb	r2, r3
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	611a      	str	r2, [r3, #16]
 8002892:	e021      	b.n	80028d8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002894:	893b      	ldrh	r3, [r7, #8]
 8002896:	0a1b      	lsrs	r3, r3, #8
 8002898:	b29b      	uxth	r3, r3
 800289a:	b2da      	uxtb	r2, r3
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80028a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028a4:	6a39      	ldr	r1, [r7, #32]
 80028a6:	68f8      	ldr	r0, [r7, #12]
 80028a8:	f000 f93e 	bl	8002b28 <I2C_WaitOnTXEFlagUntilTimeout>
 80028ac:	4603      	mov	r3, r0
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d00d      	beq.n	80028ce <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b6:	2b04      	cmp	r3, #4
 80028b8:	d107      	bne.n	80028ca <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	681a      	ldr	r2, [r3, #0]
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028c8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	e050      	b.n	8002970 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80028ce:	893b      	ldrh	r3, [r7, #8]
 80028d0:	b2da      	uxtb	r2, r3
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80028d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028da:	6a39      	ldr	r1, [r7, #32]
 80028dc:	68f8      	ldr	r0, [r7, #12]
 80028de:	f000 f923 	bl	8002b28 <I2C_WaitOnTXEFlagUntilTimeout>
 80028e2:	4603      	mov	r3, r0
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d00d      	beq.n	8002904 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ec:	2b04      	cmp	r3, #4
 80028ee:	d107      	bne.n	8002900 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	681a      	ldr	r2, [r3, #0]
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028fe:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002900:	2301      	movs	r3, #1
 8002902:	e035      	b.n	8002970 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	681a      	ldr	r2, [r3, #0]
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002912:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002916:	9300      	str	r3, [sp, #0]
 8002918:	6a3b      	ldr	r3, [r7, #32]
 800291a:	2200      	movs	r2, #0
 800291c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002920:	68f8      	ldr	r0, [r7, #12]
 8002922:	f000 f82b 	bl	800297c <I2C_WaitOnFlagUntilTimeout>
 8002926:	4603      	mov	r3, r0
 8002928:	2b00      	cmp	r3, #0
 800292a:	d00d      	beq.n	8002948 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002936:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800293a:	d103      	bne.n	8002944 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002942:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002944:	2303      	movs	r3, #3
 8002946:	e013      	b.n	8002970 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002948:	897b      	ldrh	r3, [r7, #10]
 800294a:	b2db      	uxtb	r3, r3
 800294c:	f043 0301 	orr.w	r3, r3, #1
 8002950:	b2da      	uxtb	r2, r3
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800295a:	6a3a      	ldr	r2, [r7, #32]
 800295c:	4906      	ldr	r1, [pc, #24]	; (8002978 <I2C_RequestMemoryRead+0x1cc>)
 800295e:	68f8      	ldr	r0, [r7, #12]
 8002960:	f000 f863 	bl	8002a2a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002964:	4603      	mov	r3, r0
 8002966:	2b00      	cmp	r3, #0
 8002968:	d001      	beq.n	800296e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	e000      	b.n	8002970 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800296e:	2300      	movs	r3, #0
}
 8002970:	4618      	mov	r0, r3
 8002972:	3718      	adds	r7, #24
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}
 8002978:	00010002 	.word	0x00010002

0800297c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b084      	sub	sp, #16
 8002980:	af00      	add	r7, sp, #0
 8002982:	60f8      	str	r0, [r7, #12]
 8002984:	60b9      	str	r1, [r7, #8]
 8002986:	603b      	str	r3, [r7, #0]
 8002988:	4613      	mov	r3, r2
 800298a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800298c:	e025      	b.n	80029da <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002994:	d021      	beq.n	80029da <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002996:	f7fe fdb7 	bl	8001508 <HAL_GetTick>
 800299a:	4602      	mov	r2, r0
 800299c:	69bb      	ldr	r3, [r7, #24]
 800299e:	1ad3      	subs	r3, r2, r3
 80029a0:	683a      	ldr	r2, [r7, #0]
 80029a2:	429a      	cmp	r2, r3
 80029a4:	d302      	bcc.n	80029ac <I2C_WaitOnFlagUntilTimeout+0x30>
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d116      	bne.n	80029da <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	2200      	movs	r2, #0
 80029b0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	2220      	movs	r2, #32
 80029b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	2200      	movs	r2, #0
 80029be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c6:	f043 0220 	orr.w	r2, r3, #32
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	2200      	movs	r2, #0
 80029d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	e023      	b.n	8002a22 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	0c1b      	lsrs	r3, r3, #16
 80029de:	b2db      	uxtb	r3, r3
 80029e0:	2b01      	cmp	r3, #1
 80029e2:	d10d      	bne.n	8002a00 <I2C_WaitOnFlagUntilTimeout+0x84>
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	695b      	ldr	r3, [r3, #20]
 80029ea:	43da      	mvns	r2, r3
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	4013      	ands	r3, r2
 80029f0:	b29b      	uxth	r3, r3
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	bf0c      	ite	eq
 80029f6:	2301      	moveq	r3, #1
 80029f8:	2300      	movne	r3, #0
 80029fa:	b2db      	uxtb	r3, r3
 80029fc:	461a      	mov	r2, r3
 80029fe:	e00c      	b.n	8002a1a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	699b      	ldr	r3, [r3, #24]
 8002a06:	43da      	mvns	r2, r3
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	4013      	ands	r3, r2
 8002a0c:	b29b      	uxth	r3, r3
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	bf0c      	ite	eq
 8002a12:	2301      	moveq	r3, #1
 8002a14:	2300      	movne	r3, #0
 8002a16:	b2db      	uxtb	r3, r3
 8002a18:	461a      	mov	r2, r3
 8002a1a:	79fb      	ldrb	r3, [r7, #7]
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	d0b6      	beq.n	800298e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002a20:	2300      	movs	r3, #0
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	3710      	adds	r7, #16
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}

08002a2a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002a2a:	b580      	push	{r7, lr}
 8002a2c:	b084      	sub	sp, #16
 8002a2e:	af00      	add	r7, sp, #0
 8002a30:	60f8      	str	r0, [r7, #12]
 8002a32:	60b9      	str	r1, [r7, #8]
 8002a34:	607a      	str	r2, [r7, #4]
 8002a36:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002a38:	e051      	b.n	8002ade <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	695b      	ldr	r3, [r3, #20]
 8002a40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a48:	d123      	bne.n	8002a92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	681a      	ldr	r2, [r3, #0]
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a58:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002a62:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	2200      	movs	r2, #0
 8002a68:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	2220      	movs	r2, #32
 8002a6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	2200      	movs	r2, #0
 8002a76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a7e:	f043 0204 	orr.w	r2, r3, #4
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e046      	b.n	8002b20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a98:	d021      	beq.n	8002ade <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a9a:	f7fe fd35 	bl	8001508 <HAL_GetTick>
 8002a9e:	4602      	mov	r2, r0
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	1ad3      	subs	r3, r2, r3
 8002aa4:	687a      	ldr	r2, [r7, #4]
 8002aa6:	429a      	cmp	r2, r3
 8002aa8:	d302      	bcc.n	8002ab0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d116      	bne.n	8002ade <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	2220      	movs	r2, #32
 8002aba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aca:	f043 0220 	orr.w	r2, r3, #32
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	e020      	b.n	8002b20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	0c1b      	lsrs	r3, r3, #16
 8002ae2:	b2db      	uxtb	r3, r3
 8002ae4:	2b01      	cmp	r3, #1
 8002ae6:	d10c      	bne.n	8002b02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	695b      	ldr	r3, [r3, #20]
 8002aee:	43da      	mvns	r2, r3
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	4013      	ands	r3, r2
 8002af4:	b29b      	uxth	r3, r3
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	bf14      	ite	ne
 8002afa:	2301      	movne	r3, #1
 8002afc:	2300      	moveq	r3, #0
 8002afe:	b2db      	uxtb	r3, r3
 8002b00:	e00b      	b.n	8002b1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	699b      	ldr	r3, [r3, #24]
 8002b08:	43da      	mvns	r2, r3
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	b29b      	uxth	r3, r3
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	bf14      	ite	ne
 8002b14:	2301      	movne	r3, #1
 8002b16:	2300      	moveq	r3, #0
 8002b18:	b2db      	uxtb	r3, r3
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d18d      	bne.n	8002a3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002b1e:	2300      	movs	r3, #0
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	3710      	adds	r7, #16
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}

08002b28 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b084      	sub	sp, #16
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	60f8      	str	r0, [r7, #12]
 8002b30:	60b9      	str	r1, [r7, #8]
 8002b32:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002b34:	e02d      	b.n	8002b92 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002b36:	68f8      	ldr	r0, [r7, #12]
 8002b38:	f000 f8ce 	bl	8002cd8 <I2C_IsAcknowledgeFailed>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d001      	beq.n	8002b46 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002b42:	2301      	movs	r3, #1
 8002b44:	e02d      	b.n	8002ba2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b4c:	d021      	beq.n	8002b92 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b4e:	f7fe fcdb 	bl	8001508 <HAL_GetTick>
 8002b52:	4602      	mov	r2, r0
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	1ad3      	subs	r3, r2, r3
 8002b58:	68ba      	ldr	r2, [r7, #8]
 8002b5a:	429a      	cmp	r2, r3
 8002b5c:	d302      	bcc.n	8002b64 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d116      	bne.n	8002b92 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	2200      	movs	r2, #0
 8002b68:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	2220      	movs	r2, #32
 8002b6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	2200      	movs	r2, #0
 8002b76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7e:	f043 0220 	orr.w	r2, r3, #32
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e007      	b.n	8002ba2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	695b      	ldr	r3, [r3, #20]
 8002b98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b9c:	2b80      	cmp	r3, #128	; 0x80
 8002b9e:	d1ca      	bne.n	8002b36 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002ba0:	2300      	movs	r3, #0
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	3710      	adds	r7, #16
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}

08002baa <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002baa:	b580      	push	{r7, lr}
 8002bac:	b084      	sub	sp, #16
 8002bae:	af00      	add	r7, sp, #0
 8002bb0:	60f8      	str	r0, [r7, #12]
 8002bb2:	60b9      	str	r1, [r7, #8]
 8002bb4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002bb6:	e02d      	b.n	8002c14 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002bb8:	68f8      	ldr	r0, [r7, #12]
 8002bba:	f000 f88d 	bl	8002cd8 <I2C_IsAcknowledgeFailed>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d001      	beq.n	8002bc8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	e02d      	b.n	8002c24 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bce:	d021      	beq.n	8002c14 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bd0:	f7fe fc9a 	bl	8001508 <HAL_GetTick>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	1ad3      	subs	r3, r2, r3
 8002bda:	68ba      	ldr	r2, [r7, #8]
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d302      	bcc.n	8002be6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d116      	bne.n	8002c14 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	2200      	movs	r2, #0
 8002bea:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	2220      	movs	r2, #32
 8002bf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c00:	f043 0220 	orr.w	r2, r3, #32
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002c10:	2301      	movs	r3, #1
 8002c12:	e007      	b.n	8002c24 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	695b      	ldr	r3, [r3, #20]
 8002c1a:	f003 0304 	and.w	r3, r3, #4
 8002c1e:	2b04      	cmp	r3, #4
 8002c20:	d1ca      	bne.n	8002bb8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002c22:	2300      	movs	r3, #0
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	3710      	adds	r7, #16
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}

08002c2c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b084      	sub	sp, #16
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	60f8      	str	r0, [r7, #12]
 8002c34:	60b9      	str	r1, [r7, #8]
 8002c36:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002c38:	e042      	b.n	8002cc0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	695b      	ldr	r3, [r3, #20]
 8002c40:	f003 0310 	and.w	r3, r3, #16
 8002c44:	2b10      	cmp	r3, #16
 8002c46:	d119      	bne.n	8002c7c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f06f 0210 	mvn.w	r2, #16
 8002c50:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	2200      	movs	r2, #0
 8002c56:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	2220      	movs	r2, #32
 8002c5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	2200      	movs	r2, #0
 8002c64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	2200      	movs	r2, #0
 8002c74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	e029      	b.n	8002cd0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c7c:	f7fe fc44 	bl	8001508 <HAL_GetTick>
 8002c80:	4602      	mov	r2, r0
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	1ad3      	subs	r3, r2, r3
 8002c86:	68ba      	ldr	r2, [r7, #8]
 8002c88:	429a      	cmp	r2, r3
 8002c8a:	d302      	bcc.n	8002c92 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d116      	bne.n	8002cc0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	2200      	movs	r2, #0
 8002c96:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	2220      	movs	r2, #32
 8002c9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cac:	f043 0220 	orr.w	r2, r3, #32
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	e007      	b.n	8002cd0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	695b      	ldr	r3, [r3, #20]
 8002cc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cca:	2b40      	cmp	r3, #64	; 0x40
 8002ccc:	d1b5      	bne.n	8002c3a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002cce:	2300      	movs	r3, #0
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	3710      	adds	r7, #16
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}

08002cd8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b083      	sub	sp, #12
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	695b      	ldr	r3, [r3, #20]
 8002ce6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cee:	d11b      	bne.n	8002d28 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002cf8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2220      	movs	r2, #32
 8002d04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d14:	f043 0204 	orr.w	r2, r3, #4
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002d24:	2301      	movs	r3, #1
 8002d26:	e000      	b.n	8002d2a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002d28:	2300      	movs	r3, #0
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	370c      	adds	r7, #12
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bc80      	pop	{r7}
 8002d32:	4770      	bx	lr

08002d34 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b086      	sub	sp, #24
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d101      	bne.n	8002d46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d42:	2301      	movs	r3, #1
 8002d44:	e272      	b.n	800322c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f003 0301 	and.w	r3, r3, #1
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	f000 8087 	beq.w	8002e62 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002d54:	4b92      	ldr	r3, [pc, #584]	; (8002fa0 <HAL_RCC_OscConfig+0x26c>)
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	f003 030c 	and.w	r3, r3, #12
 8002d5c:	2b04      	cmp	r3, #4
 8002d5e:	d00c      	beq.n	8002d7a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002d60:	4b8f      	ldr	r3, [pc, #572]	; (8002fa0 <HAL_RCC_OscConfig+0x26c>)
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	f003 030c 	and.w	r3, r3, #12
 8002d68:	2b08      	cmp	r3, #8
 8002d6a:	d112      	bne.n	8002d92 <HAL_RCC_OscConfig+0x5e>
 8002d6c:	4b8c      	ldr	r3, [pc, #560]	; (8002fa0 <HAL_RCC_OscConfig+0x26c>)
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d78:	d10b      	bne.n	8002d92 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d7a:	4b89      	ldr	r3, [pc, #548]	; (8002fa0 <HAL_RCC_OscConfig+0x26c>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d06c      	beq.n	8002e60 <HAL_RCC_OscConfig+0x12c>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d168      	bne.n	8002e60 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e24c      	b.n	800322c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d9a:	d106      	bne.n	8002daa <HAL_RCC_OscConfig+0x76>
 8002d9c:	4b80      	ldr	r3, [pc, #512]	; (8002fa0 <HAL_RCC_OscConfig+0x26c>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a7f      	ldr	r2, [pc, #508]	; (8002fa0 <HAL_RCC_OscConfig+0x26c>)
 8002da2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002da6:	6013      	str	r3, [r2, #0]
 8002da8:	e02e      	b.n	8002e08 <HAL_RCC_OscConfig+0xd4>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d10c      	bne.n	8002dcc <HAL_RCC_OscConfig+0x98>
 8002db2:	4b7b      	ldr	r3, [pc, #492]	; (8002fa0 <HAL_RCC_OscConfig+0x26c>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a7a      	ldr	r2, [pc, #488]	; (8002fa0 <HAL_RCC_OscConfig+0x26c>)
 8002db8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002dbc:	6013      	str	r3, [r2, #0]
 8002dbe:	4b78      	ldr	r3, [pc, #480]	; (8002fa0 <HAL_RCC_OscConfig+0x26c>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a77      	ldr	r2, [pc, #476]	; (8002fa0 <HAL_RCC_OscConfig+0x26c>)
 8002dc4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002dc8:	6013      	str	r3, [r2, #0]
 8002dca:	e01d      	b.n	8002e08 <HAL_RCC_OscConfig+0xd4>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002dd4:	d10c      	bne.n	8002df0 <HAL_RCC_OscConfig+0xbc>
 8002dd6:	4b72      	ldr	r3, [pc, #456]	; (8002fa0 <HAL_RCC_OscConfig+0x26c>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a71      	ldr	r2, [pc, #452]	; (8002fa0 <HAL_RCC_OscConfig+0x26c>)
 8002ddc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002de0:	6013      	str	r3, [r2, #0]
 8002de2:	4b6f      	ldr	r3, [pc, #444]	; (8002fa0 <HAL_RCC_OscConfig+0x26c>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a6e      	ldr	r2, [pc, #440]	; (8002fa0 <HAL_RCC_OscConfig+0x26c>)
 8002de8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dec:	6013      	str	r3, [r2, #0]
 8002dee:	e00b      	b.n	8002e08 <HAL_RCC_OscConfig+0xd4>
 8002df0:	4b6b      	ldr	r3, [pc, #428]	; (8002fa0 <HAL_RCC_OscConfig+0x26c>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a6a      	ldr	r2, [pc, #424]	; (8002fa0 <HAL_RCC_OscConfig+0x26c>)
 8002df6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002dfa:	6013      	str	r3, [r2, #0]
 8002dfc:	4b68      	ldr	r3, [pc, #416]	; (8002fa0 <HAL_RCC_OscConfig+0x26c>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a67      	ldr	r2, [pc, #412]	; (8002fa0 <HAL_RCC_OscConfig+0x26c>)
 8002e02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e06:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d013      	beq.n	8002e38 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e10:	f7fe fb7a 	bl	8001508 <HAL_GetTick>
 8002e14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e16:	e008      	b.n	8002e2a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e18:	f7fe fb76 	bl	8001508 <HAL_GetTick>
 8002e1c:	4602      	mov	r2, r0
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	1ad3      	subs	r3, r2, r3
 8002e22:	2b64      	cmp	r3, #100	; 0x64
 8002e24:	d901      	bls.n	8002e2a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002e26:	2303      	movs	r3, #3
 8002e28:	e200      	b.n	800322c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e2a:	4b5d      	ldr	r3, [pc, #372]	; (8002fa0 <HAL_RCC_OscConfig+0x26c>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d0f0      	beq.n	8002e18 <HAL_RCC_OscConfig+0xe4>
 8002e36:	e014      	b.n	8002e62 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e38:	f7fe fb66 	bl	8001508 <HAL_GetTick>
 8002e3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e3e:	e008      	b.n	8002e52 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e40:	f7fe fb62 	bl	8001508 <HAL_GetTick>
 8002e44:	4602      	mov	r2, r0
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	1ad3      	subs	r3, r2, r3
 8002e4a:	2b64      	cmp	r3, #100	; 0x64
 8002e4c:	d901      	bls.n	8002e52 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002e4e:	2303      	movs	r3, #3
 8002e50:	e1ec      	b.n	800322c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e52:	4b53      	ldr	r3, [pc, #332]	; (8002fa0 <HAL_RCC_OscConfig+0x26c>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d1f0      	bne.n	8002e40 <HAL_RCC_OscConfig+0x10c>
 8002e5e:	e000      	b.n	8002e62 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f003 0302 	and.w	r3, r3, #2
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d063      	beq.n	8002f36 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002e6e:	4b4c      	ldr	r3, [pc, #304]	; (8002fa0 <HAL_RCC_OscConfig+0x26c>)
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	f003 030c 	and.w	r3, r3, #12
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d00b      	beq.n	8002e92 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002e7a:	4b49      	ldr	r3, [pc, #292]	; (8002fa0 <HAL_RCC_OscConfig+0x26c>)
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	f003 030c 	and.w	r3, r3, #12
 8002e82:	2b08      	cmp	r3, #8
 8002e84:	d11c      	bne.n	8002ec0 <HAL_RCC_OscConfig+0x18c>
 8002e86:	4b46      	ldr	r3, [pc, #280]	; (8002fa0 <HAL_RCC_OscConfig+0x26c>)
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d116      	bne.n	8002ec0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e92:	4b43      	ldr	r3, [pc, #268]	; (8002fa0 <HAL_RCC_OscConfig+0x26c>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f003 0302 	and.w	r3, r3, #2
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d005      	beq.n	8002eaa <HAL_RCC_OscConfig+0x176>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	691b      	ldr	r3, [r3, #16]
 8002ea2:	2b01      	cmp	r3, #1
 8002ea4:	d001      	beq.n	8002eaa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	e1c0      	b.n	800322c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002eaa:	4b3d      	ldr	r3, [pc, #244]	; (8002fa0 <HAL_RCC_OscConfig+0x26c>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	695b      	ldr	r3, [r3, #20]
 8002eb6:	00db      	lsls	r3, r3, #3
 8002eb8:	4939      	ldr	r1, [pc, #228]	; (8002fa0 <HAL_RCC_OscConfig+0x26c>)
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ebe:	e03a      	b.n	8002f36 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	691b      	ldr	r3, [r3, #16]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d020      	beq.n	8002f0a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ec8:	4b36      	ldr	r3, [pc, #216]	; (8002fa4 <HAL_RCC_OscConfig+0x270>)
 8002eca:	2201      	movs	r2, #1
 8002ecc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ece:	f7fe fb1b 	bl	8001508 <HAL_GetTick>
 8002ed2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ed4:	e008      	b.n	8002ee8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ed6:	f7fe fb17 	bl	8001508 <HAL_GetTick>
 8002eda:	4602      	mov	r2, r0
 8002edc:	693b      	ldr	r3, [r7, #16]
 8002ede:	1ad3      	subs	r3, r2, r3
 8002ee0:	2b02      	cmp	r3, #2
 8002ee2:	d901      	bls.n	8002ee8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002ee4:	2303      	movs	r3, #3
 8002ee6:	e1a1      	b.n	800322c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ee8:	4b2d      	ldr	r3, [pc, #180]	; (8002fa0 <HAL_RCC_OscConfig+0x26c>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f003 0302 	and.w	r3, r3, #2
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d0f0      	beq.n	8002ed6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ef4:	4b2a      	ldr	r3, [pc, #168]	; (8002fa0 <HAL_RCC_OscConfig+0x26c>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	695b      	ldr	r3, [r3, #20]
 8002f00:	00db      	lsls	r3, r3, #3
 8002f02:	4927      	ldr	r1, [pc, #156]	; (8002fa0 <HAL_RCC_OscConfig+0x26c>)
 8002f04:	4313      	orrs	r3, r2
 8002f06:	600b      	str	r3, [r1, #0]
 8002f08:	e015      	b.n	8002f36 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f0a:	4b26      	ldr	r3, [pc, #152]	; (8002fa4 <HAL_RCC_OscConfig+0x270>)
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f10:	f7fe fafa 	bl	8001508 <HAL_GetTick>
 8002f14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f16:	e008      	b.n	8002f2a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f18:	f7fe faf6 	bl	8001508 <HAL_GetTick>
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	1ad3      	subs	r3, r2, r3
 8002f22:	2b02      	cmp	r3, #2
 8002f24:	d901      	bls.n	8002f2a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002f26:	2303      	movs	r3, #3
 8002f28:	e180      	b.n	800322c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f2a:	4b1d      	ldr	r3, [pc, #116]	; (8002fa0 <HAL_RCC_OscConfig+0x26c>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f003 0302 	and.w	r3, r3, #2
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d1f0      	bne.n	8002f18 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f003 0308 	and.w	r3, r3, #8
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d03a      	beq.n	8002fb8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	699b      	ldr	r3, [r3, #24]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d019      	beq.n	8002f7e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f4a:	4b17      	ldr	r3, [pc, #92]	; (8002fa8 <HAL_RCC_OscConfig+0x274>)
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f50:	f7fe fada 	bl	8001508 <HAL_GetTick>
 8002f54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f56:	e008      	b.n	8002f6a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f58:	f7fe fad6 	bl	8001508 <HAL_GetTick>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	693b      	ldr	r3, [r7, #16]
 8002f60:	1ad3      	subs	r3, r2, r3
 8002f62:	2b02      	cmp	r3, #2
 8002f64:	d901      	bls.n	8002f6a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002f66:	2303      	movs	r3, #3
 8002f68:	e160      	b.n	800322c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f6a:	4b0d      	ldr	r3, [pc, #52]	; (8002fa0 <HAL_RCC_OscConfig+0x26c>)
 8002f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f6e:	f003 0302 	and.w	r3, r3, #2
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d0f0      	beq.n	8002f58 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002f76:	2001      	movs	r0, #1
 8002f78:	f000 fac4 	bl	8003504 <RCC_Delay>
 8002f7c:	e01c      	b.n	8002fb8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f7e:	4b0a      	ldr	r3, [pc, #40]	; (8002fa8 <HAL_RCC_OscConfig+0x274>)
 8002f80:	2200      	movs	r2, #0
 8002f82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f84:	f7fe fac0 	bl	8001508 <HAL_GetTick>
 8002f88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f8a:	e00f      	b.n	8002fac <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f8c:	f7fe fabc 	bl	8001508 <HAL_GetTick>
 8002f90:	4602      	mov	r2, r0
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	1ad3      	subs	r3, r2, r3
 8002f96:	2b02      	cmp	r3, #2
 8002f98:	d908      	bls.n	8002fac <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002f9a:	2303      	movs	r3, #3
 8002f9c:	e146      	b.n	800322c <HAL_RCC_OscConfig+0x4f8>
 8002f9e:	bf00      	nop
 8002fa0:	40021000 	.word	0x40021000
 8002fa4:	42420000 	.word	0x42420000
 8002fa8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fac:	4b92      	ldr	r3, [pc, #584]	; (80031f8 <HAL_RCC_OscConfig+0x4c4>)
 8002fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb0:	f003 0302 	and.w	r3, r3, #2
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d1e9      	bne.n	8002f8c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f003 0304 	and.w	r3, r3, #4
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	f000 80a6 	beq.w	8003112 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fca:	4b8b      	ldr	r3, [pc, #556]	; (80031f8 <HAL_RCC_OscConfig+0x4c4>)
 8002fcc:	69db      	ldr	r3, [r3, #28]
 8002fce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d10d      	bne.n	8002ff2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fd6:	4b88      	ldr	r3, [pc, #544]	; (80031f8 <HAL_RCC_OscConfig+0x4c4>)
 8002fd8:	69db      	ldr	r3, [r3, #28]
 8002fda:	4a87      	ldr	r2, [pc, #540]	; (80031f8 <HAL_RCC_OscConfig+0x4c4>)
 8002fdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fe0:	61d3      	str	r3, [r2, #28]
 8002fe2:	4b85      	ldr	r3, [pc, #532]	; (80031f8 <HAL_RCC_OscConfig+0x4c4>)
 8002fe4:	69db      	ldr	r3, [r3, #28]
 8002fe6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fea:	60bb      	str	r3, [r7, #8]
 8002fec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ff2:	4b82      	ldr	r3, [pc, #520]	; (80031fc <HAL_RCC_OscConfig+0x4c8>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d118      	bne.n	8003030 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ffe:	4b7f      	ldr	r3, [pc, #508]	; (80031fc <HAL_RCC_OscConfig+0x4c8>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a7e      	ldr	r2, [pc, #504]	; (80031fc <HAL_RCC_OscConfig+0x4c8>)
 8003004:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003008:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800300a:	f7fe fa7d 	bl	8001508 <HAL_GetTick>
 800300e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003010:	e008      	b.n	8003024 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003012:	f7fe fa79 	bl	8001508 <HAL_GetTick>
 8003016:	4602      	mov	r2, r0
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	1ad3      	subs	r3, r2, r3
 800301c:	2b64      	cmp	r3, #100	; 0x64
 800301e:	d901      	bls.n	8003024 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003020:	2303      	movs	r3, #3
 8003022:	e103      	b.n	800322c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003024:	4b75      	ldr	r3, [pc, #468]	; (80031fc <HAL_RCC_OscConfig+0x4c8>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800302c:	2b00      	cmp	r3, #0
 800302e:	d0f0      	beq.n	8003012 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	68db      	ldr	r3, [r3, #12]
 8003034:	2b01      	cmp	r3, #1
 8003036:	d106      	bne.n	8003046 <HAL_RCC_OscConfig+0x312>
 8003038:	4b6f      	ldr	r3, [pc, #444]	; (80031f8 <HAL_RCC_OscConfig+0x4c4>)
 800303a:	6a1b      	ldr	r3, [r3, #32]
 800303c:	4a6e      	ldr	r2, [pc, #440]	; (80031f8 <HAL_RCC_OscConfig+0x4c4>)
 800303e:	f043 0301 	orr.w	r3, r3, #1
 8003042:	6213      	str	r3, [r2, #32]
 8003044:	e02d      	b.n	80030a2 <HAL_RCC_OscConfig+0x36e>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	68db      	ldr	r3, [r3, #12]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d10c      	bne.n	8003068 <HAL_RCC_OscConfig+0x334>
 800304e:	4b6a      	ldr	r3, [pc, #424]	; (80031f8 <HAL_RCC_OscConfig+0x4c4>)
 8003050:	6a1b      	ldr	r3, [r3, #32]
 8003052:	4a69      	ldr	r2, [pc, #420]	; (80031f8 <HAL_RCC_OscConfig+0x4c4>)
 8003054:	f023 0301 	bic.w	r3, r3, #1
 8003058:	6213      	str	r3, [r2, #32]
 800305a:	4b67      	ldr	r3, [pc, #412]	; (80031f8 <HAL_RCC_OscConfig+0x4c4>)
 800305c:	6a1b      	ldr	r3, [r3, #32]
 800305e:	4a66      	ldr	r2, [pc, #408]	; (80031f8 <HAL_RCC_OscConfig+0x4c4>)
 8003060:	f023 0304 	bic.w	r3, r3, #4
 8003064:	6213      	str	r3, [r2, #32]
 8003066:	e01c      	b.n	80030a2 <HAL_RCC_OscConfig+0x36e>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	68db      	ldr	r3, [r3, #12]
 800306c:	2b05      	cmp	r3, #5
 800306e:	d10c      	bne.n	800308a <HAL_RCC_OscConfig+0x356>
 8003070:	4b61      	ldr	r3, [pc, #388]	; (80031f8 <HAL_RCC_OscConfig+0x4c4>)
 8003072:	6a1b      	ldr	r3, [r3, #32]
 8003074:	4a60      	ldr	r2, [pc, #384]	; (80031f8 <HAL_RCC_OscConfig+0x4c4>)
 8003076:	f043 0304 	orr.w	r3, r3, #4
 800307a:	6213      	str	r3, [r2, #32]
 800307c:	4b5e      	ldr	r3, [pc, #376]	; (80031f8 <HAL_RCC_OscConfig+0x4c4>)
 800307e:	6a1b      	ldr	r3, [r3, #32]
 8003080:	4a5d      	ldr	r2, [pc, #372]	; (80031f8 <HAL_RCC_OscConfig+0x4c4>)
 8003082:	f043 0301 	orr.w	r3, r3, #1
 8003086:	6213      	str	r3, [r2, #32]
 8003088:	e00b      	b.n	80030a2 <HAL_RCC_OscConfig+0x36e>
 800308a:	4b5b      	ldr	r3, [pc, #364]	; (80031f8 <HAL_RCC_OscConfig+0x4c4>)
 800308c:	6a1b      	ldr	r3, [r3, #32]
 800308e:	4a5a      	ldr	r2, [pc, #360]	; (80031f8 <HAL_RCC_OscConfig+0x4c4>)
 8003090:	f023 0301 	bic.w	r3, r3, #1
 8003094:	6213      	str	r3, [r2, #32]
 8003096:	4b58      	ldr	r3, [pc, #352]	; (80031f8 <HAL_RCC_OscConfig+0x4c4>)
 8003098:	6a1b      	ldr	r3, [r3, #32]
 800309a:	4a57      	ldr	r2, [pc, #348]	; (80031f8 <HAL_RCC_OscConfig+0x4c4>)
 800309c:	f023 0304 	bic.w	r3, r3, #4
 80030a0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	68db      	ldr	r3, [r3, #12]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d015      	beq.n	80030d6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030aa:	f7fe fa2d 	bl	8001508 <HAL_GetTick>
 80030ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030b0:	e00a      	b.n	80030c8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030b2:	f7fe fa29 	bl	8001508 <HAL_GetTick>
 80030b6:	4602      	mov	r2, r0
 80030b8:	693b      	ldr	r3, [r7, #16]
 80030ba:	1ad3      	subs	r3, r2, r3
 80030bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d901      	bls.n	80030c8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80030c4:	2303      	movs	r3, #3
 80030c6:	e0b1      	b.n	800322c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030c8:	4b4b      	ldr	r3, [pc, #300]	; (80031f8 <HAL_RCC_OscConfig+0x4c4>)
 80030ca:	6a1b      	ldr	r3, [r3, #32]
 80030cc:	f003 0302 	and.w	r3, r3, #2
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d0ee      	beq.n	80030b2 <HAL_RCC_OscConfig+0x37e>
 80030d4:	e014      	b.n	8003100 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030d6:	f7fe fa17 	bl	8001508 <HAL_GetTick>
 80030da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030dc:	e00a      	b.n	80030f4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030de:	f7fe fa13 	bl	8001508 <HAL_GetTick>
 80030e2:	4602      	mov	r2, r0
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	1ad3      	subs	r3, r2, r3
 80030e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d901      	bls.n	80030f4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80030f0:	2303      	movs	r3, #3
 80030f2:	e09b      	b.n	800322c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030f4:	4b40      	ldr	r3, [pc, #256]	; (80031f8 <HAL_RCC_OscConfig+0x4c4>)
 80030f6:	6a1b      	ldr	r3, [r3, #32]
 80030f8:	f003 0302 	and.w	r3, r3, #2
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d1ee      	bne.n	80030de <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003100:	7dfb      	ldrb	r3, [r7, #23]
 8003102:	2b01      	cmp	r3, #1
 8003104:	d105      	bne.n	8003112 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003106:	4b3c      	ldr	r3, [pc, #240]	; (80031f8 <HAL_RCC_OscConfig+0x4c4>)
 8003108:	69db      	ldr	r3, [r3, #28]
 800310a:	4a3b      	ldr	r2, [pc, #236]	; (80031f8 <HAL_RCC_OscConfig+0x4c4>)
 800310c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003110:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	69db      	ldr	r3, [r3, #28]
 8003116:	2b00      	cmp	r3, #0
 8003118:	f000 8087 	beq.w	800322a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800311c:	4b36      	ldr	r3, [pc, #216]	; (80031f8 <HAL_RCC_OscConfig+0x4c4>)
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	f003 030c 	and.w	r3, r3, #12
 8003124:	2b08      	cmp	r3, #8
 8003126:	d061      	beq.n	80031ec <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	69db      	ldr	r3, [r3, #28]
 800312c:	2b02      	cmp	r3, #2
 800312e:	d146      	bne.n	80031be <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003130:	4b33      	ldr	r3, [pc, #204]	; (8003200 <HAL_RCC_OscConfig+0x4cc>)
 8003132:	2200      	movs	r2, #0
 8003134:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003136:	f7fe f9e7 	bl	8001508 <HAL_GetTick>
 800313a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800313c:	e008      	b.n	8003150 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800313e:	f7fe f9e3 	bl	8001508 <HAL_GetTick>
 8003142:	4602      	mov	r2, r0
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	1ad3      	subs	r3, r2, r3
 8003148:	2b02      	cmp	r3, #2
 800314a:	d901      	bls.n	8003150 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800314c:	2303      	movs	r3, #3
 800314e:	e06d      	b.n	800322c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003150:	4b29      	ldr	r3, [pc, #164]	; (80031f8 <HAL_RCC_OscConfig+0x4c4>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003158:	2b00      	cmp	r3, #0
 800315a:	d1f0      	bne.n	800313e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6a1b      	ldr	r3, [r3, #32]
 8003160:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003164:	d108      	bne.n	8003178 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003166:	4b24      	ldr	r3, [pc, #144]	; (80031f8 <HAL_RCC_OscConfig+0x4c4>)
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	4921      	ldr	r1, [pc, #132]	; (80031f8 <HAL_RCC_OscConfig+0x4c4>)
 8003174:	4313      	orrs	r3, r2
 8003176:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003178:	4b1f      	ldr	r3, [pc, #124]	; (80031f8 <HAL_RCC_OscConfig+0x4c4>)
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6a19      	ldr	r1, [r3, #32]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003188:	430b      	orrs	r3, r1
 800318a:	491b      	ldr	r1, [pc, #108]	; (80031f8 <HAL_RCC_OscConfig+0x4c4>)
 800318c:	4313      	orrs	r3, r2
 800318e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003190:	4b1b      	ldr	r3, [pc, #108]	; (8003200 <HAL_RCC_OscConfig+0x4cc>)
 8003192:	2201      	movs	r2, #1
 8003194:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003196:	f7fe f9b7 	bl	8001508 <HAL_GetTick>
 800319a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800319c:	e008      	b.n	80031b0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800319e:	f7fe f9b3 	bl	8001508 <HAL_GetTick>
 80031a2:	4602      	mov	r2, r0
 80031a4:	693b      	ldr	r3, [r7, #16]
 80031a6:	1ad3      	subs	r3, r2, r3
 80031a8:	2b02      	cmp	r3, #2
 80031aa:	d901      	bls.n	80031b0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80031ac:	2303      	movs	r3, #3
 80031ae:	e03d      	b.n	800322c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80031b0:	4b11      	ldr	r3, [pc, #68]	; (80031f8 <HAL_RCC_OscConfig+0x4c4>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d0f0      	beq.n	800319e <HAL_RCC_OscConfig+0x46a>
 80031bc:	e035      	b.n	800322a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031be:	4b10      	ldr	r3, [pc, #64]	; (8003200 <HAL_RCC_OscConfig+0x4cc>)
 80031c0:	2200      	movs	r2, #0
 80031c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031c4:	f7fe f9a0 	bl	8001508 <HAL_GetTick>
 80031c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031ca:	e008      	b.n	80031de <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031cc:	f7fe f99c 	bl	8001508 <HAL_GetTick>
 80031d0:	4602      	mov	r2, r0
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	1ad3      	subs	r3, r2, r3
 80031d6:	2b02      	cmp	r3, #2
 80031d8:	d901      	bls.n	80031de <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80031da:	2303      	movs	r3, #3
 80031dc:	e026      	b.n	800322c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031de:	4b06      	ldr	r3, [pc, #24]	; (80031f8 <HAL_RCC_OscConfig+0x4c4>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d1f0      	bne.n	80031cc <HAL_RCC_OscConfig+0x498>
 80031ea:	e01e      	b.n	800322a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	69db      	ldr	r3, [r3, #28]
 80031f0:	2b01      	cmp	r3, #1
 80031f2:	d107      	bne.n	8003204 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80031f4:	2301      	movs	r3, #1
 80031f6:	e019      	b.n	800322c <HAL_RCC_OscConfig+0x4f8>
 80031f8:	40021000 	.word	0x40021000
 80031fc:	40007000 	.word	0x40007000
 8003200:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003204:	4b0b      	ldr	r3, [pc, #44]	; (8003234 <HAL_RCC_OscConfig+0x500>)
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6a1b      	ldr	r3, [r3, #32]
 8003214:	429a      	cmp	r2, r3
 8003216:	d106      	bne.n	8003226 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003222:	429a      	cmp	r2, r3
 8003224:	d001      	beq.n	800322a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003226:	2301      	movs	r3, #1
 8003228:	e000      	b.n	800322c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800322a:	2300      	movs	r3, #0
}
 800322c:	4618      	mov	r0, r3
 800322e:	3718      	adds	r7, #24
 8003230:	46bd      	mov	sp, r7
 8003232:	bd80      	pop	{r7, pc}
 8003234:	40021000 	.word	0x40021000

08003238 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b084      	sub	sp, #16
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
 8003240:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d101      	bne.n	800324c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	e0d0      	b.n	80033ee <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800324c:	4b6a      	ldr	r3, [pc, #424]	; (80033f8 <HAL_RCC_ClockConfig+0x1c0>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f003 0307 	and.w	r3, r3, #7
 8003254:	683a      	ldr	r2, [r7, #0]
 8003256:	429a      	cmp	r2, r3
 8003258:	d910      	bls.n	800327c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800325a:	4b67      	ldr	r3, [pc, #412]	; (80033f8 <HAL_RCC_ClockConfig+0x1c0>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f023 0207 	bic.w	r2, r3, #7
 8003262:	4965      	ldr	r1, [pc, #404]	; (80033f8 <HAL_RCC_ClockConfig+0x1c0>)
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	4313      	orrs	r3, r2
 8003268:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800326a:	4b63      	ldr	r3, [pc, #396]	; (80033f8 <HAL_RCC_ClockConfig+0x1c0>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 0307 	and.w	r3, r3, #7
 8003272:	683a      	ldr	r2, [r7, #0]
 8003274:	429a      	cmp	r2, r3
 8003276:	d001      	beq.n	800327c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003278:	2301      	movs	r3, #1
 800327a:	e0b8      	b.n	80033ee <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f003 0302 	and.w	r3, r3, #2
 8003284:	2b00      	cmp	r3, #0
 8003286:	d020      	beq.n	80032ca <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f003 0304 	and.w	r3, r3, #4
 8003290:	2b00      	cmp	r3, #0
 8003292:	d005      	beq.n	80032a0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003294:	4b59      	ldr	r3, [pc, #356]	; (80033fc <HAL_RCC_ClockConfig+0x1c4>)
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	4a58      	ldr	r2, [pc, #352]	; (80033fc <HAL_RCC_ClockConfig+0x1c4>)
 800329a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800329e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f003 0308 	and.w	r3, r3, #8
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d005      	beq.n	80032b8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80032ac:	4b53      	ldr	r3, [pc, #332]	; (80033fc <HAL_RCC_ClockConfig+0x1c4>)
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	4a52      	ldr	r2, [pc, #328]	; (80033fc <HAL_RCC_ClockConfig+0x1c4>)
 80032b2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80032b6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032b8:	4b50      	ldr	r3, [pc, #320]	; (80033fc <HAL_RCC_ClockConfig+0x1c4>)
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	494d      	ldr	r1, [pc, #308]	; (80033fc <HAL_RCC_ClockConfig+0x1c4>)
 80032c6:	4313      	orrs	r3, r2
 80032c8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f003 0301 	and.w	r3, r3, #1
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d040      	beq.n	8003358 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	2b01      	cmp	r3, #1
 80032dc:	d107      	bne.n	80032ee <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032de:	4b47      	ldr	r3, [pc, #284]	; (80033fc <HAL_RCC_ClockConfig+0x1c4>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d115      	bne.n	8003316 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	e07f      	b.n	80033ee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	2b02      	cmp	r3, #2
 80032f4:	d107      	bne.n	8003306 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032f6:	4b41      	ldr	r3, [pc, #260]	; (80033fc <HAL_RCC_ClockConfig+0x1c4>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d109      	bne.n	8003316 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	e073      	b.n	80033ee <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003306:	4b3d      	ldr	r3, [pc, #244]	; (80033fc <HAL_RCC_ClockConfig+0x1c4>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f003 0302 	and.w	r3, r3, #2
 800330e:	2b00      	cmp	r3, #0
 8003310:	d101      	bne.n	8003316 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003312:	2301      	movs	r3, #1
 8003314:	e06b      	b.n	80033ee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003316:	4b39      	ldr	r3, [pc, #228]	; (80033fc <HAL_RCC_ClockConfig+0x1c4>)
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	f023 0203 	bic.w	r2, r3, #3
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	4936      	ldr	r1, [pc, #216]	; (80033fc <HAL_RCC_ClockConfig+0x1c4>)
 8003324:	4313      	orrs	r3, r2
 8003326:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003328:	f7fe f8ee 	bl	8001508 <HAL_GetTick>
 800332c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800332e:	e00a      	b.n	8003346 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003330:	f7fe f8ea 	bl	8001508 <HAL_GetTick>
 8003334:	4602      	mov	r2, r0
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	1ad3      	subs	r3, r2, r3
 800333a:	f241 3288 	movw	r2, #5000	; 0x1388
 800333e:	4293      	cmp	r3, r2
 8003340:	d901      	bls.n	8003346 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003342:	2303      	movs	r3, #3
 8003344:	e053      	b.n	80033ee <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003346:	4b2d      	ldr	r3, [pc, #180]	; (80033fc <HAL_RCC_ClockConfig+0x1c4>)
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	f003 020c 	and.w	r2, r3, #12
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	009b      	lsls	r3, r3, #2
 8003354:	429a      	cmp	r2, r3
 8003356:	d1eb      	bne.n	8003330 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003358:	4b27      	ldr	r3, [pc, #156]	; (80033f8 <HAL_RCC_ClockConfig+0x1c0>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f003 0307 	and.w	r3, r3, #7
 8003360:	683a      	ldr	r2, [r7, #0]
 8003362:	429a      	cmp	r2, r3
 8003364:	d210      	bcs.n	8003388 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003366:	4b24      	ldr	r3, [pc, #144]	; (80033f8 <HAL_RCC_ClockConfig+0x1c0>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f023 0207 	bic.w	r2, r3, #7
 800336e:	4922      	ldr	r1, [pc, #136]	; (80033f8 <HAL_RCC_ClockConfig+0x1c0>)
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	4313      	orrs	r3, r2
 8003374:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003376:	4b20      	ldr	r3, [pc, #128]	; (80033f8 <HAL_RCC_ClockConfig+0x1c0>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f003 0307 	and.w	r3, r3, #7
 800337e:	683a      	ldr	r2, [r7, #0]
 8003380:	429a      	cmp	r2, r3
 8003382:	d001      	beq.n	8003388 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003384:	2301      	movs	r3, #1
 8003386:	e032      	b.n	80033ee <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f003 0304 	and.w	r3, r3, #4
 8003390:	2b00      	cmp	r3, #0
 8003392:	d008      	beq.n	80033a6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003394:	4b19      	ldr	r3, [pc, #100]	; (80033fc <HAL_RCC_ClockConfig+0x1c4>)
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	68db      	ldr	r3, [r3, #12]
 80033a0:	4916      	ldr	r1, [pc, #88]	; (80033fc <HAL_RCC_ClockConfig+0x1c4>)
 80033a2:	4313      	orrs	r3, r2
 80033a4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f003 0308 	and.w	r3, r3, #8
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d009      	beq.n	80033c6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80033b2:	4b12      	ldr	r3, [pc, #72]	; (80033fc <HAL_RCC_ClockConfig+0x1c4>)
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	691b      	ldr	r3, [r3, #16]
 80033be:	00db      	lsls	r3, r3, #3
 80033c0:	490e      	ldr	r1, [pc, #56]	; (80033fc <HAL_RCC_ClockConfig+0x1c4>)
 80033c2:	4313      	orrs	r3, r2
 80033c4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80033c6:	f000 f821 	bl	800340c <HAL_RCC_GetSysClockFreq>
 80033ca:	4602      	mov	r2, r0
 80033cc:	4b0b      	ldr	r3, [pc, #44]	; (80033fc <HAL_RCC_ClockConfig+0x1c4>)
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	091b      	lsrs	r3, r3, #4
 80033d2:	f003 030f 	and.w	r3, r3, #15
 80033d6:	490a      	ldr	r1, [pc, #40]	; (8003400 <HAL_RCC_ClockConfig+0x1c8>)
 80033d8:	5ccb      	ldrb	r3, [r1, r3]
 80033da:	fa22 f303 	lsr.w	r3, r2, r3
 80033de:	4a09      	ldr	r2, [pc, #36]	; (8003404 <HAL_RCC_ClockConfig+0x1cc>)
 80033e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80033e2:	4b09      	ldr	r3, [pc, #36]	; (8003408 <HAL_RCC_ClockConfig+0x1d0>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4618      	mov	r0, r3
 80033e8:	f7fe f84c 	bl	8001484 <HAL_InitTick>

  return HAL_OK;
 80033ec:	2300      	movs	r3, #0
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	3710      	adds	r7, #16
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}
 80033f6:	bf00      	nop
 80033f8:	40022000 	.word	0x40022000
 80033fc:	40021000 	.word	0x40021000
 8003400:	080063a8 	.word	0x080063a8
 8003404:	20000000 	.word	0x20000000
 8003408:	20000004 	.word	0x20000004

0800340c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800340c:	b490      	push	{r4, r7}
 800340e:	b08a      	sub	sp, #40	; 0x28
 8003410:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003412:	4b29      	ldr	r3, [pc, #164]	; (80034b8 <HAL_RCC_GetSysClockFreq+0xac>)
 8003414:	1d3c      	adds	r4, r7, #4
 8003416:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003418:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800341c:	f240 2301 	movw	r3, #513	; 0x201
 8003420:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003422:	2300      	movs	r3, #0
 8003424:	61fb      	str	r3, [r7, #28]
 8003426:	2300      	movs	r3, #0
 8003428:	61bb      	str	r3, [r7, #24]
 800342a:	2300      	movs	r3, #0
 800342c:	627b      	str	r3, [r7, #36]	; 0x24
 800342e:	2300      	movs	r3, #0
 8003430:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003432:	2300      	movs	r3, #0
 8003434:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003436:	4b21      	ldr	r3, [pc, #132]	; (80034bc <HAL_RCC_GetSysClockFreq+0xb0>)
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800343c:	69fb      	ldr	r3, [r7, #28]
 800343e:	f003 030c 	and.w	r3, r3, #12
 8003442:	2b04      	cmp	r3, #4
 8003444:	d002      	beq.n	800344c <HAL_RCC_GetSysClockFreq+0x40>
 8003446:	2b08      	cmp	r3, #8
 8003448:	d003      	beq.n	8003452 <HAL_RCC_GetSysClockFreq+0x46>
 800344a:	e02b      	b.n	80034a4 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800344c:	4b1c      	ldr	r3, [pc, #112]	; (80034c0 <HAL_RCC_GetSysClockFreq+0xb4>)
 800344e:	623b      	str	r3, [r7, #32]
      break;
 8003450:	e02b      	b.n	80034aa <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003452:	69fb      	ldr	r3, [r7, #28]
 8003454:	0c9b      	lsrs	r3, r3, #18
 8003456:	f003 030f 	and.w	r3, r3, #15
 800345a:	3328      	adds	r3, #40	; 0x28
 800345c:	443b      	add	r3, r7
 800345e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003462:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003464:	69fb      	ldr	r3, [r7, #28]
 8003466:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800346a:	2b00      	cmp	r3, #0
 800346c:	d012      	beq.n	8003494 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800346e:	4b13      	ldr	r3, [pc, #76]	; (80034bc <HAL_RCC_GetSysClockFreq+0xb0>)
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	0c5b      	lsrs	r3, r3, #17
 8003474:	f003 0301 	and.w	r3, r3, #1
 8003478:	3328      	adds	r3, #40	; 0x28
 800347a:	443b      	add	r3, r7
 800347c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003480:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003482:	697b      	ldr	r3, [r7, #20]
 8003484:	4a0e      	ldr	r2, [pc, #56]	; (80034c0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003486:	fb03 f202 	mul.w	r2, r3, r2
 800348a:	69bb      	ldr	r3, [r7, #24]
 800348c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003490:	627b      	str	r3, [r7, #36]	; 0x24
 8003492:	e004      	b.n	800349e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	4a0b      	ldr	r2, [pc, #44]	; (80034c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003498:	fb02 f303 	mul.w	r3, r2, r3
 800349c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800349e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a0:	623b      	str	r3, [r7, #32]
      break;
 80034a2:	e002      	b.n	80034aa <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80034a4:	4b06      	ldr	r3, [pc, #24]	; (80034c0 <HAL_RCC_GetSysClockFreq+0xb4>)
 80034a6:	623b      	str	r3, [r7, #32]
      break;
 80034a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80034aa:	6a3b      	ldr	r3, [r7, #32]
}
 80034ac:	4618      	mov	r0, r3
 80034ae:	3728      	adds	r7, #40	; 0x28
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bc90      	pop	{r4, r7}
 80034b4:	4770      	bx	lr
 80034b6:	bf00      	nop
 80034b8:	08006398 	.word	0x08006398
 80034bc:	40021000 	.word	0x40021000
 80034c0:	007a1200 	.word	0x007a1200
 80034c4:	003d0900 	.word	0x003d0900

080034c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034c8:	b480      	push	{r7}
 80034ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034cc:	4b02      	ldr	r3, [pc, #8]	; (80034d8 <HAL_RCC_GetHCLKFreq+0x10>)
 80034ce:	681b      	ldr	r3, [r3, #0]
}
 80034d0:	4618      	mov	r0, r3
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bc80      	pop	{r7}
 80034d6:	4770      	bx	lr
 80034d8:	20000000 	.word	0x20000000

080034dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80034e0:	f7ff fff2 	bl	80034c8 <HAL_RCC_GetHCLKFreq>
 80034e4:	4602      	mov	r2, r0
 80034e6:	4b05      	ldr	r3, [pc, #20]	; (80034fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	0a1b      	lsrs	r3, r3, #8
 80034ec:	f003 0307 	and.w	r3, r3, #7
 80034f0:	4903      	ldr	r1, [pc, #12]	; (8003500 <HAL_RCC_GetPCLK1Freq+0x24>)
 80034f2:	5ccb      	ldrb	r3, [r1, r3]
 80034f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034f8:	4618      	mov	r0, r3
 80034fa:	bd80      	pop	{r7, pc}
 80034fc:	40021000 	.word	0x40021000
 8003500:	080063b8 	.word	0x080063b8

08003504 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003504:	b480      	push	{r7}
 8003506:	b085      	sub	sp, #20
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800350c:	4b0a      	ldr	r3, [pc, #40]	; (8003538 <RCC_Delay+0x34>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a0a      	ldr	r2, [pc, #40]	; (800353c <RCC_Delay+0x38>)
 8003512:	fba2 2303 	umull	r2, r3, r2, r3
 8003516:	0a5b      	lsrs	r3, r3, #9
 8003518:	687a      	ldr	r2, [r7, #4]
 800351a:	fb02 f303 	mul.w	r3, r2, r3
 800351e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003520:	bf00      	nop
  }
  while (Delay --);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	1e5a      	subs	r2, r3, #1
 8003526:	60fa      	str	r2, [r7, #12]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d1f9      	bne.n	8003520 <RCC_Delay+0x1c>
}
 800352c:	bf00      	nop
 800352e:	bf00      	nop
 8003530:	3714      	adds	r7, #20
 8003532:	46bd      	mov	sp, r7
 8003534:	bc80      	pop	{r7}
 8003536:	4770      	bx	lr
 8003538:	20000000 	.word	0x20000000
 800353c:	10624dd3 	.word	0x10624dd3

08003540 <__errno>:
 8003540:	4b01      	ldr	r3, [pc, #4]	; (8003548 <__errno+0x8>)
 8003542:	6818      	ldr	r0, [r3, #0]
 8003544:	4770      	bx	lr
 8003546:	bf00      	nop
 8003548:	2000000c 	.word	0x2000000c

0800354c <__libc_init_array>:
 800354c:	b570      	push	{r4, r5, r6, lr}
 800354e:	2600      	movs	r6, #0
 8003550:	4d0c      	ldr	r5, [pc, #48]	; (8003584 <__libc_init_array+0x38>)
 8003552:	4c0d      	ldr	r4, [pc, #52]	; (8003588 <__libc_init_array+0x3c>)
 8003554:	1b64      	subs	r4, r4, r5
 8003556:	10a4      	asrs	r4, r4, #2
 8003558:	42a6      	cmp	r6, r4
 800355a:	d109      	bne.n	8003570 <__libc_init_array+0x24>
 800355c:	f002 fefc 	bl	8006358 <_init>
 8003560:	2600      	movs	r6, #0
 8003562:	4d0a      	ldr	r5, [pc, #40]	; (800358c <__libc_init_array+0x40>)
 8003564:	4c0a      	ldr	r4, [pc, #40]	; (8003590 <__libc_init_array+0x44>)
 8003566:	1b64      	subs	r4, r4, r5
 8003568:	10a4      	asrs	r4, r4, #2
 800356a:	42a6      	cmp	r6, r4
 800356c:	d105      	bne.n	800357a <__libc_init_array+0x2e>
 800356e:	bd70      	pop	{r4, r5, r6, pc}
 8003570:	f855 3b04 	ldr.w	r3, [r5], #4
 8003574:	4798      	blx	r3
 8003576:	3601      	adds	r6, #1
 8003578:	e7ee      	b.n	8003558 <__libc_init_array+0xc>
 800357a:	f855 3b04 	ldr.w	r3, [r5], #4
 800357e:	4798      	blx	r3
 8003580:	3601      	adds	r6, #1
 8003582:	e7f2      	b.n	800356a <__libc_init_array+0x1e>
 8003584:	0800679c 	.word	0x0800679c
 8003588:	0800679c 	.word	0x0800679c
 800358c:	0800679c 	.word	0x0800679c
 8003590:	080067a0 	.word	0x080067a0

08003594 <memset>:
 8003594:	4603      	mov	r3, r0
 8003596:	4402      	add	r2, r0
 8003598:	4293      	cmp	r3, r2
 800359a:	d100      	bne.n	800359e <memset+0xa>
 800359c:	4770      	bx	lr
 800359e:	f803 1b01 	strb.w	r1, [r3], #1
 80035a2:	e7f9      	b.n	8003598 <memset+0x4>

080035a4 <__cvt>:
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80035aa:	461f      	mov	r7, r3
 80035ac:	bfbb      	ittet	lt
 80035ae:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80035b2:	461f      	movlt	r7, r3
 80035b4:	2300      	movge	r3, #0
 80035b6:	232d      	movlt	r3, #45	; 0x2d
 80035b8:	b088      	sub	sp, #32
 80035ba:	4614      	mov	r4, r2
 80035bc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80035be:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80035c0:	7013      	strb	r3, [r2, #0]
 80035c2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80035c4:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80035c8:	f023 0820 	bic.w	r8, r3, #32
 80035cc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80035d0:	d005      	beq.n	80035de <__cvt+0x3a>
 80035d2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80035d6:	d100      	bne.n	80035da <__cvt+0x36>
 80035d8:	3501      	adds	r5, #1
 80035da:	2302      	movs	r3, #2
 80035dc:	e000      	b.n	80035e0 <__cvt+0x3c>
 80035de:	2303      	movs	r3, #3
 80035e0:	aa07      	add	r2, sp, #28
 80035e2:	9204      	str	r2, [sp, #16]
 80035e4:	aa06      	add	r2, sp, #24
 80035e6:	e9cd a202 	strd	sl, r2, [sp, #8]
 80035ea:	e9cd 3500 	strd	r3, r5, [sp]
 80035ee:	4622      	mov	r2, r4
 80035f0:	463b      	mov	r3, r7
 80035f2:	f000 fce5 	bl	8003fc0 <_dtoa_r>
 80035f6:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80035fa:	4606      	mov	r6, r0
 80035fc:	d102      	bne.n	8003604 <__cvt+0x60>
 80035fe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003600:	07db      	lsls	r3, r3, #31
 8003602:	d522      	bpl.n	800364a <__cvt+0xa6>
 8003604:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003608:	eb06 0905 	add.w	r9, r6, r5
 800360c:	d110      	bne.n	8003630 <__cvt+0x8c>
 800360e:	7833      	ldrb	r3, [r6, #0]
 8003610:	2b30      	cmp	r3, #48	; 0x30
 8003612:	d10a      	bne.n	800362a <__cvt+0x86>
 8003614:	2200      	movs	r2, #0
 8003616:	2300      	movs	r3, #0
 8003618:	4620      	mov	r0, r4
 800361a:	4639      	mov	r1, r7
 800361c:	f7fd f9c4 	bl	80009a8 <__aeabi_dcmpeq>
 8003620:	b918      	cbnz	r0, 800362a <__cvt+0x86>
 8003622:	f1c5 0501 	rsb	r5, r5, #1
 8003626:	f8ca 5000 	str.w	r5, [sl]
 800362a:	f8da 3000 	ldr.w	r3, [sl]
 800362e:	4499      	add	r9, r3
 8003630:	2200      	movs	r2, #0
 8003632:	2300      	movs	r3, #0
 8003634:	4620      	mov	r0, r4
 8003636:	4639      	mov	r1, r7
 8003638:	f7fd f9b6 	bl	80009a8 <__aeabi_dcmpeq>
 800363c:	b108      	cbz	r0, 8003642 <__cvt+0x9e>
 800363e:	f8cd 901c 	str.w	r9, [sp, #28]
 8003642:	2230      	movs	r2, #48	; 0x30
 8003644:	9b07      	ldr	r3, [sp, #28]
 8003646:	454b      	cmp	r3, r9
 8003648:	d307      	bcc.n	800365a <__cvt+0xb6>
 800364a:	4630      	mov	r0, r6
 800364c:	9b07      	ldr	r3, [sp, #28]
 800364e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8003650:	1b9b      	subs	r3, r3, r6
 8003652:	6013      	str	r3, [r2, #0]
 8003654:	b008      	add	sp, #32
 8003656:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800365a:	1c59      	adds	r1, r3, #1
 800365c:	9107      	str	r1, [sp, #28]
 800365e:	701a      	strb	r2, [r3, #0]
 8003660:	e7f0      	b.n	8003644 <__cvt+0xa0>

08003662 <__exponent>:
 8003662:	4603      	mov	r3, r0
 8003664:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003666:	2900      	cmp	r1, #0
 8003668:	f803 2b02 	strb.w	r2, [r3], #2
 800366c:	bfb6      	itet	lt
 800366e:	222d      	movlt	r2, #45	; 0x2d
 8003670:	222b      	movge	r2, #43	; 0x2b
 8003672:	4249      	neglt	r1, r1
 8003674:	2909      	cmp	r1, #9
 8003676:	7042      	strb	r2, [r0, #1]
 8003678:	dd2b      	ble.n	80036d2 <__exponent+0x70>
 800367a:	f10d 0407 	add.w	r4, sp, #7
 800367e:	46a4      	mov	ip, r4
 8003680:	270a      	movs	r7, #10
 8003682:	fb91 f6f7 	sdiv	r6, r1, r7
 8003686:	460a      	mov	r2, r1
 8003688:	46a6      	mov	lr, r4
 800368a:	fb07 1516 	mls	r5, r7, r6, r1
 800368e:	2a63      	cmp	r2, #99	; 0x63
 8003690:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8003694:	4631      	mov	r1, r6
 8003696:	f104 34ff 	add.w	r4, r4, #4294967295
 800369a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800369e:	dcf0      	bgt.n	8003682 <__exponent+0x20>
 80036a0:	3130      	adds	r1, #48	; 0x30
 80036a2:	f1ae 0502 	sub.w	r5, lr, #2
 80036a6:	f804 1c01 	strb.w	r1, [r4, #-1]
 80036aa:	4629      	mov	r1, r5
 80036ac:	1c44      	adds	r4, r0, #1
 80036ae:	4561      	cmp	r1, ip
 80036b0:	d30a      	bcc.n	80036c8 <__exponent+0x66>
 80036b2:	f10d 0209 	add.w	r2, sp, #9
 80036b6:	eba2 020e 	sub.w	r2, r2, lr
 80036ba:	4565      	cmp	r5, ip
 80036bc:	bf88      	it	hi
 80036be:	2200      	movhi	r2, #0
 80036c0:	4413      	add	r3, r2
 80036c2:	1a18      	subs	r0, r3, r0
 80036c4:	b003      	add	sp, #12
 80036c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80036c8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80036cc:	f804 2f01 	strb.w	r2, [r4, #1]!
 80036d0:	e7ed      	b.n	80036ae <__exponent+0x4c>
 80036d2:	2330      	movs	r3, #48	; 0x30
 80036d4:	3130      	adds	r1, #48	; 0x30
 80036d6:	7083      	strb	r3, [r0, #2]
 80036d8:	70c1      	strb	r1, [r0, #3]
 80036da:	1d03      	adds	r3, r0, #4
 80036dc:	e7f1      	b.n	80036c2 <__exponent+0x60>
	...

080036e0 <_printf_float>:
 80036e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036e4:	b091      	sub	sp, #68	; 0x44
 80036e6:	460c      	mov	r4, r1
 80036e8:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80036ec:	4616      	mov	r6, r2
 80036ee:	461f      	mov	r7, r3
 80036f0:	4605      	mov	r5, r0
 80036f2:	f001 fa53 	bl	8004b9c <_localeconv_r>
 80036f6:	6803      	ldr	r3, [r0, #0]
 80036f8:	4618      	mov	r0, r3
 80036fa:	9309      	str	r3, [sp, #36]	; 0x24
 80036fc:	f7fc fd28 	bl	8000150 <strlen>
 8003700:	2300      	movs	r3, #0
 8003702:	930e      	str	r3, [sp, #56]	; 0x38
 8003704:	f8d8 3000 	ldr.w	r3, [r8]
 8003708:	900a      	str	r0, [sp, #40]	; 0x28
 800370a:	3307      	adds	r3, #7
 800370c:	f023 0307 	bic.w	r3, r3, #7
 8003710:	f103 0208 	add.w	r2, r3, #8
 8003714:	f894 9018 	ldrb.w	r9, [r4, #24]
 8003718:	f8d4 b000 	ldr.w	fp, [r4]
 800371c:	f8c8 2000 	str.w	r2, [r8]
 8003720:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003724:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003728:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 800372c:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8003730:	930b      	str	r3, [sp, #44]	; 0x2c
 8003732:	f04f 32ff 	mov.w	r2, #4294967295
 8003736:	4640      	mov	r0, r8
 8003738:	4b9c      	ldr	r3, [pc, #624]	; (80039ac <_printf_float+0x2cc>)
 800373a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800373c:	f7fd f966 	bl	8000a0c <__aeabi_dcmpun>
 8003740:	bb70      	cbnz	r0, 80037a0 <_printf_float+0xc0>
 8003742:	f04f 32ff 	mov.w	r2, #4294967295
 8003746:	4640      	mov	r0, r8
 8003748:	4b98      	ldr	r3, [pc, #608]	; (80039ac <_printf_float+0x2cc>)
 800374a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800374c:	f7fd f940 	bl	80009d0 <__aeabi_dcmple>
 8003750:	bb30      	cbnz	r0, 80037a0 <_printf_float+0xc0>
 8003752:	2200      	movs	r2, #0
 8003754:	2300      	movs	r3, #0
 8003756:	4640      	mov	r0, r8
 8003758:	4651      	mov	r1, sl
 800375a:	f7fd f92f 	bl	80009bc <__aeabi_dcmplt>
 800375e:	b110      	cbz	r0, 8003766 <_printf_float+0x86>
 8003760:	232d      	movs	r3, #45	; 0x2d
 8003762:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003766:	4b92      	ldr	r3, [pc, #584]	; (80039b0 <_printf_float+0x2d0>)
 8003768:	4892      	ldr	r0, [pc, #584]	; (80039b4 <_printf_float+0x2d4>)
 800376a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800376e:	bf94      	ite	ls
 8003770:	4698      	movls	r8, r3
 8003772:	4680      	movhi	r8, r0
 8003774:	2303      	movs	r3, #3
 8003776:	f04f 0a00 	mov.w	sl, #0
 800377a:	6123      	str	r3, [r4, #16]
 800377c:	f02b 0304 	bic.w	r3, fp, #4
 8003780:	6023      	str	r3, [r4, #0]
 8003782:	4633      	mov	r3, r6
 8003784:	4621      	mov	r1, r4
 8003786:	4628      	mov	r0, r5
 8003788:	9700      	str	r7, [sp, #0]
 800378a:	aa0f      	add	r2, sp, #60	; 0x3c
 800378c:	f000 f9d4 	bl	8003b38 <_printf_common>
 8003790:	3001      	adds	r0, #1
 8003792:	f040 8090 	bne.w	80038b6 <_printf_float+0x1d6>
 8003796:	f04f 30ff 	mov.w	r0, #4294967295
 800379a:	b011      	add	sp, #68	; 0x44
 800379c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80037a0:	4642      	mov	r2, r8
 80037a2:	4653      	mov	r3, sl
 80037a4:	4640      	mov	r0, r8
 80037a6:	4651      	mov	r1, sl
 80037a8:	f7fd f930 	bl	8000a0c <__aeabi_dcmpun>
 80037ac:	b148      	cbz	r0, 80037c2 <_printf_float+0xe2>
 80037ae:	f1ba 0f00 	cmp.w	sl, #0
 80037b2:	bfb8      	it	lt
 80037b4:	232d      	movlt	r3, #45	; 0x2d
 80037b6:	4880      	ldr	r0, [pc, #512]	; (80039b8 <_printf_float+0x2d8>)
 80037b8:	bfb8      	it	lt
 80037ba:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80037be:	4b7f      	ldr	r3, [pc, #508]	; (80039bc <_printf_float+0x2dc>)
 80037c0:	e7d3      	b.n	800376a <_printf_float+0x8a>
 80037c2:	6863      	ldr	r3, [r4, #4]
 80037c4:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80037c8:	1c5a      	adds	r2, r3, #1
 80037ca:	d142      	bne.n	8003852 <_printf_float+0x172>
 80037cc:	2306      	movs	r3, #6
 80037ce:	6063      	str	r3, [r4, #4]
 80037d0:	2200      	movs	r2, #0
 80037d2:	9206      	str	r2, [sp, #24]
 80037d4:	aa0e      	add	r2, sp, #56	; 0x38
 80037d6:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80037da:	aa0d      	add	r2, sp, #52	; 0x34
 80037dc:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80037e0:	9203      	str	r2, [sp, #12]
 80037e2:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80037e6:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80037ea:	6023      	str	r3, [r4, #0]
 80037ec:	6863      	ldr	r3, [r4, #4]
 80037ee:	4642      	mov	r2, r8
 80037f0:	9300      	str	r3, [sp, #0]
 80037f2:	4628      	mov	r0, r5
 80037f4:	4653      	mov	r3, sl
 80037f6:	910b      	str	r1, [sp, #44]	; 0x2c
 80037f8:	f7ff fed4 	bl	80035a4 <__cvt>
 80037fc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80037fe:	4680      	mov	r8, r0
 8003800:	2947      	cmp	r1, #71	; 0x47
 8003802:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003804:	d108      	bne.n	8003818 <_printf_float+0x138>
 8003806:	1cc8      	adds	r0, r1, #3
 8003808:	db02      	blt.n	8003810 <_printf_float+0x130>
 800380a:	6863      	ldr	r3, [r4, #4]
 800380c:	4299      	cmp	r1, r3
 800380e:	dd40      	ble.n	8003892 <_printf_float+0x1b2>
 8003810:	f1a9 0902 	sub.w	r9, r9, #2
 8003814:	fa5f f989 	uxtb.w	r9, r9
 8003818:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800381c:	d81f      	bhi.n	800385e <_printf_float+0x17e>
 800381e:	464a      	mov	r2, r9
 8003820:	3901      	subs	r1, #1
 8003822:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003826:	910d      	str	r1, [sp, #52]	; 0x34
 8003828:	f7ff ff1b 	bl	8003662 <__exponent>
 800382c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800382e:	4682      	mov	sl, r0
 8003830:	1813      	adds	r3, r2, r0
 8003832:	2a01      	cmp	r2, #1
 8003834:	6123      	str	r3, [r4, #16]
 8003836:	dc02      	bgt.n	800383e <_printf_float+0x15e>
 8003838:	6822      	ldr	r2, [r4, #0]
 800383a:	07d2      	lsls	r2, r2, #31
 800383c:	d501      	bpl.n	8003842 <_printf_float+0x162>
 800383e:	3301      	adds	r3, #1
 8003840:	6123      	str	r3, [r4, #16]
 8003842:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8003846:	2b00      	cmp	r3, #0
 8003848:	d09b      	beq.n	8003782 <_printf_float+0xa2>
 800384a:	232d      	movs	r3, #45	; 0x2d
 800384c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003850:	e797      	b.n	8003782 <_printf_float+0xa2>
 8003852:	2947      	cmp	r1, #71	; 0x47
 8003854:	d1bc      	bne.n	80037d0 <_printf_float+0xf0>
 8003856:	2b00      	cmp	r3, #0
 8003858:	d1ba      	bne.n	80037d0 <_printf_float+0xf0>
 800385a:	2301      	movs	r3, #1
 800385c:	e7b7      	b.n	80037ce <_printf_float+0xee>
 800385e:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8003862:	d118      	bne.n	8003896 <_printf_float+0x1b6>
 8003864:	2900      	cmp	r1, #0
 8003866:	6863      	ldr	r3, [r4, #4]
 8003868:	dd0b      	ble.n	8003882 <_printf_float+0x1a2>
 800386a:	6121      	str	r1, [r4, #16]
 800386c:	b913      	cbnz	r3, 8003874 <_printf_float+0x194>
 800386e:	6822      	ldr	r2, [r4, #0]
 8003870:	07d0      	lsls	r0, r2, #31
 8003872:	d502      	bpl.n	800387a <_printf_float+0x19a>
 8003874:	3301      	adds	r3, #1
 8003876:	440b      	add	r3, r1
 8003878:	6123      	str	r3, [r4, #16]
 800387a:	f04f 0a00 	mov.w	sl, #0
 800387e:	65a1      	str	r1, [r4, #88]	; 0x58
 8003880:	e7df      	b.n	8003842 <_printf_float+0x162>
 8003882:	b913      	cbnz	r3, 800388a <_printf_float+0x1aa>
 8003884:	6822      	ldr	r2, [r4, #0]
 8003886:	07d2      	lsls	r2, r2, #31
 8003888:	d501      	bpl.n	800388e <_printf_float+0x1ae>
 800388a:	3302      	adds	r3, #2
 800388c:	e7f4      	b.n	8003878 <_printf_float+0x198>
 800388e:	2301      	movs	r3, #1
 8003890:	e7f2      	b.n	8003878 <_printf_float+0x198>
 8003892:	f04f 0967 	mov.w	r9, #103	; 0x67
 8003896:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003898:	4299      	cmp	r1, r3
 800389a:	db05      	blt.n	80038a8 <_printf_float+0x1c8>
 800389c:	6823      	ldr	r3, [r4, #0]
 800389e:	6121      	str	r1, [r4, #16]
 80038a0:	07d8      	lsls	r0, r3, #31
 80038a2:	d5ea      	bpl.n	800387a <_printf_float+0x19a>
 80038a4:	1c4b      	adds	r3, r1, #1
 80038a6:	e7e7      	b.n	8003878 <_printf_float+0x198>
 80038a8:	2900      	cmp	r1, #0
 80038aa:	bfcc      	ite	gt
 80038ac:	2201      	movgt	r2, #1
 80038ae:	f1c1 0202 	rsble	r2, r1, #2
 80038b2:	4413      	add	r3, r2
 80038b4:	e7e0      	b.n	8003878 <_printf_float+0x198>
 80038b6:	6823      	ldr	r3, [r4, #0]
 80038b8:	055a      	lsls	r2, r3, #21
 80038ba:	d407      	bmi.n	80038cc <_printf_float+0x1ec>
 80038bc:	6923      	ldr	r3, [r4, #16]
 80038be:	4642      	mov	r2, r8
 80038c0:	4631      	mov	r1, r6
 80038c2:	4628      	mov	r0, r5
 80038c4:	47b8      	blx	r7
 80038c6:	3001      	adds	r0, #1
 80038c8:	d12b      	bne.n	8003922 <_printf_float+0x242>
 80038ca:	e764      	b.n	8003796 <_printf_float+0xb6>
 80038cc:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80038d0:	f240 80dd 	bls.w	8003a8e <_printf_float+0x3ae>
 80038d4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80038d8:	2200      	movs	r2, #0
 80038da:	2300      	movs	r3, #0
 80038dc:	f7fd f864 	bl	80009a8 <__aeabi_dcmpeq>
 80038e0:	2800      	cmp	r0, #0
 80038e2:	d033      	beq.n	800394c <_printf_float+0x26c>
 80038e4:	2301      	movs	r3, #1
 80038e6:	4631      	mov	r1, r6
 80038e8:	4628      	mov	r0, r5
 80038ea:	4a35      	ldr	r2, [pc, #212]	; (80039c0 <_printf_float+0x2e0>)
 80038ec:	47b8      	blx	r7
 80038ee:	3001      	adds	r0, #1
 80038f0:	f43f af51 	beq.w	8003796 <_printf_float+0xb6>
 80038f4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80038f8:	429a      	cmp	r2, r3
 80038fa:	db02      	blt.n	8003902 <_printf_float+0x222>
 80038fc:	6823      	ldr	r3, [r4, #0]
 80038fe:	07d8      	lsls	r0, r3, #31
 8003900:	d50f      	bpl.n	8003922 <_printf_float+0x242>
 8003902:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003906:	4631      	mov	r1, r6
 8003908:	4628      	mov	r0, r5
 800390a:	47b8      	blx	r7
 800390c:	3001      	adds	r0, #1
 800390e:	f43f af42 	beq.w	8003796 <_printf_float+0xb6>
 8003912:	f04f 0800 	mov.w	r8, #0
 8003916:	f104 091a 	add.w	r9, r4, #26
 800391a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800391c:	3b01      	subs	r3, #1
 800391e:	4543      	cmp	r3, r8
 8003920:	dc09      	bgt.n	8003936 <_printf_float+0x256>
 8003922:	6823      	ldr	r3, [r4, #0]
 8003924:	079b      	lsls	r3, r3, #30
 8003926:	f100 8102 	bmi.w	8003b2e <_printf_float+0x44e>
 800392a:	68e0      	ldr	r0, [r4, #12]
 800392c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800392e:	4298      	cmp	r0, r3
 8003930:	bfb8      	it	lt
 8003932:	4618      	movlt	r0, r3
 8003934:	e731      	b.n	800379a <_printf_float+0xba>
 8003936:	2301      	movs	r3, #1
 8003938:	464a      	mov	r2, r9
 800393a:	4631      	mov	r1, r6
 800393c:	4628      	mov	r0, r5
 800393e:	47b8      	blx	r7
 8003940:	3001      	adds	r0, #1
 8003942:	f43f af28 	beq.w	8003796 <_printf_float+0xb6>
 8003946:	f108 0801 	add.w	r8, r8, #1
 800394a:	e7e6      	b.n	800391a <_printf_float+0x23a>
 800394c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800394e:	2b00      	cmp	r3, #0
 8003950:	dc38      	bgt.n	80039c4 <_printf_float+0x2e4>
 8003952:	2301      	movs	r3, #1
 8003954:	4631      	mov	r1, r6
 8003956:	4628      	mov	r0, r5
 8003958:	4a19      	ldr	r2, [pc, #100]	; (80039c0 <_printf_float+0x2e0>)
 800395a:	47b8      	blx	r7
 800395c:	3001      	adds	r0, #1
 800395e:	f43f af1a 	beq.w	8003796 <_printf_float+0xb6>
 8003962:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003966:	4313      	orrs	r3, r2
 8003968:	d102      	bne.n	8003970 <_printf_float+0x290>
 800396a:	6823      	ldr	r3, [r4, #0]
 800396c:	07d9      	lsls	r1, r3, #31
 800396e:	d5d8      	bpl.n	8003922 <_printf_float+0x242>
 8003970:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003974:	4631      	mov	r1, r6
 8003976:	4628      	mov	r0, r5
 8003978:	47b8      	blx	r7
 800397a:	3001      	adds	r0, #1
 800397c:	f43f af0b 	beq.w	8003796 <_printf_float+0xb6>
 8003980:	f04f 0900 	mov.w	r9, #0
 8003984:	f104 0a1a 	add.w	sl, r4, #26
 8003988:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800398a:	425b      	negs	r3, r3
 800398c:	454b      	cmp	r3, r9
 800398e:	dc01      	bgt.n	8003994 <_printf_float+0x2b4>
 8003990:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003992:	e794      	b.n	80038be <_printf_float+0x1de>
 8003994:	2301      	movs	r3, #1
 8003996:	4652      	mov	r2, sl
 8003998:	4631      	mov	r1, r6
 800399a:	4628      	mov	r0, r5
 800399c:	47b8      	blx	r7
 800399e:	3001      	adds	r0, #1
 80039a0:	f43f aef9 	beq.w	8003796 <_printf_float+0xb6>
 80039a4:	f109 0901 	add.w	r9, r9, #1
 80039a8:	e7ee      	b.n	8003988 <_printf_float+0x2a8>
 80039aa:	bf00      	nop
 80039ac:	7fefffff 	.word	0x7fefffff
 80039b0:	080063c4 	.word	0x080063c4
 80039b4:	080063c8 	.word	0x080063c8
 80039b8:	080063d0 	.word	0x080063d0
 80039bc:	080063cc 	.word	0x080063cc
 80039c0:	080063d4 	.word	0x080063d4
 80039c4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80039c6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80039c8:	429a      	cmp	r2, r3
 80039ca:	bfa8      	it	ge
 80039cc:	461a      	movge	r2, r3
 80039ce:	2a00      	cmp	r2, #0
 80039d0:	4691      	mov	r9, r2
 80039d2:	dc37      	bgt.n	8003a44 <_printf_float+0x364>
 80039d4:	f04f 0b00 	mov.w	fp, #0
 80039d8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80039dc:	f104 021a 	add.w	r2, r4, #26
 80039e0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80039e4:	ebaa 0309 	sub.w	r3, sl, r9
 80039e8:	455b      	cmp	r3, fp
 80039ea:	dc33      	bgt.n	8003a54 <_printf_float+0x374>
 80039ec:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80039f0:	429a      	cmp	r2, r3
 80039f2:	db3b      	blt.n	8003a6c <_printf_float+0x38c>
 80039f4:	6823      	ldr	r3, [r4, #0]
 80039f6:	07da      	lsls	r2, r3, #31
 80039f8:	d438      	bmi.n	8003a6c <_printf_float+0x38c>
 80039fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80039fc:	990d      	ldr	r1, [sp, #52]	; 0x34
 80039fe:	eba3 020a 	sub.w	r2, r3, sl
 8003a02:	eba3 0901 	sub.w	r9, r3, r1
 8003a06:	4591      	cmp	r9, r2
 8003a08:	bfa8      	it	ge
 8003a0a:	4691      	movge	r9, r2
 8003a0c:	f1b9 0f00 	cmp.w	r9, #0
 8003a10:	dc34      	bgt.n	8003a7c <_printf_float+0x39c>
 8003a12:	f04f 0800 	mov.w	r8, #0
 8003a16:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003a1a:	f104 0a1a 	add.w	sl, r4, #26
 8003a1e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003a22:	1a9b      	subs	r3, r3, r2
 8003a24:	eba3 0309 	sub.w	r3, r3, r9
 8003a28:	4543      	cmp	r3, r8
 8003a2a:	f77f af7a 	ble.w	8003922 <_printf_float+0x242>
 8003a2e:	2301      	movs	r3, #1
 8003a30:	4652      	mov	r2, sl
 8003a32:	4631      	mov	r1, r6
 8003a34:	4628      	mov	r0, r5
 8003a36:	47b8      	blx	r7
 8003a38:	3001      	adds	r0, #1
 8003a3a:	f43f aeac 	beq.w	8003796 <_printf_float+0xb6>
 8003a3e:	f108 0801 	add.w	r8, r8, #1
 8003a42:	e7ec      	b.n	8003a1e <_printf_float+0x33e>
 8003a44:	4613      	mov	r3, r2
 8003a46:	4631      	mov	r1, r6
 8003a48:	4642      	mov	r2, r8
 8003a4a:	4628      	mov	r0, r5
 8003a4c:	47b8      	blx	r7
 8003a4e:	3001      	adds	r0, #1
 8003a50:	d1c0      	bne.n	80039d4 <_printf_float+0x2f4>
 8003a52:	e6a0      	b.n	8003796 <_printf_float+0xb6>
 8003a54:	2301      	movs	r3, #1
 8003a56:	4631      	mov	r1, r6
 8003a58:	4628      	mov	r0, r5
 8003a5a:	920b      	str	r2, [sp, #44]	; 0x2c
 8003a5c:	47b8      	blx	r7
 8003a5e:	3001      	adds	r0, #1
 8003a60:	f43f ae99 	beq.w	8003796 <_printf_float+0xb6>
 8003a64:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003a66:	f10b 0b01 	add.w	fp, fp, #1
 8003a6a:	e7b9      	b.n	80039e0 <_printf_float+0x300>
 8003a6c:	4631      	mov	r1, r6
 8003a6e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003a72:	4628      	mov	r0, r5
 8003a74:	47b8      	blx	r7
 8003a76:	3001      	adds	r0, #1
 8003a78:	d1bf      	bne.n	80039fa <_printf_float+0x31a>
 8003a7a:	e68c      	b.n	8003796 <_printf_float+0xb6>
 8003a7c:	464b      	mov	r3, r9
 8003a7e:	4631      	mov	r1, r6
 8003a80:	4628      	mov	r0, r5
 8003a82:	eb08 020a 	add.w	r2, r8, sl
 8003a86:	47b8      	blx	r7
 8003a88:	3001      	adds	r0, #1
 8003a8a:	d1c2      	bne.n	8003a12 <_printf_float+0x332>
 8003a8c:	e683      	b.n	8003796 <_printf_float+0xb6>
 8003a8e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003a90:	2a01      	cmp	r2, #1
 8003a92:	dc01      	bgt.n	8003a98 <_printf_float+0x3b8>
 8003a94:	07db      	lsls	r3, r3, #31
 8003a96:	d537      	bpl.n	8003b08 <_printf_float+0x428>
 8003a98:	2301      	movs	r3, #1
 8003a9a:	4642      	mov	r2, r8
 8003a9c:	4631      	mov	r1, r6
 8003a9e:	4628      	mov	r0, r5
 8003aa0:	47b8      	blx	r7
 8003aa2:	3001      	adds	r0, #1
 8003aa4:	f43f ae77 	beq.w	8003796 <_printf_float+0xb6>
 8003aa8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003aac:	4631      	mov	r1, r6
 8003aae:	4628      	mov	r0, r5
 8003ab0:	47b8      	blx	r7
 8003ab2:	3001      	adds	r0, #1
 8003ab4:	f43f ae6f 	beq.w	8003796 <_printf_float+0xb6>
 8003ab8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003abc:	2200      	movs	r2, #0
 8003abe:	2300      	movs	r3, #0
 8003ac0:	f7fc ff72 	bl	80009a8 <__aeabi_dcmpeq>
 8003ac4:	b9d8      	cbnz	r0, 8003afe <_printf_float+0x41e>
 8003ac6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003ac8:	f108 0201 	add.w	r2, r8, #1
 8003acc:	3b01      	subs	r3, #1
 8003ace:	4631      	mov	r1, r6
 8003ad0:	4628      	mov	r0, r5
 8003ad2:	47b8      	blx	r7
 8003ad4:	3001      	adds	r0, #1
 8003ad6:	d10e      	bne.n	8003af6 <_printf_float+0x416>
 8003ad8:	e65d      	b.n	8003796 <_printf_float+0xb6>
 8003ada:	2301      	movs	r3, #1
 8003adc:	464a      	mov	r2, r9
 8003ade:	4631      	mov	r1, r6
 8003ae0:	4628      	mov	r0, r5
 8003ae2:	47b8      	blx	r7
 8003ae4:	3001      	adds	r0, #1
 8003ae6:	f43f ae56 	beq.w	8003796 <_printf_float+0xb6>
 8003aea:	f108 0801 	add.w	r8, r8, #1
 8003aee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003af0:	3b01      	subs	r3, #1
 8003af2:	4543      	cmp	r3, r8
 8003af4:	dcf1      	bgt.n	8003ada <_printf_float+0x3fa>
 8003af6:	4653      	mov	r3, sl
 8003af8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003afc:	e6e0      	b.n	80038c0 <_printf_float+0x1e0>
 8003afe:	f04f 0800 	mov.w	r8, #0
 8003b02:	f104 091a 	add.w	r9, r4, #26
 8003b06:	e7f2      	b.n	8003aee <_printf_float+0x40e>
 8003b08:	2301      	movs	r3, #1
 8003b0a:	4642      	mov	r2, r8
 8003b0c:	e7df      	b.n	8003ace <_printf_float+0x3ee>
 8003b0e:	2301      	movs	r3, #1
 8003b10:	464a      	mov	r2, r9
 8003b12:	4631      	mov	r1, r6
 8003b14:	4628      	mov	r0, r5
 8003b16:	47b8      	blx	r7
 8003b18:	3001      	adds	r0, #1
 8003b1a:	f43f ae3c 	beq.w	8003796 <_printf_float+0xb6>
 8003b1e:	f108 0801 	add.w	r8, r8, #1
 8003b22:	68e3      	ldr	r3, [r4, #12]
 8003b24:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8003b26:	1a5b      	subs	r3, r3, r1
 8003b28:	4543      	cmp	r3, r8
 8003b2a:	dcf0      	bgt.n	8003b0e <_printf_float+0x42e>
 8003b2c:	e6fd      	b.n	800392a <_printf_float+0x24a>
 8003b2e:	f04f 0800 	mov.w	r8, #0
 8003b32:	f104 0919 	add.w	r9, r4, #25
 8003b36:	e7f4      	b.n	8003b22 <_printf_float+0x442>

08003b38 <_printf_common>:
 8003b38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b3c:	4616      	mov	r6, r2
 8003b3e:	4699      	mov	r9, r3
 8003b40:	688a      	ldr	r2, [r1, #8]
 8003b42:	690b      	ldr	r3, [r1, #16]
 8003b44:	4607      	mov	r7, r0
 8003b46:	4293      	cmp	r3, r2
 8003b48:	bfb8      	it	lt
 8003b4a:	4613      	movlt	r3, r2
 8003b4c:	6033      	str	r3, [r6, #0]
 8003b4e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003b52:	460c      	mov	r4, r1
 8003b54:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003b58:	b10a      	cbz	r2, 8003b5e <_printf_common+0x26>
 8003b5a:	3301      	adds	r3, #1
 8003b5c:	6033      	str	r3, [r6, #0]
 8003b5e:	6823      	ldr	r3, [r4, #0]
 8003b60:	0699      	lsls	r1, r3, #26
 8003b62:	bf42      	ittt	mi
 8003b64:	6833      	ldrmi	r3, [r6, #0]
 8003b66:	3302      	addmi	r3, #2
 8003b68:	6033      	strmi	r3, [r6, #0]
 8003b6a:	6825      	ldr	r5, [r4, #0]
 8003b6c:	f015 0506 	ands.w	r5, r5, #6
 8003b70:	d106      	bne.n	8003b80 <_printf_common+0x48>
 8003b72:	f104 0a19 	add.w	sl, r4, #25
 8003b76:	68e3      	ldr	r3, [r4, #12]
 8003b78:	6832      	ldr	r2, [r6, #0]
 8003b7a:	1a9b      	subs	r3, r3, r2
 8003b7c:	42ab      	cmp	r3, r5
 8003b7e:	dc28      	bgt.n	8003bd2 <_printf_common+0x9a>
 8003b80:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003b84:	1e13      	subs	r3, r2, #0
 8003b86:	6822      	ldr	r2, [r4, #0]
 8003b88:	bf18      	it	ne
 8003b8a:	2301      	movne	r3, #1
 8003b8c:	0692      	lsls	r2, r2, #26
 8003b8e:	d42d      	bmi.n	8003bec <_printf_common+0xb4>
 8003b90:	4649      	mov	r1, r9
 8003b92:	4638      	mov	r0, r7
 8003b94:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003b98:	47c0      	blx	r8
 8003b9a:	3001      	adds	r0, #1
 8003b9c:	d020      	beq.n	8003be0 <_printf_common+0xa8>
 8003b9e:	6823      	ldr	r3, [r4, #0]
 8003ba0:	68e5      	ldr	r5, [r4, #12]
 8003ba2:	f003 0306 	and.w	r3, r3, #6
 8003ba6:	2b04      	cmp	r3, #4
 8003ba8:	bf18      	it	ne
 8003baa:	2500      	movne	r5, #0
 8003bac:	6832      	ldr	r2, [r6, #0]
 8003bae:	f04f 0600 	mov.w	r6, #0
 8003bb2:	68a3      	ldr	r3, [r4, #8]
 8003bb4:	bf08      	it	eq
 8003bb6:	1aad      	subeq	r5, r5, r2
 8003bb8:	6922      	ldr	r2, [r4, #16]
 8003bba:	bf08      	it	eq
 8003bbc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	bfc4      	itt	gt
 8003bc4:	1a9b      	subgt	r3, r3, r2
 8003bc6:	18ed      	addgt	r5, r5, r3
 8003bc8:	341a      	adds	r4, #26
 8003bca:	42b5      	cmp	r5, r6
 8003bcc:	d11a      	bne.n	8003c04 <_printf_common+0xcc>
 8003bce:	2000      	movs	r0, #0
 8003bd0:	e008      	b.n	8003be4 <_printf_common+0xac>
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	4652      	mov	r2, sl
 8003bd6:	4649      	mov	r1, r9
 8003bd8:	4638      	mov	r0, r7
 8003bda:	47c0      	blx	r8
 8003bdc:	3001      	adds	r0, #1
 8003bde:	d103      	bne.n	8003be8 <_printf_common+0xb0>
 8003be0:	f04f 30ff 	mov.w	r0, #4294967295
 8003be4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003be8:	3501      	adds	r5, #1
 8003bea:	e7c4      	b.n	8003b76 <_printf_common+0x3e>
 8003bec:	2030      	movs	r0, #48	; 0x30
 8003bee:	18e1      	adds	r1, r4, r3
 8003bf0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003bf4:	1c5a      	adds	r2, r3, #1
 8003bf6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003bfa:	4422      	add	r2, r4
 8003bfc:	3302      	adds	r3, #2
 8003bfe:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003c02:	e7c5      	b.n	8003b90 <_printf_common+0x58>
 8003c04:	2301      	movs	r3, #1
 8003c06:	4622      	mov	r2, r4
 8003c08:	4649      	mov	r1, r9
 8003c0a:	4638      	mov	r0, r7
 8003c0c:	47c0      	blx	r8
 8003c0e:	3001      	adds	r0, #1
 8003c10:	d0e6      	beq.n	8003be0 <_printf_common+0xa8>
 8003c12:	3601      	adds	r6, #1
 8003c14:	e7d9      	b.n	8003bca <_printf_common+0x92>
	...

08003c18 <_printf_i>:
 8003c18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003c1c:	7e0f      	ldrb	r7, [r1, #24]
 8003c1e:	4691      	mov	r9, r2
 8003c20:	2f78      	cmp	r7, #120	; 0x78
 8003c22:	4680      	mov	r8, r0
 8003c24:	460c      	mov	r4, r1
 8003c26:	469a      	mov	sl, r3
 8003c28:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003c2a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003c2e:	d807      	bhi.n	8003c40 <_printf_i+0x28>
 8003c30:	2f62      	cmp	r7, #98	; 0x62
 8003c32:	d80a      	bhi.n	8003c4a <_printf_i+0x32>
 8003c34:	2f00      	cmp	r7, #0
 8003c36:	f000 80d9 	beq.w	8003dec <_printf_i+0x1d4>
 8003c3a:	2f58      	cmp	r7, #88	; 0x58
 8003c3c:	f000 80a4 	beq.w	8003d88 <_printf_i+0x170>
 8003c40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003c44:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003c48:	e03a      	b.n	8003cc0 <_printf_i+0xa8>
 8003c4a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003c4e:	2b15      	cmp	r3, #21
 8003c50:	d8f6      	bhi.n	8003c40 <_printf_i+0x28>
 8003c52:	a101      	add	r1, pc, #4	; (adr r1, 8003c58 <_printf_i+0x40>)
 8003c54:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003c58:	08003cb1 	.word	0x08003cb1
 8003c5c:	08003cc5 	.word	0x08003cc5
 8003c60:	08003c41 	.word	0x08003c41
 8003c64:	08003c41 	.word	0x08003c41
 8003c68:	08003c41 	.word	0x08003c41
 8003c6c:	08003c41 	.word	0x08003c41
 8003c70:	08003cc5 	.word	0x08003cc5
 8003c74:	08003c41 	.word	0x08003c41
 8003c78:	08003c41 	.word	0x08003c41
 8003c7c:	08003c41 	.word	0x08003c41
 8003c80:	08003c41 	.word	0x08003c41
 8003c84:	08003dd3 	.word	0x08003dd3
 8003c88:	08003cf5 	.word	0x08003cf5
 8003c8c:	08003db5 	.word	0x08003db5
 8003c90:	08003c41 	.word	0x08003c41
 8003c94:	08003c41 	.word	0x08003c41
 8003c98:	08003df5 	.word	0x08003df5
 8003c9c:	08003c41 	.word	0x08003c41
 8003ca0:	08003cf5 	.word	0x08003cf5
 8003ca4:	08003c41 	.word	0x08003c41
 8003ca8:	08003c41 	.word	0x08003c41
 8003cac:	08003dbd 	.word	0x08003dbd
 8003cb0:	682b      	ldr	r3, [r5, #0]
 8003cb2:	1d1a      	adds	r2, r3, #4
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	602a      	str	r2, [r5, #0]
 8003cb8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003cbc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	e0a4      	b.n	8003e0e <_printf_i+0x1f6>
 8003cc4:	6820      	ldr	r0, [r4, #0]
 8003cc6:	6829      	ldr	r1, [r5, #0]
 8003cc8:	0606      	lsls	r6, r0, #24
 8003cca:	f101 0304 	add.w	r3, r1, #4
 8003cce:	d50a      	bpl.n	8003ce6 <_printf_i+0xce>
 8003cd0:	680e      	ldr	r6, [r1, #0]
 8003cd2:	602b      	str	r3, [r5, #0]
 8003cd4:	2e00      	cmp	r6, #0
 8003cd6:	da03      	bge.n	8003ce0 <_printf_i+0xc8>
 8003cd8:	232d      	movs	r3, #45	; 0x2d
 8003cda:	4276      	negs	r6, r6
 8003cdc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003ce0:	230a      	movs	r3, #10
 8003ce2:	485e      	ldr	r0, [pc, #376]	; (8003e5c <_printf_i+0x244>)
 8003ce4:	e019      	b.n	8003d1a <_printf_i+0x102>
 8003ce6:	680e      	ldr	r6, [r1, #0]
 8003ce8:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003cec:	602b      	str	r3, [r5, #0]
 8003cee:	bf18      	it	ne
 8003cf0:	b236      	sxthne	r6, r6
 8003cf2:	e7ef      	b.n	8003cd4 <_printf_i+0xbc>
 8003cf4:	682b      	ldr	r3, [r5, #0]
 8003cf6:	6820      	ldr	r0, [r4, #0]
 8003cf8:	1d19      	adds	r1, r3, #4
 8003cfa:	6029      	str	r1, [r5, #0]
 8003cfc:	0601      	lsls	r1, r0, #24
 8003cfe:	d501      	bpl.n	8003d04 <_printf_i+0xec>
 8003d00:	681e      	ldr	r6, [r3, #0]
 8003d02:	e002      	b.n	8003d0a <_printf_i+0xf2>
 8003d04:	0646      	lsls	r6, r0, #25
 8003d06:	d5fb      	bpl.n	8003d00 <_printf_i+0xe8>
 8003d08:	881e      	ldrh	r6, [r3, #0]
 8003d0a:	2f6f      	cmp	r7, #111	; 0x6f
 8003d0c:	bf0c      	ite	eq
 8003d0e:	2308      	moveq	r3, #8
 8003d10:	230a      	movne	r3, #10
 8003d12:	4852      	ldr	r0, [pc, #328]	; (8003e5c <_printf_i+0x244>)
 8003d14:	2100      	movs	r1, #0
 8003d16:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003d1a:	6865      	ldr	r5, [r4, #4]
 8003d1c:	2d00      	cmp	r5, #0
 8003d1e:	bfa8      	it	ge
 8003d20:	6821      	ldrge	r1, [r4, #0]
 8003d22:	60a5      	str	r5, [r4, #8]
 8003d24:	bfa4      	itt	ge
 8003d26:	f021 0104 	bicge.w	r1, r1, #4
 8003d2a:	6021      	strge	r1, [r4, #0]
 8003d2c:	b90e      	cbnz	r6, 8003d32 <_printf_i+0x11a>
 8003d2e:	2d00      	cmp	r5, #0
 8003d30:	d04d      	beq.n	8003dce <_printf_i+0x1b6>
 8003d32:	4615      	mov	r5, r2
 8003d34:	fbb6 f1f3 	udiv	r1, r6, r3
 8003d38:	fb03 6711 	mls	r7, r3, r1, r6
 8003d3c:	5dc7      	ldrb	r7, [r0, r7]
 8003d3e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003d42:	4637      	mov	r7, r6
 8003d44:	42bb      	cmp	r3, r7
 8003d46:	460e      	mov	r6, r1
 8003d48:	d9f4      	bls.n	8003d34 <_printf_i+0x11c>
 8003d4a:	2b08      	cmp	r3, #8
 8003d4c:	d10b      	bne.n	8003d66 <_printf_i+0x14e>
 8003d4e:	6823      	ldr	r3, [r4, #0]
 8003d50:	07de      	lsls	r6, r3, #31
 8003d52:	d508      	bpl.n	8003d66 <_printf_i+0x14e>
 8003d54:	6923      	ldr	r3, [r4, #16]
 8003d56:	6861      	ldr	r1, [r4, #4]
 8003d58:	4299      	cmp	r1, r3
 8003d5a:	bfde      	ittt	le
 8003d5c:	2330      	movle	r3, #48	; 0x30
 8003d5e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003d62:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003d66:	1b52      	subs	r2, r2, r5
 8003d68:	6122      	str	r2, [r4, #16]
 8003d6a:	464b      	mov	r3, r9
 8003d6c:	4621      	mov	r1, r4
 8003d6e:	4640      	mov	r0, r8
 8003d70:	f8cd a000 	str.w	sl, [sp]
 8003d74:	aa03      	add	r2, sp, #12
 8003d76:	f7ff fedf 	bl	8003b38 <_printf_common>
 8003d7a:	3001      	adds	r0, #1
 8003d7c:	d14c      	bne.n	8003e18 <_printf_i+0x200>
 8003d7e:	f04f 30ff 	mov.w	r0, #4294967295
 8003d82:	b004      	add	sp, #16
 8003d84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d88:	4834      	ldr	r0, [pc, #208]	; (8003e5c <_printf_i+0x244>)
 8003d8a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003d8e:	6829      	ldr	r1, [r5, #0]
 8003d90:	6823      	ldr	r3, [r4, #0]
 8003d92:	f851 6b04 	ldr.w	r6, [r1], #4
 8003d96:	6029      	str	r1, [r5, #0]
 8003d98:	061d      	lsls	r5, r3, #24
 8003d9a:	d514      	bpl.n	8003dc6 <_printf_i+0x1ae>
 8003d9c:	07df      	lsls	r7, r3, #31
 8003d9e:	bf44      	itt	mi
 8003da0:	f043 0320 	orrmi.w	r3, r3, #32
 8003da4:	6023      	strmi	r3, [r4, #0]
 8003da6:	b91e      	cbnz	r6, 8003db0 <_printf_i+0x198>
 8003da8:	6823      	ldr	r3, [r4, #0]
 8003daa:	f023 0320 	bic.w	r3, r3, #32
 8003dae:	6023      	str	r3, [r4, #0]
 8003db0:	2310      	movs	r3, #16
 8003db2:	e7af      	b.n	8003d14 <_printf_i+0xfc>
 8003db4:	6823      	ldr	r3, [r4, #0]
 8003db6:	f043 0320 	orr.w	r3, r3, #32
 8003dba:	6023      	str	r3, [r4, #0]
 8003dbc:	2378      	movs	r3, #120	; 0x78
 8003dbe:	4828      	ldr	r0, [pc, #160]	; (8003e60 <_printf_i+0x248>)
 8003dc0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003dc4:	e7e3      	b.n	8003d8e <_printf_i+0x176>
 8003dc6:	0659      	lsls	r1, r3, #25
 8003dc8:	bf48      	it	mi
 8003dca:	b2b6      	uxthmi	r6, r6
 8003dcc:	e7e6      	b.n	8003d9c <_printf_i+0x184>
 8003dce:	4615      	mov	r5, r2
 8003dd0:	e7bb      	b.n	8003d4a <_printf_i+0x132>
 8003dd2:	682b      	ldr	r3, [r5, #0]
 8003dd4:	6826      	ldr	r6, [r4, #0]
 8003dd6:	1d18      	adds	r0, r3, #4
 8003dd8:	6961      	ldr	r1, [r4, #20]
 8003dda:	6028      	str	r0, [r5, #0]
 8003ddc:	0635      	lsls	r5, r6, #24
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	d501      	bpl.n	8003de6 <_printf_i+0x1ce>
 8003de2:	6019      	str	r1, [r3, #0]
 8003de4:	e002      	b.n	8003dec <_printf_i+0x1d4>
 8003de6:	0670      	lsls	r0, r6, #25
 8003de8:	d5fb      	bpl.n	8003de2 <_printf_i+0x1ca>
 8003dea:	8019      	strh	r1, [r3, #0]
 8003dec:	2300      	movs	r3, #0
 8003dee:	4615      	mov	r5, r2
 8003df0:	6123      	str	r3, [r4, #16]
 8003df2:	e7ba      	b.n	8003d6a <_printf_i+0x152>
 8003df4:	682b      	ldr	r3, [r5, #0]
 8003df6:	2100      	movs	r1, #0
 8003df8:	1d1a      	adds	r2, r3, #4
 8003dfa:	602a      	str	r2, [r5, #0]
 8003dfc:	681d      	ldr	r5, [r3, #0]
 8003dfe:	6862      	ldr	r2, [r4, #4]
 8003e00:	4628      	mov	r0, r5
 8003e02:	f000 fed7 	bl	8004bb4 <memchr>
 8003e06:	b108      	cbz	r0, 8003e0c <_printf_i+0x1f4>
 8003e08:	1b40      	subs	r0, r0, r5
 8003e0a:	6060      	str	r0, [r4, #4]
 8003e0c:	6863      	ldr	r3, [r4, #4]
 8003e0e:	6123      	str	r3, [r4, #16]
 8003e10:	2300      	movs	r3, #0
 8003e12:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003e16:	e7a8      	b.n	8003d6a <_printf_i+0x152>
 8003e18:	462a      	mov	r2, r5
 8003e1a:	4649      	mov	r1, r9
 8003e1c:	4640      	mov	r0, r8
 8003e1e:	6923      	ldr	r3, [r4, #16]
 8003e20:	47d0      	blx	sl
 8003e22:	3001      	adds	r0, #1
 8003e24:	d0ab      	beq.n	8003d7e <_printf_i+0x166>
 8003e26:	6823      	ldr	r3, [r4, #0]
 8003e28:	079b      	lsls	r3, r3, #30
 8003e2a:	d413      	bmi.n	8003e54 <_printf_i+0x23c>
 8003e2c:	68e0      	ldr	r0, [r4, #12]
 8003e2e:	9b03      	ldr	r3, [sp, #12]
 8003e30:	4298      	cmp	r0, r3
 8003e32:	bfb8      	it	lt
 8003e34:	4618      	movlt	r0, r3
 8003e36:	e7a4      	b.n	8003d82 <_printf_i+0x16a>
 8003e38:	2301      	movs	r3, #1
 8003e3a:	4632      	mov	r2, r6
 8003e3c:	4649      	mov	r1, r9
 8003e3e:	4640      	mov	r0, r8
 8003e40:	47d0      	blx	sl
 8003e42:	3001      	adds	r0, #1
 8003e44:	d09b      	beq.n	8003d7e <_printf_i+0x166>
 8003e46:	3501      	adds	r5, #1
 8003e48:	68e3      	ldr	r3, [r4, #12]
 8003e4a:	9903      	ldr	r1, [sp, #12]
 8003e4c:	1a5b      	subs	r3, r3, r1
 8003e4e:	42ab      	cmp	r3, r5
 8003e50:	dcf2      	bgt.n	8003e38 <_printf_i+0x220>
 8003e52:	e7eb      	b.n	8003e2c <_printf_i+0x214>
 8003e54:	2500      	movs	r5, #0
 8003e56:	f104 0619 	add.w	r6, r4, #25
 8003e5a:	e7f5      	b.n	8003e48 <_printf_i+0x230>
 8003e5c:	080063d6 	.word	0x080063d6
 8003e60:	080063e7 	.word	0x080063e7

08003e64 <siprintf>:
 8003e64:	b40e      	push	{r1, r2, r3}
 8003e66:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003e6a:	b500      	push	{lr}
 8003e6c:	b09c      	sub	sp, #112	; 0x70
 8003e6e:	ab1d      	add	r3, sp, #116	; 0x74
 8003e70:	9002      	str	r0, [sp, #8]
 8003e72:	9006      	str	r0, [sp, #24]
 8003e74:	9107      	str	r1, [sp, #28]
 8003e76:	9104      	str	r1, [sp, #16]
 8003e78:	4808      	ldr	r0, [pc, #32]	; (8003e9c <siprintf+0x38>)
 8003e7a:	4909      	ldr	r1, [pc, #36]	; (8003ea0 <siprintf+0x3c>)
 8003e7c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003e80:	9105      	str	r1, [sp, #20]
 8003e82:	6800      	ldr	r0, [r0, #0]
 8003e84:	a902      	add	r1, sp, #8
 8003e86:	9301      	str	r3, [sp, #4]
 8003e88:	f001 fb7e 	bl	8005588 <_svfiprintf_r>
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	9b02      	ldr	r3, [sp, #8]
 8003e90:	701a      	strb	r2, [r3, #0]
 8003e92:	b01c      	add	sp, #112	; 0x70
 8003e94:	f85d eb04 	ldr.w	lr, [sp], #4
 8003e98:	b003      	add	sp, #12
 8003e9a:	4770      	bx	lr
 8003e9c:	2000000c 	.word	0x2000000c
 8003ea0:	ffff0208 	.word	0xffff0208

08003ea4 <quorem>:
 8003ea4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ea8:	6903      	ldr	r3, [r0, #16]
 8003eaa:	690c      	ldr	r4, [r1, #16]
 8003eac:	4607      	mov	r7, r0
 8003eae:	42a3      	cmp	r3, r4
 8003eb0:	f2c0 8082 	blt.w	8003fb8 <quorem+0x114>
 8003eb4:	3c01      	subs	r4, #1
 8003eb6:	f100 0514 	add.w	r5, r0, #20
 8003eba:	f101 0814 	add.w	r8, r1, #20
 8003ebe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003ec2:	9301      	str	r3, [sp, #4]
 8003ec4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8003ec8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003ecc:	3301      	adds	r3, #1
 8003ece:	429a      	cmp	r2, r3
 8003ed0:	fbb2 f6f3 	udiv	r6, r2, r3
 8003ed4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8003ed8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8003edc:	d331      	bcc.n	8003f42 <quorem+0x9e>
 8003ede:	f04f 0e00 	mov.w	lr, #0
 8003ee2:	4640      	mov	r0, r8
 8003ee4:	46ac      	mov	ip, r5
 8003ee6:	46f2      	mov	sl, lr
 8003ee8:	f850 2b04 	ldr.w	r2, [r0], #4
 8003eec:	b293      	uxth	r3, r2
 8003eee:	fb06 e303 	mla	r3, r6, r3, lr
 8003ef2:	0c12      	lsrs	r2, r2, #16
 8003ef4:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8003ef8:	b29b      	uxth	r3, r3
 8003efa:	fb06 e202 	mla	r2, r6, r2, lr
 8003efe:	ebaa 0303 	sub.w	r3, sl, r3
 8003f02:	f8dc a000 	ldr.w	sl, [ip]
 8003f06:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8003f0a:	fa1f fa8a 	uxth.w	sl, sl
 8003f0e:	4453      	add	r3, sl
 8003f10:	f8dc a000 	ldr.w	sl, [ip]
 8003f14:	b292      	uxth	r2, r2
 8003f16:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8003f1a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003f1e:	b29b      	uxth	r3, r3
 8003f20:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003f24:	4581      	cmp	r9, r0
 8003f26:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8003f2a:	f84c 3b04 	str.w	r3, [ip], #4
 8003f2e:	d2db      	bcs.n	8003ee8 <quorem+0x44>
 8003f30:	f855 300b 	ldr.w	r3, [r5, fp]
 8003f34:	b92b      	cbnz	r3, 8003f42 <quorem+0x9e>
 8003f36:	9b01      	ldr	r3, [sp, #4]
 8003f38:	3b04      	subs	r3, #4
 8003f3a:	429d      	cmp	r5, r3
 8003f3c:	461a      	mov	r2, r3
 8003f3e:	d32f      	bcc.n	8003fa0 <quorem+0xfc>
 8003f40:	613c      	str	r4, [r7, #16]
 8003f42:	4638      	mov	r0, r7
 8003f44:	f001 f8d0 	bl	80050e8 <__mcmp>
 8003f48:	2800      	cmp	r0, #0
 8003f4a:	db25      	blt.n	8003f98 <quorem+0xf4>
 8003f4c:	4628      	mov	r0, r5
 8003f4e:	f04f 0c00 	mov.w	ip, #0
 8003f52:	3601      	adds	r6, #1
 8003f54:	f858 1b04 	ldr.w	r1, [r8], #4
 8003f58:	f8d0 e000 	ldr.w	lr, [r0]
 8003f5c:	b28b      	uxth	r3, r1
 8003f5e:	ebac 0303 	sub.w	r3, ip, r3
 8003f62:	fa1f f28e 	uxth.w	r2, lr
 8003f66:	4413      	add	r3, r2
 8003f68:	0c0a      	lsrs	r2, r1, #16
 8003f6a:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8003f6e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003f72:	b29b      	uxth	r3, r3
 8003f74:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003f78:	45c1      	cmp	r9, r8
 8003f7a:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8003f7e:	f840 3b04 	str.w	r3, [r0], #4
 8003f82:	d2e7      	bcs.n	8003f54 <quorem+0xb0>
 8003f84:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003f88:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003f8c:	b922      	cbnz	r2, 8003f98 <quorem+0xf4>
 8003f8e:	3b04      	subs	r3, #4
 8003f90:	429d      	cmp	r5, r3
 8003f92:	461a      	mov	r2, r3
 8003f94:	d30a      	bcc.n	8003fac <quorem+0x108>
 8003f96:	613c      	str	r4, [r7, #16]
 8003f98:	4630      	mov	r0, r6
 8003f9a:	b003      	add	sp, #12
 8003f9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003fa0:	6812      	ldr	r2, [r2, #0]
 8003fa2:	3b04      	subs	r3, #4
 8003fa4:	2a00      	cmp	r2, #0
 8003fa6:	d1cb      	bne.n	8003f40 <quorem+0x9c>
 8003fa8:	3c01      	subs	r4, #1
 8003faa:	e7c6      	b.n	8003f3a <quorem+0x96>
 8003fac:	6812      	ldr	r2, [r2, #0]
 8003fae:	3b04      	subs	r3, #4
 8003fb0:	2a00      	cmp	r2, #0
 8003fb2:	d1f0      	bne.n	8003f96 <quorem+0xf2>
 8003fb4:	3c01      	subs	r4, #1
 8003fb6:	e7eb      	b.n	8003f90 <quorem+0xec>
 8003fb8:	2000      	movs	r0, #0
 8003fba:	e7ee      	b.n	8003f9a <quorem+0xf6>
 8003fbc:	0000      	movs	r0, r0
	...

08003fc0 <_dtoa_r>:
 8003fc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fc4:	4616      	mov	r6, r2
 8003fc6:	461f      	mov	r7, r3
 8003fc8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8003fca:	b099      	sub	sp, #100	; 0x64
 8003fcc:	4605      	mov	r5, r0
 8003fce:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8003fd2:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8003fd6:	b974      	cbnz	r4, 8003ff6 <_dtoa_r+0x36>
 8003fd8:	2010      	movs	r0, #16
 8003fda:	f000 fde3 	bl	8004ba4 <malloc>
 8003fde:	4602      	mov	r2, r0
 8003fe0:	6268      	str	r0, [r5, #36]	; 0x24
 8003fe2:	b920      	cbnz	r0, 8003fee <_dtoa_r+0x2e>
 8003fe4:	21ea      	movs	r1, #234	; 0xea
 8003fe6:	4ba8      	ldr	r3, [pc, #672]	; (8004288 <_dtoa_r+0x2c8>)
 8003fe8:	48a8      	ldr	r0, [pc, #672]	; (800428c <_dtoa_r+0x2cc>)
 8003fea:	f001 fbdd 	bl	80057a8 <__assert_func>
 8003fee:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8003ff2:	6004      	str	r4, [r0, #0]
 8003ff4:	60c4      	str	r4, [r0, #12]
 8003ff6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003ff8:	6819      	ldr	r1, [r3, #0]
 8003ffa:	b151      	cbz	r1, 8004012 <_dtoa_r+0x52>
 8003ffc:	685a      	ldr	r2, [r3, #4]
 8003ffe:	2301      	movs	r3, #1
 8004000:	4093      	lsls	r3, r2
 8004002:	604a      	str	r2, [r1, #4]
 8004004:	608b      	str	r3, [r1, #8]
 8004006:	4628      	mov	r0, r5
 8004008:	f000 fe30 	bl	8004c6c <_Bfree>
 800400c:	2200      	movs	r2, #0
 800400e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004010:	601a      	str	r2, [r3, #0]
 8004012:	1e3b      	subs	r3, r7, #0
 8004014:	bfaf      	iteee	ge
 8004016:	2300      	movge	r3, #0
 8004018:	2201      	movlt	r2, #1
 800401a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800401e:	9305      	strlt	r3, [sp, #20]
 8004020:	bfa8      	it	ge
 8004022:	f8c8 3000 	strge.w	r3, [r8]
 8004026:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800402a:	4b99      	ldr	r3, [pc, #612]	; (8004290 <_dtoa_r+0x2d0>)
 800402c:	bfb8      	it	lt
 800402e:	f8c8 2000 	strlt.w	r2, [r8]
 8004032:	ea33 0309 	bics.w	r3, r3, r9
 8004036:	d119      	bne.n	800406c <_dtoa_r+0xac>
 8004038:	f242 730f 	movw	r3, #9999	; 0x270f
 800403c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800403e:	6013      	str	r3, [r2, #0]
 8004040:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004044:	4333      	orrs	r3, r6
 8004046:	f000 857f 	beq.w	8004b48 <_dtoa_r+0xb88>
 800404a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800404c:	b953      	cbnz	r3, 8004064 <_dtoa_r+0xa4>
 800404e:	4b91      	ldr	r3, [pc, #580]	; (8004294 <_dtoa_r+0x2d4>)
 8004050:	e022      	b.n	8004098 <_dtoa_r+0xd8>
 8004052:	4b91      	ldr	r3, [pc, #580]	; (8004298 <_dtoa_r+0x2d8>)
 8004054:	9303      	str	r3, [sp, #12]
 8004056:	3308      	adds	r3, #8
 8004058:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800405a:	6013      	str	r3, [r2, #0]
 800405c:	9803      	ldr	r0, [sp, #12]
 800405e:	b019      	add	sp, #100	; 0x64
 8004060:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004064:	4b8b      	ldr	r3, [pc, #556]	; (8004294 <_dtoa_r+0x2d4>)
 8004066:	9303      	str	r3, [sp, #12]
 8004068:	3303      	adds	r3, #3
 800406a:	e7f5      	b.n	8004058 <_dtoa_r+0x98>
 800406c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004070:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8004074:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004078:	2200      	movs	r2, #0
 800407a:	2300      	movs	r3, #0
 800407c:	f7fc fc94 	bl	80009a8 <__aeabi_dcmpeq>
 8004080:	4680      	mov	r8, r0
 8004082:	b158      	cbz	r0, 800409c <_dtoa_r+0xdc>
 8004084:	2301      	movs	r3, #1
 8004086:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004088:	6013      	str	r3, [r2, #0]
 800408a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800408c:	2b00      	cmp	r3, #0
 800408e:	f000 8558 	beq.w	8004b42 <_dtoa_r+0xb82>
 8004092:	4882      	ldr	r0, [pc, #520]	; (800429c <_dtoa_r+0x2dc>)
 8004094:	6018      	str	r0, [r3, #0]
 8004096:	1e43      	subs	r3, r0, #1
 8004098:	9303      	str	r3, [sp, #12]
 800409a:	e7df      	b.n	800405c <_dtoa_r+0x9c>
 800409c:	ab16      	add	r3, sp, #88	; 0x58
 800409e:	9301      	str	r3, [sp, #4]
 80040a0:	ab17      	add	r3, sp, #92	; 0x5c
 80040a2:	9300      	str	r3, [sp, #0]
 80040a4:	4628      	mov	r0, r5
 80040a6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80040aa:	f001 f8c5 	bl	8005238 <__d2b>
 80040ae:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80040b2:	4683      	mov	fp, r0
 80040b4:	2c00      	cmp	r4, #0
 80040b6:	d07f      	beq.n	80041b8 <_dtoa_r+0x1f8>
 80040b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80040bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80040be:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80040c2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80040c6:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80040ca:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80040ce:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80040d2:	2200      	movs	r2, #0
 80040d4:	4b72      	ldr	r3, [pc, #456]	; (80042a0 <_dtoa_r+0x2e0>)
 80040d6:	f7fc f847 	bl	8000168 <__aeabi_dsub>
 80040da:	a365      	add	r3, pc, #404	; (adr r3, 8004270 <_dtoa_r+0x2b0>)
 80040dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040e0:	f7fc f9fa 	bl	80004d8 <__aeabi_dmul>
 80040e4:	a364      	add	r3, pc, #400	; (adr r3, 8004278 <_dtoa_r+0x2b8>)
 80040e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040ea:	f7fc f83f 	bl	800016c <__adddf3>
 80040ee:	4606      	mov	r6, r0
 80040f0:	4620      	mov	r0, r4
 80040f2:	460f      	mov	r7, r1
 80040f4:	f7fc f986 	bl	8000404 <__aeabi_i2d>
 80040f8:	a361      	add	r3, pc, #388	; (adr r3, 8004280 <_dtoa_r+0x2c0>)
 80040fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040fe:	f7fc f9eb 	bl	80004d8 <__aeabi_dmul>
 8004102:	4602      	mov	r2, r0
 8004104:	460b      	mov	r3, r1
 8004106:	4630      	mov	r0, r6
 8004108:	4639      	mov	r1, r7
 800410a:	f7fc f82f 	bl	800016c <__adddf3>
 800410e:	4606      	mov	r6, r0
 8004110:	460f      	mov	r7, r1
 8004112:	f7fc fc91 	bl	8000a38 <__aeabi_d2iz>
 8004116:	2200      	movs	r2, #0
 8004118:	4682      	mov	sl, r0
 800411a:	2300      	movs	r3, #0
 800411c:	4630      	mov	r0, r6
 800411e:	4639      	mov	r1, r7
 8004120:	f7fc fc4c 	bl	80009bc <__aeabi_dcmplt>
 8004124:	b148      	cbz	r0, 800413a <_dtoa_r+0x17a>
 8004126:	4650      	mov	r0, sl
 8004128:	f7fc f96c 	bl	8000404 <__aeabi_i2d>
 800412c:	4632      	mov	r2, r6
 800412e:	463b      	mov	r3, r7
 8004130:	f7fc fc3a 	bl	80009a8 <__aeabi_dcmpeq>
 8004134:	b908      	cbnz	r0, 800413a <_dtoa_r+0x17a>
 8004136:	f10a 3aff 	add.w	sl, sl, #4294967295
 800413a:	f1ba 0f16 	cmp.w	sl, #22
 800413e:	d858      	bhi.n	80041f2 <_dtoa_r+0x232>
 8004140:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004144:	4b57      	ldr	r3, [pc, #348]	; (80042a4 <_dtoa_r+0x2e4>)
 8004146:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800414a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800414e:	f7fc fc35 	bl	80009bc <__aeabi_dcmplt>
 8004152:	2800      	cmp	r0, #0
 8004154:	d04f      	beq.n	80041f6 <_dtoa_r+0x236>
 8004156:	2300      	movs	r3, #0
 8004158:	f10a 3aff 	add.w	sl, sl, #4294967295
 800415c:	930f      	str	r3, [sp, #60]	; 0x3c
 800415e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004160:	1b1c      	subs	r4, r3, r4
 8004162:	1e63      	subs	r3, r4, #1
 8004164:	9309      	str	r3, [sp, #36]	; 0x24
 8004166:	bf49      	itett	mi
 8004168:	f1c4 0301 	rsbmi	r3, r4, #1
 800416c:	2300      	movpl	r3, #0
 800416e:	9306      	strmi	r3, [sp, #24]
 8004170:	2300      	movmi	r3, #0
 8004172:	bf54      	ite	pl
 8004174:	9306      	strpl	r3, [sp, #24]
 8004176:	9309      	strmi	r3, [sp, #36]	; 0x24
 8004178:	f1ba 0f00 	cmp.w	sl, #0
 800417c:	db3d      	blt.n	80041fa <_dtoa_r+0x23a>
 800417e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004180:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8004184:	4453      	add	r3, sl
 8004186:	9309      	str	r3, [sp, #36]	; 0x24
 8004188:	2300      	movs	r3, #0
 800418a:	930a      	str	r3, [sp, #40]	; 0x28
 800418c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800418e:	2b09      	cmp	r3, #9
 8004190:	f200 808c 	bhi.w	80042ac <_dtoa_r+0x2ec>
 8004194:	2b05      	cmp	r3, #5
 8004196:	bfc4      	itt	gt
 8004198:	3b04      	subgt	r3, #4
 800419a:	9322      	strgt	r3, [sp, #136]	; 0x88
 800419c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800419e:	bfc8      	it	gt
 80041a0:	2400      	movgt	r4, #0
 80041a2:	f1a3 0302 	sub.w	r3, r3, #2
 80041a6:	bfd8      	it	le
 80041a8:	2401      	movle	r4, #1
 80041aa:	2b03      	cmp	r3, #3
 80041ac:	f200 808a 	bhi.w	80042c4 <_dtoa_r+0x304>
 80041b0:	e8df f003 	tbb	[pc, r3]
 80041b4:	5b4d4f2d 	.word	0x5b4d4f2d
 80041b8:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80041bc:	441c      	add	r4, r3
 80041be:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80041c2:	2b20      	cmp	r3, #32
 80041c4:	bfc3      	ittte	gt
 80041c6:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80041ca:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 80041ce:	fa09 f303 	lslgt.w	r3, r9, r3
 80041d2:	f1c3 0320 	rsble	r3, r3, #32
 80041d6:	bfc6      	itte	gt
 80041d8:	fa26 f000 	lsrgt.w	r0, r6, r0
 80041dc:	4318      	orrgt	r0, r3
 80041de:	fa06 f003 	lslle.w	r0, r6, r3
 80041e2:	f7fc f8ff 	bl	80003e4 <__aeabi_ui2d>
 80041e6:	2301      	movs	r3, #1
 80041e8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80041ec:	3c01      	subs	r4, #1
 80041ee:	9313      	str	r3, [sp, #76]	; 0x4c
 80041f0:	e76f      	b.n	80040d2 <_dtoa_r+0x112>
 80041f2:	2301      	movs	r3, #1
 80041f4:	e7b2      	b.n	800415c <_dtoa_r+0x19c>
 80041f6:	900f      	str	r0, [sp, #60]	; 0x3c
 80041f8:	e7b1      	b.n	800415e <_dtoa_r+0x19e>
 80041fa:	9b06      	ldr	r3, [sp, #24]
 80041fc:	eba3 030a 	sub.w	r3, r3, sl
 8004200:	9306      	str	r3, [sp, #24]
 8004202:	f1ca 0300 	rsb	r3, sl, #0
 8004206:	930a      	str	r3, [sp, #40]	; 0x28
 8004208:	2300      	movs	r3, #0
 800420a:	930e      	str	r3, [sp, #56]	; 0x38
 800420c:	e7be      	b.n	800418c <_dtoa_r+0x1cc>
 800420e:	2300      	movs	r3, #0
 8004210:	930b      	str	r3, [sp, #44]	; 0x2c
 8004212:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004214:	2b00      	cmp	r3, #0
 8004216:	dc58      	bgt.n	80042ca <_dtoa_r+0x30a>
 8004218:	f04f 0901 	mov.w	r9, #1
 800421c:	464b      	mov	r3, r9
 800421e:	f8cd 9020 	str.w	r9, [sp, #32]
 8004222:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8004226:	2200      	movs	r2, #0
 8004228:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800422a:	6042      	str	r2, [r0, #4]
 800422c:	2204      	movs	r2, #4
 800422e:	f102 0614 	add.w	r6, r2, #20
 8004232:	429e      	cmp	r6, r3
 8004234:	6841      	ldr	r1, [r0, #4]
 8004236:	d94e      	bls.n	80042d6 <_dtoa_r+0x316>
 8004238:	4628      	mov	r0, r5
 800423a:	f000 fcd7 	bl	8004bec <_Balloc>
 800423e:	9003      	str	r0, [sp, #12]
 8004240:	2800      	cmp	r0, #0
 8004242:	d14c      	bne.n	80042de <_dtoa_r+0x31e>
 8004244:	4602      	mov	r2, r0
 8004246:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800424a:	4b17      	ldr	r3, [pc, #92]	; (80042a8 <_dtoa_r+0x2e8>)
 800424c:	e6cc      	b.n	8003fe8 <_dtoa_r+0x28>
 800424e:	2301      	movs	r3, #1
 8004250:	e7de      	b.n	8004210 <_dtoa_r+0x250>
 8004252:	2300      	movs	r3, #0
 8004254:	930b      	str	r3, [sp, #44]	; 0x2c
 8004256:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004258:	eb0a 0903 	add.w	r9, sl, r3
 800425c:	f109 0301 	add.w	r3, r9, #1
 8004260:	2b01      	cmp	r3, #1
 8004262:	9308      	str	r3, [sp, #32]
 8004264:	bfb8      	it	lt
 8004266:	2301      	movlt	r3, #1
 8004268:	e7dd      	b.n	8004226 <_dtoa_r+0x266>
 800426a:	2301      	movs	r3, #1
 800426c:	e7f2      	b.n	8004254 <_dtoa_r+0x294>
 800426e:	bf00      	nop
 8004270:	636f4361 	.word	0x636f4361
 8004274:	3fd287a7 	.word	0x3fd287a7
 8004278:	8b60c8b3 	.word	0x8b60c8b3
 800427c:	3fc68a28 	.word	0x3fc68a28
 8004280:	509f79fb 	.word	0x509f79fb
 8004284:	3fd34413 	.word	0x3fd34413
 8004288:	08006405 	.word	0x08006405
 800428c:	0800641c 	.word	0x0800641c
 8004290:	7ff00000 	.word	0x7ff00000
 8004294:	08006401 	.word	0x08006401
 8004298:	080063f8 	.word	0x080063f8
 800429c:	080063d5 	.word	0x080063d5
 80042a0:	3ff80000 	.word	0x3ff80000
 80042a4:	08006510 	.word	0x08006510
 80042a8:	08006477 	.word	0x08006477
 80042ac:	2401      	movs	r4, #1
 80042ae:	2300      	movs	r3, #0
 80042b0:	940b      	str	r4, [sp, #44]	; 0x2c
 80042b2:	9322      	str	r3, [sp, #136]	; 0x88
 80042b4:	f04f 39ff 	mov.w	r9, #4294967295
 80042b8:	2200      	movs	r2, #0
 80042ba:	2312      	movs	r3, #18
 80042bc:	f8cd 9020 	str.w	r9, [sp, #32]
 80042c0:	9223      	str	r2, [sp, #140]	; 0x8c
 80042c2:	e7b0      	b.n	8004226 <_dtoa_r+0x266>
 80042c4:	2301      	movs	r3, #1
 80042c6:	930b      	str	r3, [sp, #44]	; 0x2c
 80042c8:	e7f4      	b.n	80042b4 <_dtoa_r+0x2f4>
 80042ca:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 80042ce:	464b      	mov	r3, r9
 80042d0:	f8cd 9020 	str.w	r9, [sp, #32]
 80042d4:	e7a7      	b.n	8004226 <_dtoa_r+0x266>
 80042d6:	3101      	adds	r1, #1
 80042d8:	6041      	str	r1, [r0, #4]
 80042da:	0052      	lsls	r2, r2, #1
 80042dc:	e7a7      	b.n	800422e <_dtoa_r+0x26e>
 80042de:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80042e0:	9a03      	ldr	r2, [sp, #12]
 80042e2:	601a      	str	r2, [r3, #0]
 80042e4:	9b08      	ldr	r3, [sp, #32]
 80042e6:	2b0e      	cmp	r3, #14
 80042e8:	f200 80a8 	bhi.w	800443c <_dtoa_r+0x47c>
 80042ec:	2c00      	cmp	r4, #0
 80042ee:	f000 80a5 	beq.w	800443c <_dtoa_r+0x47c>
 80042f2:	f1ba 0f00 	cmp.w	sl, #0
 80042f6:	dd34      	ble.n	8004362 <_dtoa_r+0x3a2>
 80042f8:	4a9a      	ldr	r2, [pc, #616]	; (8004564 <_dtoa_r+0x5a4>)
 80042fa:	f00a 030f 	and.w	r3, sl, #15
 80042fe:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004302:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8004306:	e9d3 3400 	ldrd	r3, r4, [r3]
 800430a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800430e:	ea4f 142a 	mov.w	r4, sl, asr #4
 8004312:	d016      	beq.n	8004342 <_dtoa_r+0x382>
 8004314:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004318:	4b93      	ldr	r3, [pc, #588]	; (8004568 <_dtoa_r+0x5a8>)
 800431a:	2703      	movs	r7, #3
 800431c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004320:	f7fc fa04 	bl	800072c <__aeabi_ddiv>
 8004324:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004328:	f004 040f 	and.w	r4, r4, #15
 800432c:	4e8e      	ldr	r6, [pc, #568]	; (8004568 <_dtoa_r+0x5a8>)
 800432e:	b954      	cbnz	r4, 8004346 <_dtoa_r+0x386>
 8004330:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004334:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004338:	f7fc f9f8 	bl	800072c <__aeabi_ddiv>
 800433c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004340:	e029      	b.n	8004396 <_dtoa_r+0x3d6>
 8004342:	2702      	movs	r7, #2
 8004344:	e7f2      	b.n	800432c <_dtoa_r+0x36c>
 8004346:	07e1      	lsls	r1, r4, #31
 8004348:	d508      	bpl.n	800435c <_dtoa_r+0x39c>
 800434a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800434e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004352:	f7fc f8c1 	bl	80004d8 <__aeabi_dmul>
 8004356:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800435a:	3701      	adds	r7, #1
 800435c:	1064      	asrs	r4, r4, #1
 800435e:	3608      	adds	r6, #8
 8004360:	e7e5      	b.n	800432e <_dtoa_r+0x36e>
 8004362:	f000 80a5 	beq.w	80044b0 <_dtoa_r+0x4f0>
 8004366:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800436a:	f1ca 0400 	rsb	r4, sl, #0
 800436e:	4b7d      	ldr	r3, [pc, #500]	; (8004564 <_dtoa_r+0x5a4>)
 8004370:	f004 020f 	and.w	r2, r4, #15
 8004374:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800437c:	f7fc f8ac 	bl	80004d8 <__aeabi_dmul>
 8004380:	2702      	movs	r7, #2
 8004382:	2300      	movs	r3, #0
 8004384:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004388:	4e77      	ldr	r6, [pc, #476]	; (8004568 <_dtoa_r+0x5a8>)
 800438a:	1124      	asrs	r4, r4, #4
 800438c:	2c00      	cmp	r4, #0
 800438e:	f040 8084 	bne.w	800449a <_dtoa_r+0x4da>
 8004392:	2b00      	cmp	r3, #0
 8004394:	d1d2      	bne.n	800433c <_dtoa_r+0x37c>
 8004396:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004398:	2b00      	cmp	r3, #0
 800439a:	f000 808b 	beq.w	80044b4 <_dtoa_r+0x4f4>
 800439e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80043a2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80043a6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80043aa:	2200      	movs	r2, #0
 80043ac:	4b6f      	ldr	r3, [pc, #444]	; (800456c <_dtoa_r+0x5ac>)
 80043ae:	f7fc fb05 	bl	80009bc <__aeabi_dcmplt>
 80043b2:	2800      	cmp	r0, #0
 80043b4:	d07e      	beq.n	80044b4 <_dtoa_r+0x4f4>
 80043b6:	9b08      	ldr	r3, [sp, #32]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d07b      	beq.n	80044b4 <_dtoa_r+0x4f4>
 80043bc:	f1b9 0f00 	cmp.w	r9, #0
 80043c0:	dd38      	ble.n	8004434 <_dtoa_r+0x474>
 80043c2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80043c6:	2200      	movs	r2, #0
 80043c8:	4b69      	ldr	r3, [pc, #420]	; (8004570 <_dtoa_r+0x5b0>)
 80043ca:	f7fc f885 	bl	80004d8 <__aeabi_dmul>
 80043ce:	464c      	mov	r4, r9
 80043d0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80043d4:	f10a 38ff 	add.w	r8, sl, #4294967295
 80043d8:	3701      	adds	r7, #1
 80043da:	4638      	mov	r0, r7
 80043dc:	f7fc f812 	bl	8000404 <__aeabi_i2d>
 80043e0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80043e4:	f7fc f878 	bl	80004d8 <__aeabi_dmul>
 80043e8:	2200      	movs	r2, #0
 80043ea:	4b62      	ldr	r3, [pc, #392]	; (8004574 <_dtoa_r+0x5b4>)
 80043ec:	f7fb febe 	bl	800016c <__adddf3>
 80043f0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80043f4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80043f8:	9611      	str	r6, [sp, #68]	; 0x44
 80043fa:	2c00      	cmp	r4, #0
 80043fc:	d15d      	bne.n	80044ba <_dtoa_r+0x4fa>
 80043fe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004402:	2200      	movs	r2, #0
 8004404:	4b5c      	ldr	r3, [pc, #368]	; (8004578 <_dtoa_r+0x5b8>)
 8004406:	f7fb feaf 	bl	8000168 <__aeabi_dsub>
 800440a:	4602      	mov	r2, r0
 800440c:	460b      	mov	r3, r1
 800440e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004412:	4633      	mov	r3, r6
 8004414:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004416:	f7fc faef 	bl	80009f8 <__aeabi_dcmpgt>
 800441a:	2800      	cmp	r0, #0
 800441c:	f040 829c 	bne.w	8004958 <_dtoa_r+0x998>
 8004420:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004424:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004426:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800442a:	f7fc fac7 	bl	80009bc <__aeabi_dcmplt>
 800442e:	2800      	cmp	r0, #0
 8004430:	f040 8290 	bne.w	8004954 <_dtoa_r+0x994>
 8004434:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8004438:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800443c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800443e:	2b00      	cmp	r3, #0
 8004440:	f2c0 8152 	blt.w	80046e8 <_dtoa_r+0x728>
 8004444:	f1ba 0f0e 	cmp.w	sl, #14
 8004448:	f300 814e 	bgt.w	80046e8 <_dtoa_r+0x728>
 800444c:	4b45      	ldr	r3, [pc, #276]	; (8004564 <_dtoa_r+0x5a4>)
 800444e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004452:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004456:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800445a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800445c:	2b00      	cmp	r3, #0
 800445e:	f280 80db 	bge.w	8004618 <_dtoa_r+0x658>
 8004462:	9b08      	ldr	r3, [sp, #32]
 8004464:	2b00      	cmp	r3, #0
 8004466:	f300 80d7 	bgt.w	8004618 <_dtoa_r+0x658>
 800446a:	f040 8272 	bne.w	8004952 <_dtoa_r+0x992>
 800446e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004472:	2200      	movs	r2, #0
 8004474:	4b40      	ldr	r3, [pc, #256]	; (8004578 <_dtoa_r+0x5b8>)
 8004476:	f7fc f82f 	bl	80004d8 <__aeabi_dmul>
 800447a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800447e:	f7fc fab1 	bl	80009e4 <__aeabi_dcmpge>
 8004482:	9c08      	ldr	r4, [sp, #32]
 8004484:	4626      	mov	r6, r4
 8004486:	2800      	cmp	r0, #0
 8004488:	f040 8248 	bne.w	800491c <_dtoa_r+0x95c>
 800448c:	2331      	movs	r3, #49	; 0x31
 800448e:	9f03      	ldr	r7, [sp, #12]
 8004490:	f10a 0a01 	add.w	sl, sl, #1
 8004494:	f807 3b01 	strb.w	r3, [r7], #1
 8004498:	e244      	b.n	8004924 <_dtoa_r+0x964>
 800449a:	07e2      	lsls	r2, r4, #31
 800449c:	d505      	bpl.n	80044aa <_dtoa_r+0x4ea>
 800449e:	e9d6 2300 	ldrd	r2, r3, [r6]
 80044a2:	f7fc f819 	bl	80004d8 <__aeabi_dmul>
 80044a6:	2301      	movs	r3, #1
 80044a8:	3701      	adds	r7, #1
 80044aa:	1064      	asrs	r4, r4, #1
 80044ac:	3608      	adds	r6, #8
 80044ae:	e76d      	b.n	800438c <_dtoa_r+0x3cc>
 80044b0:	2702      	movs	r7, #2
 80044b2:	e770      	b.n	8004396 <_dtoa_r+0x3d6>
 80044b4:	46d0      	mov	r8, sl
 80044b6:	9c08      	ldr	r4, [sp, #32]
 80044b8:	e78f      	b.n	80043da <_dtoa_r+0x41a>
 80044ba:	9903      	ldr	r1, [sp, #12]
 80044bc:	4b29      	ldr	r3, [pc, #164]	; (8004564 <_dtoa_r+0x5a4>)
 80044be:	4421      	add	r1, r4
 80044c0:	9112      	str	r1, [sp, #72]	; 0x48
 80044c2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80044c4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80044c8:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80044cc:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80044d0:	2900      	cmp	r1, #0
 80044d2:	d055      	beq.n	8004580 <_dtoa_r+0x5c0>
 80044d4:	2000      	movs	r0, #0
 80044d6:	4929      	ldr	r1, [pc, #164]	; (800457c <_dtoa_r+0x5bc>)
 80044d8:	f7fc f928 	bl	800072c <__aeabi_ddiv>
 80044dc:	463b      	mov	r3, r7
 80044de:	4632      	mov	r2, r6
 80044e0:	f7fb fe42 	bl	8000168 <__aeabi_dsub>
 80044e4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80044e8:	9f03      	ldr	r7, [sp, #12]
 80044ea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80044ee:	f7fc faa3 	bl	8000a38 <__aeabi_d2iz>
 80044f2:	4604      	mov	r4, r0
 80044f4:	f7fb ff86 	bl	8000404 <__aeabi_i2d>
 80044f8:	4602      	mov	r2, r0
 80044fa:	460b      	mov	r3, r1
 80044fc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004500:	f7fb fe32 	bl	8000168 <__aeabi_dsub>
 8004504:	4602      	mov	r2, r0
 8004506:	460b      	mov	r3, r1
 8004508:	3430      	adds	r4, #48	; 0x30
 800450a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800450e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004512:	f807 4b01 	strb.w	r4, [r7], #1
 8004516:	f7fc fa51 	bl	80009bc <__aeabi_dcmplt>
 800451a:	2800      	cmp	r0, #0
 800451c:	d174      	bne.n	8004608 <_dtoa_r+0x648>
 800451e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004522:	2000      	movs	r0, #0
 8004524:	4911      	ldr	r1, [pc, #68]	; (800456c <_dtoa_r+0x5ac>)
 8004526:	f7fb fe1f 	bl	8000168 <__aeabi_dsub>
 800452a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800452e:	f7fc fa45 	bl	80009bc <__aeabi_dcmplt>
 8004532:	2800      	cmp	r0, #0
 8004534:	f040 80b7 	bne.w	80046a6 <_dtoa_r+0x6e6>
 8004538:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800453a:	429f      	cmp	r7, r3
 800453c:	f43f af7a 	beq.w	8004434 <_dtoa_r+0x474>
 8004540:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004544:	2200      	movs	r2, #0
 8004546:	4b0a      	ldr	r3, [pc, #40]	; (8004570 <_dtoa_r+0x5b0>)
 8004548:	f7fb ffc6 	bl	80004d8 <__aeabi_dmul>
 800454c:	2200      	movs	r2, #0
 800454e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004552:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004556:	4b06      	ldr	r3, [pc, #24]	; (8004570 <_dtoa_r+0x5b0>)
 8004558:	f7fb ffbe 	bl	80004d8 <__aeabi_dmul>
 800455c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004560:	e7c3      	b.n	80044ea <_dtoa_r+0x52a>
 8004562:	bf00      	nop
 8004564:	08006510 	.word	0x08006510
 8004568:	080064e8 	.word	0x080064e8
 800456c:	3ff00000 	.word	0x3ff00000
 8004570:	40240000 	.word	0x40240000
 8004574:	401c0000 	.word	0x401c0000
 8004578:	40140000 	.word	0x40140000
 800457c:	3fe00000 	.word	0x3fe00000
 8004580:	4630      	mov	r0, r6
 8004582:	4639      	mov	r1, r7
 8004584:	f7fb ffa8 	bl	80004d8 <__aeabi_dmul>
 8004588:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800458a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800458e:	9c03      	ldr	r4, [sp, #12]
 8004590:	9314      	str	r3, [sp, #80]	; 0x50
 8004592:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004596:	f7fc fa4f 	bl	8000a38 <__aeabi_d2iz>
 800459a:	9015      	str	r0, [sp, #84]	; 0x54
 800459c:	f7fb ff32 	bl	8000404 <__aeabi_i2d>
 80045a0:	4602      	mov	r2, r0
 80045a2:	460b      	mov	r3, r1
 80045a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80045a8:	f7fb fdde 	bl	8000168 <__aeabi_dsub>
 80045ac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80045ae:	4606      	mov	r6, r0
 80045b0:	3330      	adds	r3, #48	; 0x30
 80045b2:	f804 3b01 	strb.w	r3, [r4], #1
 80045b6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80045b8:	460f      	mov	r7, r1
 80045ba:	429c      	cmp	r4, r3
 80045bc:	f04f 0200 	mov.w	r2, #0
 80045c0:	d124      	bne.n	800460c <_dtoa_r+0x64c>
 80045c2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80045c6:	4bb0      	ldr	r3, [pc, #704]	; (8004888 <_dtoa_r+0x8c8>)
 80045c8:	f7fb fdd0 	bl	800016c <__adddf3>
 80045cc:	4602      	mov	r2, r0
 80045ce:	460b      	mov	r3, r1
 80045d0:	4630      	mov	r0, r6
 80045d2:	4639      	mov	r1, r7
 80045d4:	f7fc fa10 	bl	80009f8 <__aeabi_dcmpgt>
 80045d8:	2800      	cmp	r0, #0
 80045da:	d163      	bne.n	80046a4 <_dtoa_r+0x6e4>
 80045dc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80045e0:	2000      	movs	r0, #0
 80045e2:	49a9      	ldr	r1, [pc, #676]	; (8004888 <_dtoa_r+0x8c8>)
 80045e4:	f7fb fdc0 	bl	8000168 <__aeabi_dsub>
 80045e8:	4602      	mov	r2, r0
 80045ea:	460b      	mov	r3, r1
 80045ec:	4630      	mov	r0, r6
 80045ee:	4639      	mov	r1, r7
 80045f0:	f7fc f9e4 	bl	80009bc <__aeabi_dcmplt>
 80045f4:	2800      	cmp	r0, #0
 80045f6:	f43f af1d 	beq.w	8004434 <_dtoa_r+0x474>
 80045fa:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80045fc:	1e7b      	subs	r3, r7, #1
 80045fe:	9314      	str	r3, [sp, #80]	; 0x50
 8004600:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8004604:	2b30      	cmp	r3, #48	; 0x30
 8004606:	d0f8      	beq.n	80045fa <_dtoa_r+0x63a>
 8004608:	46c2      	mov	sl, r8
 800460a:	e03b      	b.n	8004684 <_dtoa_r+0x6c4>
 800460c:	4b9f      	ldr	r3, [pc, #636]	; (800488c <_dtoa_r+0x8cc>)
 800460e:	f7fb ff63 	bl	80004d8 <__aeabi_dmul>
 8004612:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004616:	e7bc      	b.n	8004592 <_dtoa_r+0x5d2>
 8004618:	9f03      	ldr	r7, [sp, #12]
 800461a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800461e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004622:	4640      	mov	r0, r8
 8004624:	4649      	mov	r1, r9
 8004626:	f7fc f881 	bl	800072c <__aeabi_ddiv>
 800462a:	f7fc fa05 	bl	8000a38 <__aeabi_d2iz>
 800462e:	4604      	mov	r4, r0
 8004630:	f7fb fee8 	bl	8000404 <__aeabi_i2d>
 8004634:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004638:	f7fb ff4e 	bl	80004d8 <__aeabi_dmul>
 800463c:	4602      	mov	r2, r0
 800463e:	460b      	mov	r3, r1
 8004640:	4640      	mov	r0, r8
 8004642:	4649      	mov	r1, r9
 8004644:	f7fb fd90 	bl	8000168 <__aeabi_dsub>
 8004648:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800464c:	f807 6b01 	strb.w	r6, [r7], #1
 8004650:	9e03      	ldr	r6, [sp, #12]
 8004652:	f8dd c020 	ldr.w	ip, [sp, #32]
 8004656:	1bbe      	subs	r6, r7, r6
 8004658:	45b4      	cmp	ip, r6
 800465a:	4602      	mov	r2, r0
 800465c:	460b      	mov	r3, r1
 800465e:	d136      	bne.n	80046ce <_dtoa_r+0x70e>
 8004660:	f7fb fd84 	bl	800016c <__adddf3>
 8004664:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004668:	4680      	mov	r8, r0
 800466a:	4689      	mov	r9, r1
 800466c:	f7fc f9c4 	bl	80009f8 <__aeabi_dcmpgt>
 8004670:	bb58      	cbnz	r0, 80046ca <_dtoa_r+0x70a>
 8004672:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004676:	4640      	mov	r0, r8
 8004678:	4649      	mov	r1, r9
 800467a:	f7fc f995 	bl	80009a8 <__aeabi_dcmpeq>
 800467e:	b108      	cbz	r0, 8004684 <_dtoa_r+0x6c4>
 8004680:	07e1      	lsls	r1, r4, #31
 8004682:	d422      	bmi.n	80046ca <_dtoa_r+0x70a>
 8004684:	4628      	mov	r0, r5
 8004686:	4659      	mov	r1, fp
 8004688:	f000 faf0 	bl	8004c6c <_Bfree>
 800468c:	2300      	movs	r3, #0
 800468e:	703b      	strb	r3, [r7, #0]
 8004690:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8004692:	f10a 0001 	add.w	r0, sl, #1
 8004696:	6018      	str	r0, [r3, #0]
 8004698:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800469a:	2b00      	cmp	r3, #0
 800469c:	f43f acde 	beq.w	800405c <_dtoa_r+0x9c>
 80046a0:	601f      	str	r7, [r3, #0]
 80046a2:	e4db      	b.n	800405c <_dtoa_r+0x9c>
 80046a4:	4627      	mov	r7, r4
 80046a6:	463b      	mov	r3, r7
 80046a8:	461f      	mov	r7, r3
 80046aa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80046ae:	2a39      	cmp	r2, #57	; 0x39
 80046b0:	d107      	bne.n	80046c2 <_dtoa_r+0x702>
 80046b2:	9a03      	ldr	r2, [sp, #12]
 80046b4:	429a      	cmp	r2, r3
 80046b6:	d1f7      	bne.n	80046a8 <_dtoa_r+0x6e8>
 80046b8:	2230      	movs	r2, #48	; 0x30
 80046ba:	9903      	ldr	r1, [sp, #12]
 80046bc:	f108 0801 	add.w	r8, r8, #1
 80046c0:	700a      	strb	r2, [r1, #0]
 80046c2:	781a      	ldrb	r2, [r3, #0]
 80046c4:	3201      	adds	r2, #1
 80046c6:	701a      	strb	r2, [r3, #0]
 80046c8:	e79e      	b.n	8004608 <_dtoa_r+0x648>
 80046ca:	46d0      	mov	r8, sl
 80046cc:	e7eb      	b.n	80046a6 <_dtoa_r+0x6e6>
 80046ce:	2200      	movs	r2, #0
 80046d0:	4b6e      	ldr	r3, [pc, #440]	; (800488c <_dtoa_r+0x8cc>)
 80046d2:	f7fb ff01 	bl	80004d8 <__aeabi_dmul>
 80046d6:	2200      	movs	r2, #0
 80046d8:	2300      	movs	r3, #0
 80046da:	4680      	mov	r8, r0
 80046dc:	4689      	mov	r9, r1
 80046de:	f7fc f963 	bl	80009a8 <__aeabi_dcmpeq>
 80046e2:	2800      	cmp	r0, #0
 80046e4:	d09b      	beq.n	800461e <_dtoa_r+0x65e>
 80046e6:	e7cd      	b.n	8004684 <_dtoa_r+0x6c4>
 80046e8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80046ea:	2a00      	cmp	r2, #0
 80046ec:	f000 80d0 	beq.w	8004890 <_dtoa_r+0x8d0>
 80046f0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80046f2:	2a01      	cmp	r2, #1
 80046f4:	f300 80ae 	bgt.w	8004854 <_dtoa_r+0x894>
 80046f8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80046fa:	2a00      	cmp	r2, #0
 80046fc:	f000 80a6 	beq.w	800484c <_dtoa_r+0x88c>
 8004700:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004704:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8004706:	9f06      	ldr	r7, [sp, #24]
 8004708:	9a06      	ldr	r2, [sp, #24]
 800470a:	2101      	movs	r1, #1
 800470c:	441a      	add	r2, r3
 800470e:	9206      	str	r2, [sp, #24]
 8004710:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004712:	4628      	mov	r0, r5
 8004714:	441a      	add	r2, r3
 8004716:	9209      	str	r2, [sp, #36]	; 0x24
 8004718:	f000 fb5e 	bl	8004dd8 <__i2b>
 800471c:	4606      	mov	r6, r0
 800471e:	2f00      	cmp	r7, #0
 8004720:	dd0c      	ble.n	800473c <_dtoa_r+0x77c>
 8004722:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004724:	2b00      	cmp	r3, #0
 8004726:	dd09      	ble.n	800473c <_dtoa_r+0x77c>
 8004728:	42bb      	cmp	r3, r7
 800472a:	bfa8      	it	ge
 800472c:	463b      	movge	r3, r7
 800472e:	9a06      	ldr	r2, [sp, #24]
 8004730:	1aff      	subs	r7, r7, r3
 8004732:	1ad2      	subs	r2, r2, r3
 8004734:	9206      	str	r2, [sp, #24]
 8004736:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004738:	1ad3      	subs	r3, r2, r3
 800473a:	9309      	str	r3, [sp, #36]	; 0x24
 800473c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800473e:	b1f3      	cbz	r3, 800477e <_dtoa_r+0x7be>
 8004740:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004742:	2b00      	cmp	r3, #0
 8004744:	f000 80a8 	beq.w	8004898 <_dtoa_r+0x8d8>
 8004748:	2c00      	cmp	r4, #0
 800474a:	dd10      	ble.n	800476e <_dtoa_r+0x7ae>
 800474c:	4631      	mov	r1, r6
 800474e:	4622      	mov	r2, r4
 8004750:	4628      	mov	r0, r5
 8004752:	f000 fbff 	bl	8004f54 <__pow5mult>
 8004756:	465a      	mov	r2, fp
 8004758:	4601      	mov	r1, r0
 800475a:	4606      	mov	r6, r0
 800475c:	4628      	mov	r0, r5
 800475e:	f000 fb51 	bl	8004e04 <__multiply>
 8004762:	4680      	mov	r8, r0
 8004764:	4659      	mov	r1, fp
 8004766:	4628      	mov	r0, r5
 8004768:	f000 fa80 	bl	8004c6c <_Bfree>
 800476c:	46c3      	mov	fp, r8
 800476e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004770:	1b1a      	subs	r2, r3, r4
 8004772:	d004      	beq.n	800477e <_dtoa_r+0x7be>
 8004774:	4659      	mov	r1, fp
 8004776:	4628      	mov	r0, r5
 8004778:	f000 fbec 	bl	8004f54 <__pow5mult>
 800477c:	4683      	mov	fp, r0
 800477e:	2101      	movs	r1, #1
 8004780:	4628      	mov	r0, r5
 8004782:	f000 fb29 	bl	8004dd8 <__i2b>
 8004786:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004788:	4604      	mov	r4, r0
 800478a:	2b00      	cmp	r3, #0
 800478c:	f340 8086 	ble.w	800489c <_dtoa_r+0x8dc>
 8004790:	461a      	mov	r2, r3
 8004792:	4601      	mov	r1, r0
 8004794:	4628      	mov	r0, r5
 8004796:	f000 fbdd 	bl	8004f54 <__pow5mult>
 800479a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800479c:	4604      	mov	r4, r0
 800479e:	2b01      	cmp	r3, #1
 80047a0:	dd7f      	ble.n	80048a2 <_dtoa_r+0x8e2>
 80047a2:	f04f 0800 	mov.w	r8, #0
 80047a6:	6923      	ldr	r3, [r4, #16]
 80047a8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80047ac:	6918      	ldr	r0, [r3, #16]
 80047ae:	f000 fac5 	bl	8004d3c <__hi0bits>
 80047b2:	f1c0 0020 	rsb	r0, r0, #32
 80047b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80047b8:	4418      	add	r0, r3
 80047ba:	f010 001f 	ands.w	r0, r0, #31
 80047be:	f000 8092 	beq.w	80048e6 <_dtoa_r+0x926>
 80047c2:	f1c0 0320 	rsb	r3, r0, #32
 80047c6:	2b04      	cmp	r3, #4
 80047c8:	f340 808a 	ble.w	80048e0 <_dtoa_r+0x920>
 80047cc:	f1c0 001c 	rsb	r0, r0, #28
 80047d0:	9b06      	ldr	r3, [sp, #24]
 80047d2:	4407      	add	r7, r0
 80047d4:	4403      	add	r3, r0
 80047d6:	9306      	str	r3, [sp, #24]
 80047d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80047da:	4403      	add	r3, r0
 80047dc:	9309      	str	r3, [sp, #36]	; 0x24
 80047de:	9b06      	ldr	r3, [sp, #24]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	dd05      	ble.n	80047f0 <_dtoa_r+0x830>
 80047e4:	4659      	mov	r1, fp
 80047e6:	461a      	mov	r2, r3
 80047e8:	4628      	mov	r0, r5
 80047ea:	f000 fc0d 	bl	8005008 <__lshift>
 80047ee:	4683      	mov	fp, r0
 80047f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	dd05      	ble.n	8004802 <_dtoa_r+0x842>
 80047f6:	4621      	mov	r1, r4
 80047f8:	461a      	mov	r2, r3
 80047fa:	4628      	mov	r0, r5
 80047fc:	f000 fc04 	bl	8005008 <__lshift>
 8004800:	4604      	mov	r4, r0
 8004802:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004804:	2b00      	cmp	r3, #0
 8004806:	d070      	beq.n	80048ea <_dtoa_r+0x92a>
 8004808:	4621      	mov	r1, r4
 800480a:	4658      	mov	r0, fp
 800480c:	f000 fc6c 	bl	80050e8 <__mcmp>
 8004810:	2800      	cmp	r0, #0
 8004812:	da6a      	bge.n	80048ea <_dtoa_r+0x92a>
 8004814:	2300      	movs	r3, #0
 8004816:	4659      	mov	r1, fp
 8004818:	220a      	movs	r2, #10
 800481a:	4628      	mov	r0, r5
 800481c:	f000 fa48 	bl	8004cb0 <__multadd>
 8004820:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004822:	4683      	mov	fp, r0
 8004824:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004828:	2b00      	cmp	r3, #0
 800482a:	f000 8194 	beq.w	8004b56 <_dtoa_r+0xb96>
 800482e:	4631      	mov	r1, r6
 8004830:	2300      	movs	r3, #0
 8004832:	220a      	movs	r2, #10
 8004834:	4628      	mov	r0, r5
 8004836:	f000 fa3b 	bl	8004cb0 <__multadd>
 800483a:	f1b9 0f00 	cmp.w	r9, #0
 800483e:	4606      	mov	r6, r0
 8004840:	f300 8093 	bgt.w	800496a <_dtoa_r+0x9aa>
 8004844:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004846:	2b02      	cmp	r3, #2
 8004848:	dc57      	bgt.n	80048fa <_dtoa_r+0x93a>
 800484a:	e08e      	b.n	800496a <_dtoa_r+0x9aa>
 800484c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800484e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8004852:	e757      	b.n	8004704 <_dtoa_r+0x744>
 8004854:	9b08      	ldr	r3, [sp, #32]
 8004856:	1e5c      	subs	r4, r3, #1
 8004858:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800485a:	42a3      	cmp	r3, r4
 800485c:	bfb7      	itett	lt
 800485e:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8004860:	1b1c      	subge	r4, r3, r4
 8004862:	1ae2      	sublt	r2, r4, r3
 8004864:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8004866:	bfbe      	ittt	lt
 8004868:	940a      	strlt	r4, [sp, #40]	; 0x28
 800486a:	189b      	addlt	r3, r3, r2
 800486c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800486e:	9b08      	ldr	r3, [sp, #32]
 8004870:	bfb8      	it	lt
 8004872:	2400      	movlt	r4, #0
 8004874:	2b00      	cmp	r3, #0
 8004876:	bfbb      	ittet	lt
 8004878:	9b06      	ldrlt	r3, [sp, #24]
 800487a:	9a08      	ldrlt	r2, [sp, #32]
 800487c:	9f06      	ldrge	r7, [sp, #24]
 800487e:	1a9f      	sublt	r7, r3, r2
 8004880:	bfac      	ite	ge
 8004882:	9b08      	ldrge	r3, [sp, #32]
 8004884:	2300      	movlt	r3, #0
 8004886:	e73f      	b.n	8004708 <_dtoa_r+0x748>
 8004888:	3fe00000 	.word	0x3fe00000
 800488c:	40240000 	.word	0x40240000
 8004890:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8004892:	9f06      	ldr	r7, [sp, #24]
 8004894:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8004896:	e742      	b.n	800471e <_dtoa_r+0x75e>
 8004898:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800489a:	e76b      	b.n	8004774 <_dtoa_r+0x7b4>
 800489c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800489e:	2b01      	cmp	r3, #1
 80048a0:	dc19      	bgt.n	80048d6 <_dtoa_r+0x916>
 80048a2:	9b04      	ldr	r3, [sp, #16]
 80048a4:	b9bb      	cbnz	r3, 80048d6 <_dtoa_r+0x916>
 80048a6:	9b05      	ldr	r3, [sp, #20]
 80048a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80048ac:	b99b      	cbnz	r3, 80048d6 <_dtoa_r+0x916>
 80048ae:	9b05      	ldr	r3, [sp, #20]
 80048b0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80048b4:	0d1b      	lsrs	r3, r3, #20
 80048b6:	051b      	lsls	r3, r3, #20
 80048b8:	b183      	cbz	r3, 80048dc <_dtoa_r+0x91c>
 80048ba:	f04f 0801 	mov.w	r8, #1
 80048be:	9b06      	ldr	r3, [sp, #24]
 80048c0:	3301      	adds	r3, #1
 80048c2:	9306      	str	r3, [sp, #24]
 80048c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80048c6:	3301      	adds	r3, #1
 80048c8:	9309      	str	r3, [sp, #36]	; 0x24
 80048ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	f47f af6a 	bne.w	80047a6 <_dtoa_r+0x7e6>
 80048d2:	2001      	movs	r0, #1
 80048d4:	e76f      	b.n	80047b6 <_dtoa_r+0x7f6>
 80048d6:	f04f 0800 	mov.w	r8, #0
 80048da:	e7f6      	b.n	80048ca <_dtoa_r+0x90a>
 80048dc:	4698      	mov	r8, r3
 80048de:	e7f4      	b.n	80048ca <_dtoa_r+0x90a>
 80048e0:	f43f af7d 	beq.w	80047de <_dtoa_r+0x81e>
 80048e4:	4618      	mov	r0, r3
 80048e6:	301c      	adds	r0, #28
 80048e8:	e772      	b.n	80047d0 <_dtoa_r+0x810>
 80048ea:	9b08      	ldr	r3, [sp, #32]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	dc36      	bgt.n	800495e <_dtoa_r+0x99e>
 80048f0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80048f2:	2b02      	cmp	r3, #2
 80048f4:	dd33      	ble.n	800495e <_dtoa_r+0x99e>
 80048f6:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80048fa:	f1b9 0f00 	cmp.w	r9, #0
 80048fe:	d10d      	bne.n	800491c <_dtoa_r+0x95c>
 8004900:	4621      	mov	r1, r4
 8004902:	464b      	mov	r3, r9
 8004904:	2205      	movs	r2, #5
 8004906:	4628      	mov	r0, r5
 8004908:	f000 f9d2 	bl	8004cb0 <__multadd>
 800490c:	4601      	mov	r1, r0
 800490e:	4604      	mov	r4, r0
 8004910:	4658      	mov	r0, fp
 8004912:	f000 fbe9 	bl	80050e8 <__mcmp>
 8004916:	2800      	cmp	r0, #0
 8004918:	f73f adb8 	bgt.w	800448c <_dtoa_r+0x4cc>
 800491c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800491e:	9f03      	ldr	r7, [sp, #12]
 8004920:	ea6f 0a03 	mvn.w	sl, r3
 8004924:	f04f 0800 	mov.w	r8, #0
 8004928:	4621      	mov	r1, r4
 800492a:	4628      	mov	r0, r5
 800492c:	f000 f99e 	bl	8004c6c <_Bfree>
 8004930:	2e00      	cmp	r6, #0
 8004932:	f43f aea7 	beq.w	8004684 <_dtoa_r+0x6c4>
 8004936:	f1b8 0f00 	cmp.w	r8, #0
 800493a:	d005      	beq.n	8004948 <_dtoa_r+0x988>
 800493c:	45b0      	cmp	r8, r6
 800493e:	d003      	beq.n	8004948 <_dtoa_r+0x988>
 8004940:	4641      	mov	r1, r8
 8004942:	4628      	mov	r0, r5
 8004944:	f000 f992 	bl	8004c6c <_Bfree>
 8004948:	4631      	mov	r1, r6
 800494a:	4628      	mov	r0, r5
 800494c:	f000 f98e 	bl	8004c6c <_Bfree>
 8004950:	e698      	b.n	8004684 <_dtoa_r+0x6c4>
 8004952:	2400      	movs	r4, #0
 8004954:	4626      	mov	r6, r4
 8004956:	e7e1      	b.n	800491c <_dtoa_r+0x95c>
 8004958:	46c2      	mov	sl, r8
 800495a:	4626      	mov	r6, r4
 800495c:	e596      	b.n	800448c <_dtoa_r+0x4cc>
 800495e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004960:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004964:	2b00      	cmp	r3, #0
 8004966:	f000 80fd 	beq.w	8004b64 <_dtoa_r+0xba4>
 800496a:	2f00      	cmp	r7, #0
 800496c:	dd05      	ble.n	800497a <_dtoa_r+0x9ba>
 800496e:	4631      	mov	r1, r6
 8004970:	463a      	mov	r2, r7
 8004972:	4628      	mov	r0, r5
 8004974:	f000 fb48 	bl	8005008 <__lshift>
 8004978:	4606      	mov	r6, r0
 800497a:	f1b8 0f00 	cmp.w	r8, #0
 800497e:	d05c      	beq.n	8004a3a <_dtoa_r+0xa7a>
 8004980:	4628      	mov	r0, r5
 8004982:	6871      	ldr	r1, [r6, #4]
 8004984:	f000 f932 	bl	8004bec <_Balloc>
 8004988:	4607      	mov	r7, r0
 800498a:	b928      	cbnz	r0, 8004998 <_dtoa_r+0x9d8>
 800498c:	4602      	mov	r2, r0
 800498e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8004992:	4b7f      	ldr	r3, [pc, #508]	; (8004b90 <_dtoa_r+0xbd0>)
 8004994:	f7ff bb28 	b.w	8003fe8 <_dtoa_r+0x28>
 8004998:	6932      	ldr	r2, [r6, #16]
 800499a:	f106 010c 	add.w	r1, r6, #12
 800499e:	3202      	adds	r2, #2
 80049a0:	0092      	lsls	r2, r2, #2
 80049a2:	300c      	adds	r0, #12
 80049a4:	f000 f914 	bl	8004bd0 <memcpy>
 80049a8:	2201      	movs	r2, #1
 80049aa:	4639      	mov	r1, r7
 80049ac:	4628      	mov	r0, r5
 80049ae:	f000 fb2b 	bl	8005008 <__lshift>
 80049b2:	46b0      	mov	r8, r6
 80049b4:	4606      	mov	r6, r0
 80049b6:	9b03      	ldr	r3, [sp, #12]
 80049b8:	3301      	adds	r3, #1
 80049ba:	9308      	str	r3, [sp, #32]
 80049bc:	9b03      	ldr	r3, [sp, #12]
 80049be:	444b      	add	r3, r9
 80049c0:	930a      	str	r3, [sp, #40]	; 0x28
 80049c2:	9b04      	ldr	r3, [sp, #16]
 80049c4:	f003 0301 	and.w	r3, r3, #1
 80049c8:	9309      	str	r3, [sp, #36]	; 0x24
 80049ca:	9b08      	ldr	r3, [sp, #32]
 80049cc:	4621      	mov	r1, r4
 80049ce:	3b01      	subs	r3, #1
 80049d0:	4658      	mov	r0, fp
 80049d2:	9304      	str	r3, [sp, #16]
 80049d4:	f7ff fa66 	bl	8003ea4 <quorem>
 80049d8:	4603      	mov	r3, r0
 80049da:	4641      	mov	r1, r8
 80049dc:	3330      	adds	r3, #48	; 0x30
 80049de:	9006      	str	r0, [sp, #24]
 80049e0:	4658      	mov	r0, fp
 80049e2:	930b      	str	r3, [sp, #44]	; 0x2c
 80049e4:	f000 fb80 	bl	80050e8 <__mcmp>
 80049e8:	4632      	mov	r2, r6
 80049ea:	4681      	mov	r9, r0
 80049ec:	4621      	mov	r1, r4
 80049ee:	4628      	mov	r0, r5
 80049f0:	f000 fb96 	bl	8005120 <__mdiff>
 80049f4:	68c2      	ldr	r2, [r0, #12]
 80049f6:	4607      	mov	r7, r0
 80049f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80049fa:	bb02      	cbnz	r2, 8004a3e <_dtoa_r+0xa7e>
 80049fc:	4601      	mov	r1, r0
 80049fe:	4658      	mov	r0, fp
 8004a00:	f000 fb72 	bl	80050e8 <__mcmp>
 8004a04:	4602      	mov	r2, r0
 8004a06:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004a08:	4639      	mov	r1, r7
 8004a0a:	4628      	mov	r0, r5
 8004a0c:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8004a10:	f000 f92c 	bl	8004c6c <_Bfree>
 8004a14:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004a16:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004a18:	9f08      	ldr	r7, [sp, #32]
 8004a1a:	ea43 0102 	orr.w	r1, r3, r2
 8004a1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a20:	430b      	orrs	r3, r1
 8004a22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004a24:	d10d      	bne.n	8004a42 <_dtoa_r+0xa82>
 8004a26:	2b39      	cmp	r3, #57	; 0x39
 8004a28:	d029      	beq.n	8004a7e <_dtoa_r+0xabe>
 8004a2a:	f1b9 0f00 	cmp.w	r9, #0
 8004a2e:	dd01      	ble.n	8004a34 <_dtoa_r+0xa74>
 8004a30:	9b06      	ldr	r3, [sp, #24]
 8004a32:	3331      	adds	r3, #49	; 0x31
 8004a34:	9a04      	ldr	r2, [sp, #16]
 8004a36:	7013      	strb	r3, [r2, #0]
 8004a38:	e776      	b.n	8004928 <_dtoa_r+0x968>
 8004a3a:	4630      	mov	r0, r6
 8004a3c:	e7b9      	b.n	80049b2 <_dtoa_r+0x9f2>
 8004a3e:	2201      	movs	r2, #1
 8004a40:	e7e2      	b.n	8004a08 <_dtoa_r+0xa48>
 8004a42:	f1b9 0f00 	cmp.w	r9, #0
 8004a46:	db06      	blt.n	8004a56 <_dtoa_r+0xa96>
 8004a48:	9922      	ldr	r1, [sp, #136]	; 0x88
 8004a4a:	ea41 0909 	orr.w	r9, r1, r9
 8004a4e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004a50:	ea59 0101 	orrs.w	r1, r9, r1
 8004a54:	d120      	bne.n	8004a98 <_dtoa_r+0xad8>
 8004a56:	2a00      	cmp	r2, #0
 8004a58:	ddec      	ble.n	8004a34 <_dtoa_r+0xa74>
 8004a5a:	4659      	mov	r1, fp
 8004a5c:	2201      	movs	r2, #1
 8004a5e:	4628      	mov	r0, r5
 8004a60:	9308      	str	r3, [sp, #32]
 8004a62:	f000 fad1 	bl	8005008 <__lshift>
 8004a66:	4621      	mov	r1, r4
 8004a68:	4683      	mov	fp, r0
 8004a6a:	f000 fb3d 	bl	80050e8 <__mcmp>
 8004a6e:	2800      	cmp	r0, #0
 8004a70:	9b08      	ldr	r3, [sp, #32]
 8004a72:	dc02      	bgt.n	8004a7a <_dtoa_r+0xaba>
 8004a74:	d1de      	bne.n	8004a34 <_dtoa_r+0xa74>
 8004a76:	07da      	lsls	r2, r3, #31
 8004a78:	d5dc      	bpl.n	8004a34 <_dtoa_r+0xa74>
 8004a7a:	2b39      	cmp	r3, #57	; 0x39
 8004a7c:	d1d8      	bne.n	8004a30 <_dtoa_r+0xa70>
 8004a7e:	2339      	movs	r3, #57	; 0x39
 8004a80:	9a04      	ldr	r2, [sp, #16]
 8004a82:	7013      	strb	r3, [r2, #0]
 8004a84:	463b      	mov	r3, r7
 8004a86:	461f      	mov	r7, r3
 8004a88:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8004a8c:	3b01      	subs	r3, #1
 8004a8e:	2a39      	cmp	r2, #57	; 0x39
 8004a90:	d050      	beq.n	8004b34 <_dtoa_r+0xb74>
 8004a92:	3201      	adds	r2, #1
 8004a94:	701a      	strb	r2, [r3, #0]
 8004a96:	e747      	b.n	8004928 <_dtoa_r+0x968>
 8004a98:	2a00      	cmp	r2, #0
 8004a9a:	dd03      	ble.n	8004aa4 <_dtoa_r+0xae4>
 8004a9c:	2b39      	cmp	r3, #57	; 0x39
 8004a9e:	d0ee      	beq.n	8004a7e <_dtoa_r+0xabe>
 8004aa0:	3301      	adds	r3, #1
 8004aa2:	e7c7      	b.n	8004a34 <_dtoa_r+0xa74>
 8004aa4:	9a08      	ldr	r2, [sp, #32]
 8004aa6:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004aa8:	f802 3c01 	strb.w	r3, [r2, #-1]
 8004aac:	428a      	cmp	r2, r1
 8004aae:	d02a      	beq.n	8004b06 <_dtoa_r+0xb46>
 8004ab0:	4659      	mov	r1, fp
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	220a      	movs	r2, #10
 8004ab6:	4628      	mov	r0, r5
 8004ab8:	f000 f8fa 	bl	8004cb0 <__multadd>
 8004abc:	45b0      	cmp	r8, r6
 8004abe:	4683      	mov	fp, r0
 8004ac0:	f04f 0300 	mov.w	r3, #0
 8004ac4:	f04f 020a 	mov.w	r2, #10
 8004ac8:	4641      	mov	r1, r8
 8004aca:	4628      	mov	r0, r5
 8004acc:	d107      	bne.n	8004ade <_dtoa_r+0xb1e>
 8004ace:	f000 f8ef 	bl	8004cb0 <__multadd>
 8004ad2:	4680      	mov	r8, r0
 8004ad4:	4606      	mov	r6, r0
 8004ad6:	9b08      	ldr	r3, [sp, #32]
 8004ad8:	3301      	adds	r3, #1
 8004ada:	9308      	str	r3, [sp, #32]
 8004adc:	e775      	b.n	80049ca <_dtoa_r+0xa0a>
 8004ade:	f000 f8e7 	bl	8004cb0 <__multadd>
 8004ae2:	4631      	mov	r1, r6
 8004ae4:	4680      	mov	r8, r0
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	220a      	movs	r2, #10
 8004aea:	4628      	mov	r0, r5
 8004aec:	f000 f8e0 	bl	8004cb0 <__multadd>
 8004af0:	4606      	mov	r6, r0
 8004af2:	e7f0      	b.n	8004ad6 <_dtoa_r+0xb16>
 8004af4:	f1b9 0f00 	cmp.w	r9, #0
 8004af8:	bfcc      	ite	gt
 8004afa:	464f      	movgt	r7, r9
 8004afc:	2701      	movle	r7, #1
 8004afe:	f04f 0800 	mov.w	r8, #0
 8004b02:	9a03      	ldr	r2, [sp, #12]
 8004b04:	4417      	add	r7, r2
 8004b06:	4659      	mov	r1, fp
 8004b08:	2201      	movs	r2, #1
 8004b0a:	4628      	mov	r0, r5
 8004b0c:	9308      	str	r3, [sp, #32]
 8004b0e:	f000 fa7b 	bl	8005008 <__lshift>
 8004b12:	4621      	mov	r1, r4
 8004b14:	4683      	mov	fp, r0
 8004b16:	f000 fae7 	bl	80050e8 <__mcmp>
 8004b1a:	2800      	cmp	r0, #0
 8004b1c:	dcb2      	bgt.n	8004a84 <_dtoa_r+0xac4>
 8004b1e:	d102      	bne.n	8004b26 <_dtoa_r+0xb66>
 8004b20:	9b08      	ldr	r3, [sp, #32]
 8004b22:	07db      	lsls	r3, r3, #31
 8004b24:	d4ae      	bmi.n	8004a84 <_dtoa_r+0xac4>
 8004b26:	463b      	mov	r3, r7
 8004b28:	461f      	mov	r7, r3
 8004b2a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004b2e:	2a30      	cmp	r2, #48	; 0x30
 8004b30:	d0fa      	beq.n	8004b28 <_dtoa_r+0xb68>
 8004b32:	e6f9      	b.n	8004928 <_dtoa_r+0x968>
 8004b34:	9a03      	ldr	r2, [sp, #12]
 8004b36:	429a      	cmp	r2, r3
 8004b38:	d1a5      	bne.n	8004a86 <_dtoa_r+0xac6>
 8004b3a:	2331      	movs	r3, #49	; 0x31
 8004b3c:	f10a 0a01 	add.w	sl, sl, #1
 8004b40:	e779      	b.n	8004a36 <_dtoa_r+0xa76>
 8004b42:	4b14      	ldr	r3, [pc, #80]	; (8004b94 <_dtoa_r+0xbd4>)
 8004b44:	f7ff baa8 	b.w	8004098 <_dtoa_r+0xd8>
 8004b48:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	f47f aa81 	bne.w	8004052 <_dtoa_r+0x92>
 8004b50:	4b11      	ldr	r3, [pc, #68]	; (8004b98 <_dtoa_r+0xbd8>)
 8004b52:	f7ff baa1 	b.w	8004098 <_dtoa_r+0xd8>
 8004b56:	f1b9 0f00 	cmp.w	r9, #0
 8004b5a:	dc03      	bgt.n	8004b64 <_dtoa_r+0xba4>
 8004b5c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004b5e:	2b02      	cmp	r3, #2
 8004b60:	f73f aecb 	bgt.w	80048fa <_dtoa_r+0x93a>
 8004b64:	9f03      	ldr	r7, [sp, #12]
 8004b66:	4621      	mov	r1, r4
 8004b68:	4658      	mov	r0, fp
 8004b6a:	f7ff f99b 	bl	8003ea4 <quorem>
 8004b6e:	9a03      	ldr	r2, [sp, #12]
 8004b70:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8004b74:	f807 3b01 	strb.w	r3, [r7], #1
 8004b78:	1aba      	subs	r2, r7, r2
 8004b7a:	4591      	cmp	r9, r2
 8004b7c:	ddba      	ble.n	8004af4 <_dtoa_r+0xb34>
 8004b7e:	4659      	mov	r1, fp
 8004b80:	2300      	movs	r3, #0
 8004b82:	220a      	movs	r2, #10
 8004b84:	4628      	mov	r0, r5
 8004b86:	f000 f893 	bl	8004cb0 <__multadd>
 8004b8a:	4683      	mov	fp, r0
 8004b8c:	e7eb      	b.n	8004b66 <_dtoa_r+0xba6>
 8004b8e:	bf00      	nop
 8004b90:	08006477 	.word	0x08006477
 8004b94:	080063d4 	.word	0x080063d4
 8004b98:	080063f8 	.word	0x080063f8

08004b9c <_localeconv_r>:
 8004b9c:	4800      	ldr	r0, [pc, #0]	; (8004ba0 <_localeconv_r+0x4>)
 8004b9e:	4770      	bx	lr
 8004ba0:	20000160 	.word	0x20000160

08004ba4 <malloc>:
 8004ba4:	4b02      	ldr	r3, [pc, #8]	; (8004bb0 <malloc+0xc>)
 8004ba6:	4601      	mov	r1, r0
 8004ba8:	6818      	ldr	r0, [r3, #0]
 8004baa:	f000 bc1d 	b.w	80053e8 <_malloc_r>
 8004bae:	bf00      	nop
 8004bb0:	2000000c 	.word	0x2000000c

08004bb4 <memchr>:
 8004bb4:	4603      	mov	r3, r0
 8004bb6:	b510      	push	{r4, lr}
 8004bb8:	b2c9      	uxtb	r1, r1
 8004bba:	4402      	add	r2, r0
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	d101      	bne.n	8004bc6 <memchr+0x12>
 8004bc2:	2000      	movs	r0, #0
 8004bc4:	e003      	b.n	8004bce <memchr+0x1a>
 8004bc6:	7804      	ldrb	r4, [r0, #0]
 8004bc8:	3301      	adds	r3, #1
 8004bca:	428c      	cmp	r4, r1
 8004bcc:	d1f6      	bne.n	8004bbc <memchr+0x8>
 8004bce:	bd10      	pop	{r4, pc}

08004bd0 <memcpy>:
 8004bd0:	440a      	add	r2, r1
 8004bd2:	4291      	cmp	r1, r2
 8004bd4:	f100 33ff 	add.w	r3, r0, #4294967295
 8004bd8:	d100      	bne.n	8004bdc <memcpy+0xc>
 8004bda:	4770      	bx	lr
 8004bdc:	b510      	push	{r4, lr}
 8004bde:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004be2:	4291      	cmp	r1, r2
 8004be4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004be8:	d1f9      	bne.n	8004bde <memcpy+0xe>
 8004bea:	bd10      	pop	{r4, pc}

08004bec <_Balloc>:
 8004bec:	b570      	push	{r4, r5, r6, lr}
 8004bee:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8004bf0:	4604      	mov	r4, r0
 8004bf2:	460d      	mov	r5, r1
 8004bf4:	b976      	cbnz	r6, 8004c14 <_Balloc+0x28>
 8004bf6:	2010      	movs	r0, #16
 8004bf8:	f7ff ffd4 	bl	8004ba4 <malloc>
 8004bfc:	4602      	mov	r2, r0
 8004bfe:	6260      	str	r0, [r4, #36]	; 0x24
 8004c00:	b920      	cbnz	r0, 8004c0c <_Balloc+0x20>
 8004c02:	2166      	movs	r1, #102	; 0x66
 8004c04:	4b17      	ldr	r3, [pc, #92]	; (8004c64 <_Balloc+0x78>)
 8004c06:	4818      	ldr	r0, [pc, #96]	; (8004c68 <_Balloc+0x7c>)
 8004c08:	f000 fdce 	bl	80057a8 <__assert_func>
 8004c0c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004c10:	6006      	str	r6, [r0, #0]
 8004c12:	60c6      	str	r6, [r0, #12]
 8004c14:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8004c16:	68f3      	ldr	r3, [r6, #12]
 8004c18:	b183      	cbz	r3, 8004c3c <_Balloc+0x50>
 8004c1a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004c1c:	68db      	ldr	r3, [r3, #12]
 8004c1e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004c22:	b9b8      	cbnz	r0, 8004c54 <_Balloc+0x68>
 8004c24:	2101      	movs	r1, #1
 8004c26:	fa01 f605 	lsl.w	r6, r1, r5
 8004c2a:	1d72      	adds	r2, r6, #5
 8004c2c:	4620      	mov	r0, r4
 8004c2e:	0092      	lsls	r2, r2, #2
 8004c30:	f000 fb5e 	bl	80052f0 <_calloc_r>
 8004c34:	b160      	cbz	r0, 8004c50 <_Balloc+0x64>
 8004c36:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8004c3a:	e00e      	b.n	8004c5a <_Balloc+0x6e>
 8004c3c:	2221      	movs	r2, #33	; 0x21
 8004c3e:	2104      	movs	r1, #4
 8004c40:	4620      	mov	r0, r4
 8004c42:	f000 fb55 	bl	80052f0 <_calloc_r>
 8004c46:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004c48:	60f0      	str	r0, [r6, #12]
 8004c4a:	68db      	ldr	r3, [r3, #12]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d1e4      	bne.n	8004c1a <_Balloc+0x2e>
 8004c50:	2000      	movs	r0, #0
 8004c52:	bd70      	pop	{r4, r5, r6, pc}
 8004c54:	6802      	ldr	r2, [r0, #0]
 8004c56:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004c60:	e7f7      	b.n	8004c52 <_Balloc+0x66>
 8004c62:	bf00      	nop
 8004c64:	08006405 	.word	0x08006405
 8004c68:	08006488 	.word	0x08006488

08004c6c <_Bfree>:
 8004c6c:	b570      	push	{r4, r5, r6, lr}
 8004c6e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8004c70:	4605      	mov	r5, r0
 8004c72:	460c      	mov	r4, r1
 8004c74:	b976      	cbnz	r6, 8004c94 <_Bfree+0x28>
 8004c76:	2010      	movs	r0, #16
 8004c78:	f7ff ff94 	bl	8004ba4 <malloc>
 8004c7c:	4602      	mov	r2, r0
 8004c7e:	6268      	str	r0, [r5, #36]	; 0x24
 8004c80:	b920      	cbnz	r0, 8004c8c <_Bfree+0x20>
 8004c82:	218a      	movs	r1, #138	; 0x8a
 8004c84:	4b08      	ldr	r3, [pc, #32]	; (8004ca8 <_Bfree+0x3c>)
 8004c86:	4809      	ldr	r0, [pc, #36]	; (8004cac <_Bfree+0x40>)
 8004c88:	f000 fd8e 	bl	80057a8 <__assert_func>
 8004c8c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004c90:	6006      	str	r6, [r0, #0]
 8004c92:	60c6      	str	r6, [r0, #12]
 8004c94:	b13c      	cbz	r4, 8004ca6 <_Bfree+0x3a>
 8004c96:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004c98:	6862      	ldr	r2, [r4, #4]
 8004c9a:	68db      	ldr	r3, [r3, #12]
 8004c9c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004ca0:	6021      	str	r1, [r4, #0]
 8004ca2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8004ca6:	bd70      	pop	{r4, r5, r6, pc}
 8004ca8:	08006405 	.word	0x08006405
 8004cac:	08006488 	.word	0x08006488

08004cb0 <__multadd>:
 8004cb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004cb4:	4607      	mov	r7, r0
 8004cb6:	460c      	mov	r4, r1
 8004cb8:	461e      	mov	r6, r3
 8004cba:	2000      	movs	r0, #0
 8004cbc:	690d      	ldr	r5, [r1, #16]
 8004cbe:	f101 0c14 	add.w	ip, r1, #20
 8004cc2:	f8dc 3000 	ldr.w	r3, [ip]
 8004cc6:	3001      	adds	r0, #1
 8004cc8:	b299      	uxth	r1, r3
 8004cca:	fb02 6101 	mla	r1, r2, r1, r6
 8004cce:	0c1e      	lsrs	r6, r3, #16
 8004cd0:	0c0b      	lsrs	r3, r1, #16
 8004cd2:	fb02 3306 	mla	r3, r2, r6, r3
 8004cd6:	b289      	uxth	r1, r1
 8004cd8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8004cdc:	4285      	cmp	r5, r0
 8004cde:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8004ce2:	f84c 1b04 	str.w	r1, [ip], #4
 8004ce6:	dcec      	bgt.n	8004cc2 <__multadd+0x12>
 8004ce8:	b30e      	cbz	r6, 8004d2e <__multadd+0x7e>
 8004cea:	68a3      	ldr	r3, [r4, #8]
 8004cec:	42ab      	cmp	r3, r5
 8004cee:	dc19      	bgt.n	8004d24 <__multadd+0x74>
 8004cf0:	6861      	ldr	r1, [r4, #4]
 8004cf2:	4638      	mov	r0, r7
 8004cf4:	3101      	adds	r1, #1
 8004cf6:	f7ff ff79 	bl	8004bec <_Balloc>
 8004cfa:	4680      	mov	r8, r0
 8004cfc:	b928      	cbnz	r0, 8004d0a <__multadd+0x5a>
 8004cfe:	4602      	mov	r2, r0
 8004d00:	21b5      	movs	r1, #181	; 0xb5
 8004d02:	4b0c      	ldr	r3, [pc, #48]	; (8004d34 <__multadd+0x84>)
 8004d04:	480c      	ldr	r0, [pc, #48]	; (8004d38 <__multadd+0x88>)
 8004d06:	f000 fd4f 	bl	80057a8 <__assert_func>
 8004d0a:	6922      	ldr	r2, [r4, #16]
 8004d0c:	f104 010c 	add.w	r1, r4, #12
 8004d10:	3202      	adds	r2, #2
 8004d12:	0092      	lsls	r2, r2, #2
 8004d14:	300c      	adds	r0, #12
 8004d16:	f7ff ff5b 	bl	8004bd0 <memcpy>
 8004d1a:	4621      	mov	r1, r4
 8004d1c:	4638      	mov	r0, r7
 8004d1e:	f7ff ffa5 	bl	8004c6c <_Bfree>
 8004d22:	4644      	mov	r4, r8
 8004d24:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8004d28:	3501      	adds	r5, #1
 8004d2a:	615e      	str	r6, [r3, #20]
 8004d2c:	6125      	str	r5, [r4, #16]
 8004d2e:	4620      	mov	r0, r4
 8004d30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d34:	08006477 	.word	0x08006477
 8004d38:	08006488 	.word	0x08006488

08004d3c <__hi0bits>:
 8004d3c:	0c02      	lsrs	r2, r0, #16
 8004d3e:	0412      	lsls	r2, r2, #16
 8004d40:	4603      	mov	r3, r0
 8004d42:	b9ca      	cbnz	r2, 8004d78 <__hi0bits+0x3c>
 8004d44:	0403      	lsls	r3, r0, #16
 8004d46:	2010      	movs	r0, #16
 8004d48:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8004d4c:	bf04      	itt	eq
 8004d4e:	021b      	lsleq	r3, r3, #8
 8004d50:	3008      	addeq	r0, #8
 8004d52:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8004d56:	bf04      	itt	eq
 8004d58:	011b      	lsleq	r3, r3, #4
 8004d5a:	3004      	addeq	r0, #4
 8004d5c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8004d60:	bf04      	itt	eq
 8004d62:	009b      	lsleq	r3, r3, #2
 8004d64:	3002      	addeq	r0, #2
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	db05      	blt.n	8004d76 <__hi0bits+0x3a>
 8004d6a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8004d6e:	f100 0001 	add.w	r0, r0, #1
 8004d72:	bf08      	it	eq
 8004d74:	2020      	moveq	r0, #32
 8004d76:	4770      	bx	lr
 8004d78:	2000      	movs	r0, #0
 8004d7a:	e7e5      	b.n	8004d48 <__hi0bits+0xc>

08004d7c <__lo0bits>:
 8004d7c:	6803      	ldr	r3, [r0, #0]
 8004d7e:	4602      	mov	r2, r0
 8004d80:	f013 0007 	ands.w	r0, r3, #7
 8004d84:	d00b      	beq.n	8004d9e <__lo0bits+0x22>
 8004d86:	07d9      	lsls	r1, r3, #31
 8004d88:	d421      	bmi.n	8004dce <__lo0bits+0x52>
 8004d8a:	0798      	lsls	r0, r3, #30
 8004d8c:	bf49      	itett	mi
 8004d8e:	085b      	lsrmi	r3, r3, #1
 8004d90:	089b      	lsrpl	r3, r3, #2
 8004d92:	2001      	movmi	r0, #1
 8004d94:	6013      	strmi	r3, [r2, #0]
 8004d96:	bf5c      	itt	pl
 8004d98:	2002      	movpl	r0, #2
 8004d9a:	6013      	strpl	r3, [r2, #0]
 8004d9c:	4770      	bx	lr
 8004d9e:	b299      	uxth	r1, r3
 8004da0:	b909      	cbnz	r1, 8004da6 <__lo0bits+0x2a>
 8004da2:	2010      	movs	r0, #16
 8004da4:	0c1b      	lsrs	r3, r3, #16
 8004da6:	b2d9      	uxtb	r1, r3
 8004da8:	b909      	cbnz	r1, 8004dae <__lo0bits+0x32>
 8004daa:	3008      	adds	r0, #8
 8004dac:	0a1b      	lsrs	r3, r3, #8
 8004dae:	0719      	lsls	r1, r3, #28
 8004db0:	bf04      	itt	eq
 8004db2:	091b      	lsreq	r3, r3, #4
 8004db4:	3004      	addeq	r0, #4
 8004db6:	0799      	lsls	r1, r3, #30
 8004db8:	bf04      	itt	eq
 8004dba:	089b      	lsreq	r3, r3, #2
 8004dbc:	3002      	addeq	r0, #2
 8004dbe:	07d9      	lsls	r1, r3, #31
 8004dc0:	d403      	bmi.n	8004dca <__lo0bits+0x4e>
 8004dc2:	085b      	lsrs	r3, r3, #1
 8004dc4:	f100 0001 	add.w	r0, r0, #1
 8004dc8:	d003      	beq.n	8004dd2 <__lo0bits+0x56>
 8004dca:	6013      	str	r3, [r2, #0]
 8004dcc:	4770      	bx	lr
 8004dce:	2000      	movs	r0, #0
 8004dd0:	4770      	bx	lr
 8004dd2:	2020      	movs	r0, #32
 8004dd4:	4770      	bx	lr
	...

08004dd8 <__i2b>:
 8004dd8:	b510      	push	{r4, lr}
 8004dda:	460c      	mov	r4, r1
 8004ddc:	2101      	movs	r1, #1
 8004dde:	f7ff ff05 	bl	8004bec <_Balloc>
 8004de2:	4602      	mov	r2, r0
 8004de4:	b928      	cbnz	r0, 8004df2 <__i2b+0x1a>
 8004de6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8004dea:	4b04      	ldr	r3, [pc, #16]	; (8004dfc <__i2b+0x24>)
 8004dec:	4804      	ldr	r0, [pc, #16]	; (8004e00 <__i2b+0x28>)
 8004dee:	f000 fcdb 	bl	80057a8 <__assert_func>
 8004df2:	2301      	movs	r3, #1
 8004df4:	6144      	str	r4, [r0, #20]
 8004df6:	6103      	str	r3, [r0, #16]
 8004df8:	bd10      	pop	{r4, pc}
 8004dfa:	bf00      	nop
 8004dfc:	08006477 	.word	0x08006477
 8004e00:	08006488 	.word	0x08006488

08004e04 <__multiply>:
 8004e04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e08:	4691      	mov	r9, r2
 8004e0a:	690a      	ldr	r2, [r1, #16]
 8004e0c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8004e10:	460c      	mov	r4, r1
 8004e12:	429a      	cmp	r2, r3
 8004e14:	bfbe      	ittt	lt
 8004e16:	460b      	movlt	r3, r1
 8004e18:	464c      	movlt	r4, r9
 8004e1a:	4699      	movlt	r9, r3
 8004e1c:	6927      	ldr	r7, [r4, #16]
 8004e1e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8004e22:	68a3      	ldr	r3, [r4, #8]
 8004e24:	6861      	ldr	r1, [r4, #4]
 8004e26:	eb07 060a 	add.w	r6, r7, sl
 8004e2a:	42b3      	cmp	r3, r6
 8004e2c:	b085      	sub	sp, #20
 8004e2e:	bfb8      	it	lt
 8004e30:	3101      	addlt	r1, #1
 8004e32:	f7ff fedb 	bl	8004bec <_Balloc>
 8004e36:	b930      	cbnz	r0, 8004e46 <__multiply+0x42>
 8004e38:	4602      	mov	r2, r0
 8004e3a:	f240 115d 	movw	r1, #349	; 0x15d
 8004e3e:	4b43      	ldr	r3, [pc, #268]	; (8004f4c <__multiply+0x148>)
 8004e40:	4843      	ldr	r0, [pc, #268]	; (8004f50 <__multiply+0x14c>)
 8004e42:	f000 fcb1 	bl	80057a8 <__assert_func>
 8004e46:	f100 0514 	add.w	r5, r0, #20
 8004e4a:	462b      	mov	r3, r5
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8004e52:	4543      	cmp	r3, r8
 8004e54:	d321      	bcc.n	8004e9a <__multiply+0x96>
 8004e56:	f104 0314 	add.w	r3, r4, #20
 8004e5a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8004e5e:	f109 0314 	add.w	r3, r9, #20
 8004e62:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8004e66:	9202      	str	r2, [sp, #8]
 8004e68:	1b3a      	subs	r2, r7, r4
 8004e6a:	3a15      	subs	r2, #21
 8004e6c:	f022 0203 	bic.w	r2, r2, #3
 8004e70:	3204      	adds	r2, #4
 8004e72:	f104 0115 	add.w	r1, r4, #21
 8004e76:	428f      	cmp	r7, r1
 8004e78:	bf38      	it	cc
 8004e7a:	2204      	movcc	r2, #4
 8004e7c:	9201      	str	r2, [sp, #4]
 8004e7e:	9a02      	ldr	r2, [sp, #8]
 8004e80:	9303      	str	r3, [sp, #12]
 8004e82:	429a      	cmp	r2, r3
 8004e84:	d80c      	bhi.n	8004ea0 <__multiply+0x9c>
 8004e86:	2e00      	cmp	r6, #0
 8004e88:	dd03      	ble.n	8004e92 <__multiply+0x8e>
 8004e8a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d059      	beq.n	8004f46 <__multiply+0x142>
 8004e92:	6106      	str	r6, [r0, #16]
 8004e94:	b005      	add	sp, #20
 8004e96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e9a:	f843 2b04 	str.w	r2, [r3], #4
 8004e9e:	e7d8      	b.n	8004e52 <__multiply+0x4e>
 8004ea0:	f8b3 a000 	ldrh.w	sl, [r3]
 8004ea4:	f1ba 0f00 	cmp.w	sl, #0
 8004ea8:	d023      	beq.n	8004ef2 <__multiply+0xee>
 8004eaa:	46a9      	mov	r9, r5
 8004eac:	f04f 0c00 	mov.w	ip, #0
 8004eb0:	f104 0e14 	add.w	lr, r4, #20
 8004eb4:	f85e 2b04 	ldr.w	r2, [lr], #4
 8004eb8:	f8d9 1000 	ldr.w	r1, [r9]
 8004ebc:	fa1f fb82 	uxth.w	fp, r2
 8004ec0:	b289      	uxth	r1, r1
 8004ec2:	fb0a 110b 	mla	r1, sl, fp, r1
 8004ec6:	4461      	add	r1, ip
 8004ec8:	f8d9 c000 	ldr.w	ip, [r9]
 8004ecc:	0c12      	lsrs	r2, r2, #16
 8004ece:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8004ed2:	fb0a c202 	mla	r2, sl, r2, ip
 8004ed6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8004eda:	b289      	uxth	r1, r1
 8004edc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8004ee0:	4577      	cmp	r7, lr
 8004ee2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8004ee6:	f849 1b04 	str.w	r1, [r9], #4
 8004eea:	d8e3      	bhi.n	8004eb4 <__multiply+0xb0>
 8004eec:	9a01      	ldr	r2, [sp, #4]
 8004eee:	f845 c002 	str.w	ip, [r5, r2]
 8004ef2:	9a03      	ldr	r2, [sp, #12]
 8004ef4:	3304      	adds	r3, #4
 8004ef6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8004efa:	f1b9 0f00 	cmp.w	r9, #0
 8004efe:	d020      	beq.n	8004f42 <__multiply+0x13e>
 8004f00:	46ae      	mov	lr, r5
 8004f02:	f04f 0a00 	mov.w	sl, #0
 8004f06:	6829      	ldr	r1, [r5, #0]
 8004f08:	f104 0c14 	add.w	ip, r4, #20
 8004f0c:	f8bc b000 	ldrh.w	fp, [ip]
 8004f10:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8004f14:	b289      	uxth	r1, r1
 8004f16:	fb09 220b 	mla	r2, r9, fp, r2
 8004f1a:	4492      	add	sl, r2
 8004f1c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8004f20:	f84e 1b04 	str.w	r1, [lr], #4
 8004f24:	f85c 2b04 	ldr.w	r2, [ip], #4
 8004f28:	f8be 1000 	ldrh.w	r1, [lr]
 8004f2c:	0c12      	lsrs	r2, r2, #16
 8004f2e:	fb09 1102 	mla	r1, r9, r2, r1
 8004f32:	4567      	cmp	r7, ip
 8004f34:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8004f38:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8004f3c:	d8e6      	bhi.n	8004f0c <__multiply+0x108>
 8004f3e:	9a01      	ldr	r2, [sp, #4]
 8004f40:	50a9      	str	r1, [r5, r2]
 8004f42:	3504      	adds	r5, #4
 8004f44:	e79b      	b.n	8004e7e <__multiply+0x7a>
 8004f46:	3e01      	subs	r6, #1
 8004f48:	e79d      	b.n	8004e86 <__multiply+0x82>
 8004f4a:	bf00      	nop
 8004f4c:	08006477 	.word	0x08006477
 8004f50:	08006488 	.word	0x08006488

08004f54 <__pow5mult>:
 8004f54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004f58:	4615      	mov	r5, r2
 8004f5a:	f012 0203 	ands.w	r2, r2, #3
 8004f5e:	4606      	mov	r6, r0
 8004f60:	460f      	mov	r7, r1
 8004f62:	d007      	beq.n	8004f74 <__pow5mult+0x20>
 8004f64:	4c25      	ldr	r4, [pc, #148]	; (8004ffc <__pow5mult+0xa8>)
 8004f66:	3a01      	subs	r2, #1
 8004f68:	2300      	movs	r3, #0
 8004f6a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004f6e:	f7ff fe9f 	bl	8004cb0 <__multadd>
 8004f72:	4607      	mov	r7, r0
 8004f74:	10ad      	asrs	r5, r5, #2
 8004f76:	d03d      	beq.n	8004ff4 <__pow5mult+0xa0>
 8004f78:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8004f7a:	b97c      	cbnz	r4, 8004f9c <__pow5mult+0x48>
 8004f7c:	2010      	movs	r0, #16
 8004f7e:	f7ff fe11 	bl	8004ba4 <malloc>
 8004f82:	4602      	mov	r2, r0
 8004f84:	6270      	str	r0, [r6, #36]	; 0x24
 8004f86:	b928      	cbnz	r0, 8004f94 <__pow5mult+0x40>
 8004f88:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8004f8c:	4b1c      	ldr	r3, [pc, #112]	; (8005000 <__pow5mult+0xac>)
 8004f8e:	481d      	ldr	r0, [pc, #116]	; (8005004 <__pow5mult+0xb0>)
 8004f90:	f000 fc0a 	bl	80057a8 <__assert_func>
 8004f94:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004f98:	6004      	str	r4, [r0, #0]
 8004f9a:	60c4      	str	r4, [r0, #12]
 8004f9c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8004fa0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004fa4:	b94c      	cbnz	r4, 8004fba <__pow5mult+0x66>
 8004fa6:	f240 2171 	movw	r1, #625	; 0x271
 8004faa:	4630      	mov	r0, r6
 8004fac:	f7ff ff14 	bl	8004dd8 <__i2b>
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	4604      	mov	r4, r0
 8004fb4:	f8c8 0008 	str.w	r0, [r8, #8]
 8004fb8:	6003      	str	r3, [r0, #0]
 8004fba:	f04f 0900 	mov.w	r9, #0
 8004fbe:	07eb      	lsls	r3, r5, #31
 8004fc0:	d50a      	bpl.n	8004fd8 <__pow5mult+0x84>
 8004fc2:	4639      	mov	r1, r7
 8004fc4:	4622      	mov	r2, r4
 8004fc6:	4630      	mov	r0, r6
 8004fc8:	f7ff ff1c 	bl	8004e04 <__multiply>
 8004fcc:	4680      	mov	r8, r0
 8004fce:	4639      	mov	r1, r7
 8004fd0:	4630      	mov	r0, r6
 8004fd2:	f7ff fe4b 	bl	8004c6c <_Bfree>
 8004fd6:	4647      	mov	r7, r8
 8004fd8:	106d      	asrs	r5, r5, #1
 8004fda:	d00b      	beq.n	8004ff4 <__pow5mult+0xa0>
 8004fdc:	6820      	ldr	r0, [r4, #0]
 8004fde:	b938      	cbnz	r0, 8004ff0 <__pow5mult+0x9c>
 8004fe0:	4622      	mov	r2, r4
 8004fe2:	4621      	mov	r1, r4
 8004fe4:	4630      	mov	r0, r6
 8004fe6:	f7ff ff0d 	bl	8004e04 <__multiply>
 8004fea:	6020      	str	r0, [r4, #0]
 8004fec:	f8c0 9000 	str.w	r9, [r0]
 8004ff0:	4604      	mov	r4, r0
 8004ff2:	e7e4      	b.n	8004fbe <__pow5mult+0x6a>
 8004ff4:	4638      	mov	r0, r7
 8004ff6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004ffa:	bf00      	nop
 8004ffc:	080065d8 	.word	0x080065d8
 8005000:	08006405 	.word	0x08006405
 8005004:	08006488 	.word	0x08006488

08005008 <__lshift>:
 8005008:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800500c:	460c      	mov	r4, r1
 800500e:	4607      	mov	r7, r0
 8005010:	4691      	mov	r9, r2
 8005012:	6923      	ldr	r3, [r4, #16]
 8005014:	6849      	ldr	r1, [r1, #4]
 8005016:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800501a:	68a3      	ldr	r3, [r4, #8]
 800501c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005020:	f108 0601 	add.w	r6, r8, #1
 8005024:	42b3      	cmp	r3, r6
 8005026:	db0b      	blt.n	8005040 <__lshift+0x38>
 8005028:	4638      	mov	r0, r7
 800502a:	f7ff fddf 	bl	8004bec <_Balloc>
 800502e:	4605      	mov	r5, r0
 8005030:	b948      	cbnz	r0, 8005046 <__lshift+0x3e>
 8005032:	4602      	mov	r2, r0
 8005034:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005038:	4b29      	ldr	r3, [pc, #164]	; (80050e0 <__lshift+0xd8>)
 800503a:	482a      	ldr	r0, [pc, #168]	; (80050e4 <__lshift+0xdc>)
 800503c:	f000 fbb4 	bl	80057a8 <__assert_func>
 8005040:	3101      	adds	r1, #1
 8005042:	005b      	lsls	r3, r3, #1
 8005044:	e7ee      	b.n	8005024 <__lshift+0x1c>
 8005046:	2300      	movs	r3, #0
 8005048:	f100 0114 	add.w	r1, r0, #20
 800504c:	f100 0210 	add.w	r2, r0, #16
 8005050:	4618      	mov	r0, r3
 8005052:	4553      	cmp	r3, sl
 8005054:	db37      	blt.n	80050c6 <__lshift+0xbe>
 8005056:	6920      	ldr	r0, [r4, #16]
 8005058:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800505c:	f104 0314 	add.w	r3, r4, #20
 8005060:	f019 091f 	ands.w	r9, r9, #31
 8005064:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005068:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800506c:	d02f      	beq.n	80050ce <__lshift+0xc6>
 800506e:	468a      	mov	sl, r1
 8005070:	f04f 0c00 	mov.w	ip, #0
 8005074:	f1c9 0e20 	rsb	lr, r9, #32
 8005078:	681a      	ldr	r2, [r3, #0]
 800507a:	fa02 f209 	lsl.w	r2, r2, r9
 800507e:	ea42 020c 	orr.w	r2, r2, ip
 8005082:	f84a 2b04 	str.w	r2, [sl], #4
 8005086:	f853 2b04 	ldr.w	r2, [r3], #4
 800508a:	4298      	cmp	r0, r3
 800508c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8005090:	d8f2      	bhi.n	8005078 <__lshift+0x70>
 8005092:	1b03      	subs	r3, r0, r4
 8005094:	3b15      	subs	r3, #21
 8005096:	f023 0303 	bic.w	r3, r3, #3
 800509a:	3304      	adds	r3, #4
 800509c:	f104 0215 	add.w	r2, r4, #21
 80050a0:	4290      	cmp	r0, r2
 80050a2:	bf38      	it	cc
 80050a4:	2304      	movcc	r3, #4
 80050a6:	f841 c003 	str.w	ip, [r1, r3]
 80050aa:	f1bc 0f00 	cmp.w	ip, #0
 80050ae:	d001      	beq.n	80050b4 <__lshift+0xac>
 80050b0:	f108 0602 	add.w	r6, r8, #2
 80050b4:	3e01      	subs	r6, #1
 80050b6:	4638      	mov	r0, r7
 80050b8:	4621      	mov	r1, r4
 80050ba:	612e      	str	r6, [r5, #16]
 80050bc:	f7ff fdd6 	bl	8004c6c <_Bfree>
 80050c0:	4628      	mov	r0, r5
 80050c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050c6:	f842 0f04 	str.w	r0, [r2, #4]!
 80050ca:	3301      	adds	r3, #1
 80050cc:	e7c1      	b.n	8005052 <__lshift+0x4a>
 80050ce:	3904      	subs	r1, #4
 80050d0:	f853 2b04 	ldr.w	r2, [r3], #4
 80050d4:	4298      	cmp	r0, r3
 80050d6:	f841 2f04 	str.w	r2, [r1, #4]!
 80050da:	d8f9      	bhi.n	80050d0 <__lshift+0xc8>
 80050dc:	e7ea      	b.n	80050b4 <__lshift+0xac>
 80050de:	bf00      	nop
 80050e0:	08006477 	.word	0x08006477
 80050e4:	08006488 	.word	0x08006488

080050e8 <__mcmp>:
 80050e8:	4603      	mov	r3, r0
 80050ea:	690a      	ldr	r2, [r1, #16]
 80050ec:	6900      	ldr	r0, [r0, #16]
 80050ee:	b530      	push	{r4, r5, lr}
 80050f0:	1a80      	subs	r0, r0, r2
 80050f2:	d10d      	bne.n	8005110 <__mcmp+0x28>
 80050f4:	3314      	adds	r3, #20
 80050f6:	3114      	adds	r1, #20
 80050f8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80050fc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005100:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005104:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005108:	4295      	cmp	r5, r2
 800510a:	d002      	beq.n	8005112 <__mcmp+0x2a>
 800510c:	d304      	bcc.n	8005118 <__mcmp+0x30>
 800510e:	2001      	movs	r0, #1
 8005110:	bd30      	pop	{r4, r5, pc}
 8005112:	42a3      	cmp	r3, r4
 8005114:	d3f4      	bcc.n	8005100 <__mcmp+0x18>
 8005116:	e7fb      	b.n	8005110 <__mcmp+0x28>
 8005118:	f04f 30ff 	mov.w	r0, #4294967295
 800511c:	e7f8      	b.n	8005110 <__mcmp+0x28>
	...

08005120 <__mdiff>:
 8005120:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005124:	460d      	mov	r5, r1
 8005126:	4607      	mov	r7, r0
 8005128:	4611      	mov	r1, r2
 800512a:	4628      	mov	r0, r5
 800512c:	4614      	mov	r4, r2
 800512e:	f7ff ffdb 	bl	80050e8 <__mcmp>
 8005132:	1e06      	subs	r6, r0, #0
 8005134:	d111      	bne.n	800515a <__mdiff+0x3a>
 8005136:	4631      	mov	r1, r6
 8005138:	4638      	mov	r0, r7
 800513a:	f7ff fd57 	bl	8004bec <_Balloc>
 800513e:	4602      	mov	r2, r0
 8005140:	b928      	cbnz	r0, 800514e <__mdiff+0x2e>
 8005142:	f240 2132 	movw	r1, #562	; 0x232
 8005146:	4b3a      	ldr	r3, [pc, #232]	; (8005230 <__mdiff+0x110>)
 8005148:	483a      	ldr	r0, [pc, #232]	; (8005234 <__mdiff+0x114>)
 800514a:	f000 fb2d 	bl	80057a8 <__assert_func>
 800514e:	2301      	movs	r3, #1
 8005150:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8005154:	4610      	mov	r0, r2
 8005156:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800515a:	bfa4      	itt	ge
 800515c:	4623      	movge	r3, r4
 800515e:	462c      	movge	r4, r5
 8005160:	4638      	mov	r0, r7
 8005162:	6861      	ldr	r1, [r4, #4]
 8005164:	bfa6      	itte	ge
 8005166:	461d      	movge	r5, r3
 8005168:	2600      	movge	r6, #0
 800516a:	2601      	movlt	r6, #1
 800516c:	f7ff fd3e 	bl	8004bec <_Balloc>
 8005170:	4602      	mov	r2, r0
 8005172:	b918      	cbnz	r0, 800517c <__mdiff+0x5c>
 8005174:	f44f 7110 	mov.w	r1, #576	; 0x240
 8005178:	4b2d      	ldr	r3, [pc, #180]	; (8005230 <__mdiff+0x110>)
 800517a:	e7e5      	b.n	8005148 <__mdiff+0x28>
 800517c:	f102 0814 	add.w	r8, r2, #20
 8005180:	46c2      	mov	sl, r8
 8005182:	f04f 0c00 	mov.w	ip, #0
 8005186:	6927      	ldr	r7, [r4, #16]
 8005188:	60c6      	str	r6, [r0, #12]
 800518a:	692e      	ldr	r6, [r5, #16]
 800518c:	f104 0014 	add.w	r0, r4, #20
 8005190:	f105 0914 	add.w	r9, r5, #20
 8005194:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8005198:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800519c:	3410      	adds	r4, #16
 800519e:	f854 bf04 	ldr.w	fp, [r4, #4]!
 80051a2:	f859 3b04 	ldr.w	r3, [r9], #4
 80051a6:	fa1f f18b 	uxth.w	r1, fp
 80051aa:	448c      	add	ip, r1
 80051ac:	b299      	uxth	r1, r3
 80051ae:	0c1b      	lsrs	r3, r3, #16
 80051b0:	ebac 0101 	sub.w	r1, ip, r1
 80051b4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80051b8:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80051bc:	b289      	uxth	r1, r1
 80051be:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80051c2:	454e      	cmp	r6, r9
 80051c4:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80051c8:	f84a 3b04 	str.w	r3, [sl], #4
 80051cc:	d8e7      	bhi.n	800519e <__mdiff+0x7e>
 80051ce:	1b73      	subs	r3, r6, r5
 80051d0:	3b15      	subs	r3, #21
 80051d2:	f023 0303 	bic.w	r3, r3, #3
 80051d6:	3515      	adds	r5, #21
 80051d8:	3304      	adds	r3, #4
 80051da:	42ae      	cmp	r6, r5
 80051dc:	bf38      	it	cc
 80051de:	2304      	movcc	r3, #4
 80051e0:	4418      	add	r0, r3
 80051e2:	4443      	add	r3, r8
 80051e4:	461e      	mov	r6, r3
 80051e6:	4605      	mov	r5, r0
 80051e8:	4575      	cmp	r5, lr
 80051ea:	d30e      	bcc.n	800520a <__mdiff+0xea>
 80051ec:	f10e 0103 	add.w	r1, lr, #3
 80051f0:	1a09      	subs	r1, r1, r0
 80051f2:	f021 0103 	bic.w	r1, r1, #3
 80051f6:	3803      	subs	r0, #3
 80051f8:	4586      	cmp	lr, r0
 80051fa:	bf38      	it	cc
 80051fc:	2100      	movcc	r1, #0
 80051fe:	4419      	add	r1, r3
 8005200:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8005204:	b18b      	cbz	r3, 800522a <__mdiff+0x10a>
 8005206:	6117      	str	r7, [r2, #16]
 8005208:	e7a4      	b.n	8005154 <__mdiff+0x34>
 800520a:	f855 8b04 	ldr.w	r8, [r5], #4
 800520e:	fa1f f188 	uxth.w	r1, r8
 8005212:	4461      	add	r1, ip
 8005214:	140c      	asrs	r4, r1, #16
 8005216:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800521a:	b289      	uxth	r1, r1
 800521c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8005220:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8005224:	f846 1b04 	str.w	r1, [r6], #4
 8005228:	e7de      	b.n	80051e8 <__mdiff+0xc8>
 800522a:	3f01      	subs	r7, #1
 800522c:	e7e8      	b.n	8005200 <__mdiff+0xe0>
 800522e:	bf00      	nop
 8005230:	08006477 	.word	0x08006477
 8005234:	08006488 	.word	0x08006488

08005238 <__d2b>:
 8005238:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800523c:	2101      	movs	r1, #1
 800523e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8005242:	4690      	mov	r8, r2
 8005244:	461d      	mov	r5, r3
 8005246:	f7ff fcd1 	bl	8004bec <_Balloc>
 800524a:	4604      	mov	r4, r0
 800524c:	b930      	cbnz	r0, 800525c <__d2b+0x24>
 800524e:	4602      	mov	r2, r0
 8005250:	f240 310a 	movw	r1, #778	; 0x30a
 8005254:	4b24      	ldr	r3, [pc, #144]	; (80052e8 <__d2b+0xb0>)
 8005256:	4825      	ldr	r0, [pc, #148]	; (80052ec <__d2b+0xb4>)
 8005258:	f000 faa6 	bl	80057a8 <__assert_func>
 800525c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8005260:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8005264:	bb2d      	cbnz	r5, 80052b2 <__d2b+0x7a>
 8005266:	9301      	str	r3, [sp, #4]
 8005268:	f1b8 0300 	subs.w	r3, r8, #0
 800526c:	d026      	beq.n	80052bc <__d2b+0x84>
 800526e:	4668      	mov	r0, sp
 8005270:	9300      	str	r3, [sp, #0]
 8005272:	f7ff fd83 	bl	8004d7c <__lo0bits>
 8005276:	9900      	ldr	r1, [sp, #0]
 8005278:	b1f0      	cbz	r0, 80052b8 <__d2b+0x80>
 800527a:	9a01      	ldr	r2, [sp, #4]
 800527c:	f1c0 0320 	rsb	r3, r0, #32
 8005280:	fa02 f303 	lsl.w	r3, r2, r3
 8005284:	430b      	orrs	r3, r1
 8005286:	40c2      	lsrs	r2, r0
 8005288:	6163      	str	r3, [r4, #20]
 800528a:	9201      	str	r2, [sp, #4]
 800528c:	9b01      	ldr	r3, [sp, #4]
 800528e:	2b00      	cmp	r3, #0
 8005290:	bf14      	ite	ne
 8005292:	2102      	movne	r1, #2
 8005294:	2101      	moveq	r1, #1
 8005296:	61a3      	str	r3, [r4, #24]
 8005298:	6121      	str	r1, [r4, #16]
 800529a:	b1c5      	cbz	r5, 80052ce <__d2b+0x96>
 800529c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80052a0:	4405      	add	r5, r0
 80052a2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80052a6:	603d      	str	r5, [r7, #0]
 80052a8:	6030      	str	r0, [r6, #0]
 80052aa:	4620      	mov	r0, r4
 80052ac:	b002      	add	sp, #8
 80052ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80052b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80052b6:	e7d6      	b.n	8005266 <__d2b+0x2e>
 80052b8:	6161      	str	r1, [r4, #20]
 80052ba:	e7e7      	b.n	800528c <__d2b+0x54>
 80052bc:	a801      	add	r0, sp, #4
 80052be:	f7ff fd5d 	bl	8004d7c <__lo0bits>
 80052c2:	2101      	movs	r1, #1
 80052c4:	9b01      	ldr	r3, [sp, #4]
 80052c6:	6121      	str	r1, [r4, #16]
 80052c8:	6163      	str	r3, [r4, #20]
 80052ca:	3020      	adds	r0, #32
 80052cc:	e7e5      	b.n	800529a <__d2b+0x62>
 80052ce:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 80052d2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80052d6:	6038      	str	r0, [r7, #0]
 80052d8:	6918      	ldr	r0, [r3, #16]
 80052da:	f7ff fd2f 	bl	8004d3c <__hi0bits>
 80052de:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 80052e2:	6031      	str	r1, [r6, #0]
 80052e4:	e7e1      	b.n	80052aa <__d2b+0x72>
 80052e6:	bf00      	nop
 80052e8:	08006477 	.word	0x08006477
 80052ec:	08006488 	.word	0x08006488

080052f0 <_calloc_r>:
 80052f0:	b570      	push	{r4, r5, r6, lr}
 80052f2:	fba1 5402 	umull	r5, r4, r1, r2
 80052f6:	b934      	cbnz	r4, 8005306 <_calloc_r+0x16>
 80052f8:	4629      	mov	r1, r5
 80052fa:	f000 f875 	bl	80053e8 <_malloc_r>
 80052fe:	4606      	mov	r6, r0
 8005300:	b928      	cbnz	r0, 800530e <_calloc_r+0x1e>
 8005302:	4630      	mov	r0, r6
 8005304:	bd70      	pop	{r4, r5, r6, pc}
 8005306:	220c      	movs	r2, #12
 8005308:	2600      	movs	r6, #0
 800530a:	6002      	str	r2, [r0, #0]
 800530c:	e7f9      	b.n	8005302 <_calloc_r+0x12>
 800530e:	462a      	mov	r2, r5
 8005310:	4621      	mov	r1, r4
 8005312:	f7fe f93f 	bl	8003594 <memset>
 8005316:	e7f4      	b.n	8005302 <_calloc_r+0x12>

08005318 <_free_r>:
 8005318:	b538      	push	{r3, r4, r5, lr}
 800531a:	4605      	mov	r5, r0
 800531c:	2900      	cmp	r1, #0
 800531e:	d040      	beq.n	80053a2 <_free_r+0x8a>
 8005320:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005324:	1f0c      	subs	r4, r1, #4
 8005326:	2b00      	cmp	r3, #0
 8005328:	bfb8      	it	lt
 800532a:	18e4      	addlt	r4, r4, r3
 800532c:	f000 fa98 	bl	8005860 <__malloc_lock>
 8005330:	4a1c      	ldr	r2, [pc, #112]	; (80053a4 <_free_r+0x8c>)
 8005332:	6813      	ldr	r3, [r2, #0]
 8005334:	b933      	cbnz	r3, 8005344 <_free_r+0x2c>
 8005336:	6063      	str	r3, [r4, #4]
 8005338:	6014      	str	r4, [r2, #0]
 800533a:	4628      	mov	r0, r5
 800533c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005340:	f000 ba94 	b.w	800586c <__malloc_unlock>
 8005344:	42a3      	cmp	r3, r4
 8005346:	d908      	bls.n	800535a <_free_r+0x42>
 8005348:	6820      	ldr	r0, [r4, #0]
 800534a:	1821      	adds	r1, r4, r0
 800534c:	428b      	cmp	r3, r1
 800534e:	bf01      	itttt	eq
 8005350:	6819      	ldreq	r1, [r3, #0]
 8005352:	685b      	ldreq	r3, [r3, #4]
 8005354:	1809      	addeq	r1, r1, r0
 8005356:	6021      	streq	r1, [r4, #0]
 8005358:	e7ed      	b.n	8005336 <_free_r+0x1e>
 800535a:	461a      	mov	r2, r3
 800535c:	685b      	ldr	r3, [r3, #4]
 800535e:	b10b      	cbz	r3, 8005364 <_free_r+0x4c>
 8005360:	42a3      	cmp	r3, r4
 8005362:	d9fa      	bls.n	800535a <_free_r+0x42>
 8005364:	6811      	ldr	r1, [r2, #0]
 8005366:	1850      	adds	r0, r2, r1
 8005368:	42a0      	cmp	r0, r4
 800536a:	d10b      	bne.n	8005384 <_free_r+0x6c>
 800536c:	6820      	ldr	r0, [r4, #0]
 800536e:	4401      	add	r1, r0
 8005370:	1850      	adds	r0, r2, r1
 8005372:	4283      	cmp	r3, r0
 8005374:	6011      	str	r1, [r2, #0]
 8005376:	d1e0      	bne.n	800533a <_free_r+0x22>
 8005378:	6818      	ldr	r0, [r3, #0]
 800537a:	685b      	ldr	r3, [r3, #4]
 800537c:	4401      	add	r1, r0
 800537e:	6011      	str	r1, [r2, #0]
 8005380:	6053      	str	r3, [r2, #4]
 8005382:	e7da      	b.n	800533a <_free_r+0x22>
 8005384:	d902      	bls.n	800538c <_free_r+0x74>
 8005386:	230c      	movs	r3, #12
 8005388:	602b      	str	r3, [r5, #0]
 800538a:	e7d6      	b.n	800533a <_free_r+0x22>
 800538c:	6820      	ldr	r0, [r4, #0]
 800538e:	1821      	adds	r1, r4, r0
 8005390:	428b      	cmp	r3, r1
 8005392:	bf01      	itttt	eq
 8005394:	6819      	ldreq	r1, [r3, #0]
 8005396:	685b      	ldreq	r3, [r3, #4]
 8005398:	1809      	addeq	r1, r1, r0
 800539a:	6021      	streq	r1, [r4, #0]
 800539c:	6063      	str	r3, [r4, #4]
 800539e:	6054      	str	r4, [r2, #4]
 80053a0:	e7cb      	b.n	800533a <_free_r+0x22>
 80053a2:	bd38      	pop	{r3, r4, r5, pc}
 80053a4:	20000270 	.word	0x20000270

080053a8 <sbrk_aligned>:
 80053a8:	b570      	push	{r4, r5, r6, lr}
 80053aa:	4e0e      	ldr	r6, [pc, #56]	; (80053e4 <sbrk_aligned+0x3c>)
 80053ac:	460c      	mov	r4, r1
 80053ae:	6831      	ldr	r1, [r6, #0]
 80053b0:	4605      	mov	r5, r0
 80053b2:	b911      	cbnz	r1, 80053ba <sbrk_aligned+0x12>
 80053b4:	f000 f9e8 	bl	8005788 <_sbrk_r>
 80053b8:	6030      	str	r0, [r6, #0]
 80053ba:	4621      	mov	r1, r4
 80053bc:	4628      	mov	r0, r5
 80053be:	f000 f9e3 	bl	8005788 <_sbrk_r>
 80053c2:	1c43      	adds	r3, r0, #1
 80053c4:	d00a      	beq.n	80053dc <sbrk_aligned+0x34>
 80053c6:	1cc4      	adds	r4, r0, #3
 80053c8:	f024 0403 	bic.w	r4, r4, #3
 80053cc:	42a0      	cmp	r0, r4
 80053ce:	d007      	beq.n	80053e0 <sbrk_aligned+0x38>
 80053d0:	1a21      	subs	r1, r4, r0
 80053d2:	4628      	mov	r0, r5
 80053d4:	f000 f9d8 	bl	8005788 <_sbrk_r>
 80053d8:	3001      	adds	r0, #1
 80053da:	d101      	bne.n	80053e0 <sbrk_aligned+0x38>
 80053dc:	f04f 34ff 	mov.w	r4, #4294967295
 80053e0:	4620      	mov	r0, r4
 80053e2:	bd70      	pop	{r4, r5, r6, pc}
 80053e4:	20000274 	.word	0x20000274

080053e8 <_malloc_r>:
 80053e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80053ec:	1ccd      	adds	r5, r1, #3
 80053ee:	f025 0503 	bic.w	r5, r5, #3
 80053f2:	3508      	adds	r5, #8
 80053f4:	2d0c      	cmp	r5, #12
 80053f6:	bf38      	it	cc
 80053f8:	250c      	movcc	r5, #12
 80053fa:	2d00      	cmp	r5, #0
 80053fc:	4607      	mov	r7, r0
 80053fe:	db01      	blt.n	8005404 <_malloc_r+0x1c>
 8005400:	42a9      	cmp	r1, r5
 8005402:	d905      	bls.n	8005410 <_malloc_r+0x28>
 8005404:	230c      	movs	r3, #12
 8005406:	2600      	movs	r6, #0
 8005408:	603b      	str	r3, [r7, #0]
 800540a:	4630      	mov	r0, r6
 800540c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005410:	4e2e      	ldr	r6, [pc, #184]	; (80054cc <_malloc_r+0xe4>)
 8005412:	f000 fa25 	bl	8005860 <__malloc_lock>
 8005416:	6833      	ldr	r3, [r6, #0]
 8005418:	461c      	mov	r4, r3
 800541a:	bb34      	cbnz	r4, 800546a <_malloc_r+0x82>
 800541c:	4629      	mov	r1, r5
 800541e:	4638      	mov	r0, r7
 8005420:	f7ff ffc2 	bl	80053a8 <sbrk_aligned>
 8005424:	1c43      	adds	r3, r0, #1
 8005426:	4604      	mov	r4, r0
 8005428:	d14d      	bne.n	80054c6 <_malloc_r+0xde>
 800542a:	6834      	ldr	r4, [r6, #0]
 800542c:	4626      	mov	r6, r4
 800542e:	2e00      	cmp	r6, #0
 8005430:	d140      	bne.n	80054b4 <_malloc_r+0xcc>
 8005432:	6823      	ldr	r3, [r4, #0]
 8005434:	4631      	mov	r1, r6
 8005436:	4638      	mov	r0, r7
 8005438:	eb04 0803 	add.w	r8, r4, r3
 800543c:	f000 f9a4 	bl	8005788 <_sbrk_r>
 8005440:	4580      	cmp	r8, r0
 8005442:	d13a      	bne.n	80054ba <_malloc_r+0xd2>
 8005444:	6821      	ldr	r1, [r4, #0]
 8005446:	3503      	adds	r5, #3
 8005448:	1a6d      	subs	r5, r5, r1
 800544a:	f025 0503 	bic.w	r5, r5, #3
 800544e:	3508      	adds	r5, #8
 8005450:	2d0c      	cmp	r5, #12
 8005452:	bf38      	it	cc
 8005454:	250c      	movcc	r5, #12
 8005456:	4638      	mov	r0, r7
 8005458:	4629      	mov	r1, r5
 800545a:	f7ff ffa5 	bl	80053a8 <sbrk_aligned>
 800545e:	3001      	adds	r0, #1
 8005460:	d02b      	beq.n	80054ba <_malloc_r+0xd2>
 8005462:	6823      	ldr	r3, [r4, #0]
 8005464:	442b      	add	r3, r5
 8005466:	6023      	str	r3, [r4, #0]
 8005468:	e00e      	b.n	8005488 <_malloc_r+0xa0>
 800546a:	6822      	ldr	r2, [r4, #0]
 800546c:	1b52      	subs	r2, r2, r5
 800546e:	d41e      	bmi.n	80054ae <_malloc_r+0xc6>
 8005470:	2a0b      	cmp	r2, #11
 8005472:	d916      	bls.n	80054a2 <_malloc_r+0xba>
 8005474:	1961      	adds	r1, r4, r5
 8005476:	42a3      	cmp	r3, r4
 8005478:	6025      	str	r5, [r4, #0]
 800547a:	bf18      	it	ne
 800547c:	6059      	strne	r1, [r3, #4]
 800547e:	6863      	ldr	r3, [r4, #4]
 8005480:	bf08      	it	eq
 8005482:	6031      	streq	r1, [r6, #0]
 8005484:	5162      	str	r2, [r4, r5]
 8005486:	604b      	str	r3, [r1, #4]
 8005488:	4638      	mov	r0, r7
 800548a:	f104 060b 	add.w	r6, r4, #11
 800548e:	f000 f9ed 	bl	800586c <__malloc_unlock>
 8005492:	f026 0607 	bic.w	r6, r6, #7
 8005496:	1d23      	adds	r3, r4, #4
 8005498:	1af2      	subs	r2, r6, r3
 800549a:	d0b6      	beq.n	800540a <_malloc_r+0x22>
 800549c:	1b9b      	subs	r3, r3, r6
 800549e:	50a3      	str	r3, [r4, r2]
 80054a0:	e7b3      	b.n	800540a <_malloc_r+0x22>
 80054a2:	6862      	ldr	r2, [r4, #4]
 80054a4:	42a3      	cmp	r3, r4
 80054a6:	bf0c      	ite	eq
 80054a8:	6032      	streq	r2, [r6, #0]
 80054aa:	605a      	strne	r2, [r3, #4]
 80054ac:	e7ec      	b.n	8005488 <_malloc_r+0xa0>
 80054ae:	4623      	mov	r3, r4
 80054b0:	6864      	ldr	r4, [r4, #4]
 80054b2:	e7b2      	b.n	800541a <_malloc_r+0x32>
 80054b4:	4634      	mov	r4, r6
 80054b6:	6876      	ldr	r6, [r6, #4]
 80054b8:	e7b9      	b.n	800542e <_malloc_r+0x46>
 80054ba:	230c      	movs	r3, #12
 80054bc:	4638      	mov	r0, r7
 80054be:	603b      	str	r3, [r7, #0]
 80054c0:	f000 f9d4 	bl	800586c <__malloc_unlock>
 80054c4:	e7a1      	b.n	800540a <_malloc_r+0x22>
 80054c6:	6025      	str	r5, [r4, #0]
 80054c8:	e7de      	b.n	8005488 <_malloc_r+0xa0>
 80054ca:	bf00      	nop
 80054cc:	20000270 	.word	0x20000270

080054d0 <__ssputs_r>:
 80054d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80054d4:	688e      	ldr	r6, [r1, #8]
 80054d6:	4682      	mov	sl, r0
 80054d8:	429e      	cmp	r6, r3
 80054da:	460c      	mov	r4, r1
 80054dc:	4690      	mov	r8, r2
 80054de:	461f      	mov	r7, r3
 80054e0:	d838      	bhi.n	8005554 <__ssputs_r+0x84>
 80054e2:	898a      	ldrh	r2, [r1, #12]
 80054e4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80054e8:	d032      	beq.n	8005550 <__ssputs_r+0x80>
 80054ea:	6825      	ldr	r5, [r4, #0]
 80054ec:	6909      	ldr	r1, [r1, #16]
 80054ee:	3301      	adds	r3, #1
 80054f0:	eba5 0901 	sub.w	r9, r5, r1
 80054f4:	6965      	ldr	r5, [r4, #20]
 80054f6:	444b      	add	r3, r9
 80054f8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80054fc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005500:	106d      	asrs	r5, r5, #1
 8005502:	429d      	cmp	r5, r3
 8005504:	bf38      	it	cc
 8005506:	461d      	movcc	r5, r3
 8005508:	0553      	lsls	r3, r2, #21
 800550a:	d531      	bpl.n	8005570 <__ssputs_r+0xa0>
 800550c:	4629      	mov	r1, r5
 800550e:	f7ff ff6b 	bl	80053e8 <_malloc_r>
 8005512:	4606      	mov	r6, r0
 8005514:	b950      	cbnz	r0, 800552c <__ssputs_r+0x5c>
 8005516:	230c      	movs	r3, #12
 8005518:	f04f 30ff 	mov.w	r0, #4294967295
 800551c:	f8ca 3000 	str.w	r3, [sl]
 8005520:	89a3      	ldrh	r3, [r4, #12]
 8005522:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005526:	81a3      	strh	r3, [r4, #12]
 8005528:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800552c:	464a      	mov	r2, r9
 800552e:	6921      	ldr	r1, [r4, #16]
 8005530:	f7ff fb4e 	bl	8004bd0 <memcpy>
 8005534:	89a3      	ldrh	r3, [r4, #12]
 8005536:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800553a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800553e:	81a3      	strh	r3, [r4, #12]
 8005540:	6126      	str	r6, [r4, #16]
 8005542:	444e      	add	r6, r9
 8005544:	6026      	str	r6, [r4, #0]
 8005546:	463e      	mov	r6, r7
 8005548:	6165      	str	r5, [r4, #20]
 800554a:	eba5 0509 	sub.w	r5, r5, r9
 800554e:	60a5      	str	r5, [r4, #8]
 8005550:	42be      	cmp	r6, r7
 8005552:	d900      	bls.n	8005556 <__ssputs_r+0x86>
 8005554:	463e      	mov	r6, r7
 8005556:	4632      	mov	r2, r6
 8005558:	4641      	mov	r1, r8
 800555a:	6820      	ldr	r0, [r4, #0]
 800555c:	f000 f966 	bl	800582c <memmove>
 8005560:	68a3      	ldr	r3, [r4, #8]
 8005562:	2000      	movs	r0, #0
 8005564:	1b9b      	subs	r3, r3, r6
 8005566:	60a3      	str	r3, [r4, #8]
 8005568:	6823      	ldr	r3, [r4, #0]
 800556a:	4433      	add	r3, r6
 800556c:	6023      	str	r3, [r4, #0]
 800556e:	e7db      	b.n	8005528 <__ssputs_r+0x58>
 8005570:	462a      	mov	r2, r5
 8005572:	f000 f981 	bl	8005878 <_realloc_r>
 8005576:	4606      	mov	r6, r0
 8005578:	2800      	cmp	r0, #0
 800557a:	d1e1      	bne.n	8005540 <__ssputs_r+0x70>
 800557c:	4650      	mov	r0, sl
 800557e:	6921      	ldr	r1, [r4, #16]
 8005580:	f7ff feca 	bl	8005318 <_free_r>
 8005584:	e7c7      	b.n	8005516 <__ssputs_r+0x46>
	...

08005588 <_svfiprintf_r>:
 8005588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800558c:	4698      	mov	r8, r3
 800558e:	898b      	ldrh	r3, [r1, #12]
 8005590:	4607      	mov	r7, r0
 8005592:	061b      	lsls	r3, r3, #24
 8005594:	460d      	mov	r5, r1
 8005596:	4614      	mov	r4, r2
 8005598:	b09d      	sub	sp, #116	; 0x74
 800559a:	d50e      	bpl.n	80055ba <_svfiprintf_r+0x32>
 800559c:	690b      	ldr	r3, [r1, #16]
 800559e:	b963      	cbnz	r3, 80055ba <_svfiprintf_r+0x32>
 80055a0:	2140      	movs	r1, #64	; 0x40
 80055a2:	f7ff ff21 	bl	80053e8 <_malloc_r>
 80055a6:	6028      	str	r0, [r5, #0]
 80055a8:	6128      	str	r0, [r5, #16]
 80055aa:	b920      	cbnz	r0, 80055b6 <_svfiprintf_r+0x2e>
 80055ac:	230c      	movs	r3, #12
 80055ae:	603b      	str	r3, [r7, #0]
 80055b0:	f04f 30ff 	mov.w	r0, #4294967295
 80055b4:	e0d1      	b.n	800575a <_svfiprintf_r+0x1d2>
 80055b6:	2340      	movs	r3, #64	; 0x40
 80055b8:	616b      	str	r3, [r5, #20]
 80055ba:	2300      	movs	r3, #0
 80055bc:	9309      	str	r3, [sp, #36]	; 0x24
 80055be:	2320      	movs	r3, #32
 80055c0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80055c4:	2330      	movs	r3, #48	; 0x30
 80055c6:	f04f 0901 	mov.w	r9, #1
 80055ca:	f8cd 800c 	str.w	r8, [sp, #12]
 80055ce:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005774 <_svfiprintf_r+0x1ec>
 80055d2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80055d6:	4623      	mov	r3, r4
 80055d8:	469a      	mov	sl, r3
 80055da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80055de:	b10a      	cbz	r2, 80055e4 <_svfiprintf_r+0x5c>
 80055e0:	2a25      	cmp	r2, #37	; 0x25
 80055e2:	d1f9      	bne.n	80055d8 <_svfiprintf_r+0x50>
 80055e4:	ebba 0b04 	subs.w	fp, sl, r4
 80055e8:	d00b      	beq.n	8005602 <_svfiprintf_r+0x7a>
 80055ea:	465b      	mov	r3, fp
 80055ec:	4622      	mov	r2, r4
 80055ee:	4629      	mov	r1, r5
 80055f0:	4638      	mov	r0, r7
 80055f2:	f7ff ff6d 	bl	80054d0 <__ssputs_r>
 80055f6:	3001      	adds	r0, #1
 80055f8:	f000 80aa 	beq.w	8005750 <_svfiprintf_r+0x1c8>
 80055fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80055fe:	445a      	add	r2, fp
 8005600:	9209      	str	r2, [sp, #36]	; 0x24
 8005602:	f89a 3000 	ldrb.w	r3, [sl]
 8005606:	2b00      	cmp	r3, #0
 8005608:	f000 80a2 	beq.w	8005750 <_svfiprintf_r+0x1c8>
 800560c:	2300      	movs	r3, #0
 800560e:	f04f 32ff 	mov.w	r2, #4294967295
 8005612:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005616:	f10a 0a01 	add.w	sl, sl, #1
 800561a:	9304      	str	r3, [sp, #16]
 800561c:	9307      	str	r3, [sp, #28]
 800561e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005622:	931a      	str	r3, [sp, #104]	; 0x68
 8005624:	4654      	mov	r4, sl
 8005626:	2205      	movs	r2, #5
 8005628:	f814 1b01 	ldrb.w	r1, [r4], #1
 800562c:	4851      	ldr	r0, [pc, #324]	; (8005774 <_svfiprintf_r+0x1ec>)
 800562e:	f7ff fac1 	bl	8004bb4 <memchr>
 8005632:	9a04      	ldr	r2, [sp, #16]
 8005634:	b9d8      	cbnz	r0, 800566e <_svfiprintf_r+0xe6>
 8005636:	06d0      	lsls	r0, r2, #27
 8005638:	bf44      	itt	mi
 800563a:	2320      	movmi	r3, #32
 800563c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005640:	0711      	lsls	r1, r2, #28
 8005642:	bf44      	itt	mi
 8005644:	232b      	movmi	r3, #43	; 0x2b
 8005646:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800564a:	f89a 3000 	ldrb.w	r3, [sl]
 800564e:	2b2a      	cmp	r3, #42	; 0x2a
 8005650:	d015      	beq.n	800567e <_svfiprintf_r+0xf6>
 8005652:	4654      	mov	r4, sl
 8005654:	2000      	movs	r0, #0
 8005656:	f04f 0c0a 	mov.w	ip, #10
 800565a:	9a07      	ldr	r2, [sp, #28]
 800565c:	4621      	mov	r1, r4
 800565e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005662:	3b30      	subs	r3, #48	; 0x30
 8005664:	2b09      	cmp	r3, #9
 8005666:	d94e      	bls.n	8005706 <_svfiprintf_r+0x17e>
 8005668:	b1b0      	cbz	r0, 8005698 <_svfiprintf_r+0x110>
 800566a:	9207      	str	r2, [sp, #28]
 800566c:	e014      	b.n	8005698 <_svfiprintf_r+0x110>
 800566e:	eba0 0308 	sub.w	r3, r0, r8
 8005672:	fa09 f303 	lsl.w	r3, r9, r3
 8005676:	4313      	orrs	r3, r2
 8005678:	46a2      	mov	sl, r4
 800567a:	9304      	str	r3, [sp, #16]
 800567c:	e7d2      	b.n	8005624 <_svfiprintf_r+0x9c>
 800567e:	9b03      	ldr	r3, [sp, #12]
 8005680:	1d19      	adds	r1, r3, #4
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	9103      	str	r1, [sp, #12]
 8005686:	2b00      	cmp	r3, #0
 8005688:	bfbb      	ittet	lt
 800568a:	425b      	neglt	r3, r3
 800568c:	f042 0202 	orrlt.w	r2, r2, #2
 8005690:	9307      	strge	r3, [sp, #28]
 8005692:	9307      	strlt	r3, [sp, #28]
 8005694:	bfb8      	it	lt
 8005696:	9204      	strlt	r2, [sp, #16]
 8005698:	7823      	ldrb	r3, [r4, #0]
 800569a:	2b2e      	cmp	r3, #46	; 0x2e
 800569c:	d10c      	bne.n	80056b8 <_svfiprintf_r+0x130>
 800569e:	7863      	ldrb	r3, [r4, #1]
 80056a0:	2b2a      	cmp	r3, #42	; 0x2a
 80056a2:	d135      	bne.n	8005710 <_svfiprintf_r+0x188>
 80056a4:	9b03      	ldr	r3, [sp, #12]
 80056a6:	3402      	adds	r4, #2
 80056a8:	1d1a      	adds	r2, r3, #4
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	9203      	str	r2, [sp, #12]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	bfb8      	it	lt
 80056b2:	f04f 33ff 	movlt.w	r3, #4294967295
 80056b6:	9305      	str	r3, [sp, #20]
 80056b8:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8005778 <_svfiprintf_r+0x1f0>
 80056bc:	2203      	movs	r2, #3
 80056be:	4650      	mov	r0, sl
 80056c0:	7821      	ldrb	r1, [r4, #0]
 80056c2:	f7ff fa77 	bl	8004bb4 <memchr>
 80056c6:	b140      	cbz	r0, 80056da <_svfiprintf_r+0x152>
 80056c8:	2340      	movs	r3, #64	; 0x40
 80056ca:	eba0 000a 	sub.w	r0, r0, sl
 80056ce:	fa03 f000 	lsl.w	r0, r3, r0
 80056d2:	9b04      	ldr	r3, [sp, #16]
 80056d4:	3401      	adds	r4, #1
 80056d6:	4303      	orrs	r3, r0
 80056d8:	9304      	str	r3, [sp, #16]
 80056da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80056de:	2206      	movs	r2, #6
 80056e0:	4826      	ldr	r0, [pc, #152]	; (800577c <_svfiprintf_r+0x1f4>)
 80056e2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80056e6:	f7ff fa65 	bl	8004bb4 <memchr>
 80056ea:	2800      	cmp	r0, #0
 80056ec:	d038      	beq.n	8005760 <_svfiprintf_r+0x1d8>
 80056ee:	4b24      	ldr	r3, [pc, #144]	; (8005780 <_svfiprintf_r+0x1f8>)
 80056f0:	bb1b      	cbnz	r3, 800573a <_svfiprintf_r+0x1b2>
 80056f2:	9b03      	ldr	r3, [sp, #12]
 80056f4:	3307      	adds	r3, #7
 80056f6:	f023 0307 	bic.w	r3, r3, #7
 80056fa:	3308      	adds	r3, #8
 80056fc:	9303      	str	r3, [sp, #12]
 80056fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005700:	4433      	add	r3, r6
 8005702:	9309      	str	r3, [sp, #36]	; 0x24
 8005704:	e767      	b.n	80055d6 <_svfiprintf_r+0x4e>
 8005706:	460c      	mov	r4, r1
 8005708:	2001      	movs	r0, #1
 800570a:	fb0c 3202 	mla	r2, ip, r2, r3
 800570e:	e7a5      	b.n	800565c <_svfiprintf_r+0xd4>
 8005710:	2300      	movs	r3, #0
 8005712:	f04f 0c0a 	mov.w	ip, #10
 8005716:	4619      	mov	r1, r3
 8005718:	3401      	adds	r4, #1
 800571a:	9305      	str	r3, [sp, #20]
 800571c:	4620      	mov	r0, r4
 800571e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005722:	3a30      	subs	r2, #48	; 0x30
 8005724:	2a09      	cmp	r2, #9
 8005726:	d903      	bls.n	8005730 <_svfiprintf_r+0x1a8>
 8005728:	2b00      	cmp	r3, #0
 800572a:	d0c5      	beq.n	80056b8 <_svfiprintf_r+0x130>
 800572c:	9105      	str	r1, [sp, #20]
 800572e:	e7c3      	b.n	80056b8 <_svfiprintf_r+0x130>
 8005730:	4604      	mov	r4, r0
 8005732:	2301      	movs	r3, #1
 8005734:	fb0c 2101 	mla	r1, ip, r1, r2
 8005738:	e7f0      	b.n	800571c <_svfiprintf_r+0x194>
 800573a:	ab03      	add	r3, sp, #12
 800573c:	9300      	str	r3, [sp, #0]
 800573e:	462a      	mov	r2, r5
 8005740:	4638      	mov	r0, r7
 8005742:	4b10      	ldr	r3, [pc, #64]	; (8005784 <_svfiprintf_r+0x1fc>)
 8005744:	a904      	add	r1, sp, #16
 8005746:	f7fd ffcb 	bl	80036e0 <_printf_float>
 800574a:	1c42      	adds	r2, r0, #1
 800574c:	4606      	mov	r6, r0
 800574e:	d1d6      	bne.n	80056fe <_svfiprintf_r+0x176>
 8005750:	89ab      	ldrh	r3, [r5, #12]
 8005752:	065b      	lsls	r3, r3, #25
 8005754:	f53f af2c 	bmi.w	80055b0 <_svfiprintf_r+0x28>
 8005758:	9809      	ldr	r0, [sp, #36]	; 0x24
 800575a:	b01d      	add	sp, #116	; 0x74
 800575c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005760:	ab03      	add	r3, sp, #12
 8005762:	9300      	str	r3, [sp, #0]
 8005764:	462a      	mov	r2, r5
 8005766:	4638      	mov	r0, r7
 8005768:	4b06      	ldr	r3, [pc, #24]	; (8005784 <_svfiprintf_r+0x1fc>)
 800576a:	a904      	add	r1, sp, #16
 800576c:	f7fe fa54 	bl	8003c18 <_printf_i>
 8005770:	e7eb      	b.n	800574a <_svfiprintf_r+0x1c2>
 8005772:	bf00      	nop
 8005774:	080065e4 	.word	0x080065e4
 8005778:	080065ea 	.word	0x080065ea
 800577c:	080065ee 	.word	0x080065ee
 8005780:	080036e1 	.word	0x080036e1
 8005784:	080054d1 	.word	0x080054d1

08005788 <_sbrk_r>:
 8005788:	b538      	push	{r3, r4, r5, lr}
 800578a:	2300      	movs	r3, #0
 800578c:	4d05      	ldr	r5, [pc, #20]	; (80057a4 <_sbrk_r+0x1c>)
 800578e:	4604      	mov	r4, r0
 8005790:	4608      	mov	r0, r1
 8005792:	602b      	str	r3, [r5, #0]
 8005794:	f7fb fdfe 	bl	8001394 <_sbrk>
 8005798:	1c43      	adds	r3, r0, #1
 800579a:	d102      	bne.n	80057a2 <_sbrk_r+0x1a>
 800579c:	682b      	ldr	r3, [r5, #0]
 800579e:	b103      	cbz	r3, 80057a2 <_sbrk_r+0x1a>
 80057a0:	6023      	str	r3, [r4, #0]
 80057a2:	bd38      	pop	{r3, r4, r5, pc}
 80057a4:	20000278 	.word	0x20000278

080057a8 <__assert_func>:
 80057a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80057aa:	4614      	mov	r4, r2
 80057ac:	461a      	mov	r2, r3
 80057ae:	4b09      	ldr	r3, [pc, #36]	; (80057d4 <__assert_func+0x2c>)
 80057b0:	4605      	mov	r5, r0
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	68d8      	ldr	r0, [r3, #12]
 80057b6:	b14c      	cbz	r4, 80057cc <__assert_func+0x24>
 80057b8:	4b07      	ldr	r3, [pc, #28]	; (80057d8 <__assert_func+0x30>)
 80057ba:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80057be:	9100      	str	r1, [sp, #0]
 80057c0:	462b      	mov	r3, r5
 80057c2:	4906      	ldr	r1, [pc, #24]	; (80057dc <__assert_func+0x34>)
 80057c4:	f000 f80e 	bl	80057e4 <fiprintf>
 80057c8:	f000 faaa 	bl	8005d20 <abort>
 80057cc:	4b04      	ldr	r3, [pc, #16]	; (80057e0 <__assert_func+0x38>)
 80057ce:	461c      	mov	r4, r3
 80057d0:	e7f3      	b.n	80057ba <__assert_func+0x12>
 80057d2:	bf00      	nop
 80057d4:	2000000c 	.word	0x2000000c
 80057d8:	080065f5 	.word	0x080065f5
 80057dc:	08006602 	.word	0x08006602
 80057e0:	08006630 	.word	0x08006630

080057e4 <fiprintf>:
 80057e4:	b40e      	push	{r1, r2, r3}
 80057e6:	b503      	push	{r0, r1, lr}
 80057e8:	4601      	mov	r1, r0
 80057ea:	ab03      	add	r3, sp, #12
 80057ec:	4805      	ldr	r0, [pc, #20]	; (8005804 <fiprintf+0x20>)
 80057ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80057f2:	6800      	ldr	r0, [r0, #0]
 80057f4:	9301      	str	r3, [sp, #4]
 80057f6:	f000 f895 	bl	8005924 <_vfiprintf_r>
 80057fa:	b002      	add	sp, #8
 80057fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8005800:	b003      	add	sp, #12
 8005802:	4770      	bx	lr
 8005804:	2000000c 	.word	0x2000000c

08005808 <__ascii_mbtowc>:
 8005808:	b082      	sub	sp, #8
 800580a:	b901      	cbnz	r1, 800580e <__ascii_mbtowc+0x6>
 800580c:	a901      	add	r1, sp, #4
 800580e:	b142      	cbz	r2, 8005822 <__ascii_mbtowc+0x1a>
 8005810:	b14b      	cbz	r3, 8005826 <__ascii_mbtowc+0x1e>
 8005812:	7813      	ldrb	r3, [r2, #0]
 8005814:	600b      	str	r3, [r1, #0]
 8005816:	7812      	ldrb	r2, [r2, #0]
 8005818:	1e10      	subs	r0, r2, #0
 800581a:	bf18      	it	ne
 800581c:	2001      	movne	r0, #1
 800581e:	b002      	add	sp, #8
 8005820:	4770      	bx	lr
 8005822:	4610      	mov	r0, r2
 8005824:	e7fb      	b.n	800581e <__ascii_mbtowc+0x16>
 8005826:	f06f 0001 	mvn.w	r0, #1
 800582a:	e7f8      	b.n	800581e <__ascii_mbtowc+0x16>

0800582c <memmove>:
 800582c:	4288      	cmp	r0, r1
 800582e:	b510      	push	{r4, lr}
 8005830:	eb01 0402 	add.w	r4, r1, r2
 8005834:	d902      	bls.n	800583c <memmove+0x10>
 8005836:	4284      	cmp	r4, r0
 8005838:	4623      	mov	r3, r4
 800583a:	d807      	bhi.n	800584c <memmove+0x20>
 800583c:	1e43      	subs	r3, r0, #1
 800583e:	42a1      	cmp	r1, r4
 8005840:	d008      	beq.n	8005854 <memmove+0x28>
 8005842:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005846:	f803 2f01 	strb.w	r2, [r3, #1]!
 800584a:	e7f8      	b.n	800583e <memmove+0x12>
 800584c:	4601      	mov	r1, r0
 800584e:	4402      	add	r2, r0
 8005850:	428a      	cmp	r2, r1
 8005852:	d100      	bne.n	8005856 <memmove+0x2a>
 8005854:	bd10      	pop	{r4, pc}
 8005856:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800585a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800585e:	e7f7      	b.n	8005850 <memmove+0x24>

08005860 <__malloc_lock>:
 8005860:	4801      	ldr	r0, [pc, #4]	; (8005868 <__malloc_lock+0x8>)
 8005862:	f000 bc19 	b.w	8006098 <__retarget_lock_acquire_recursive>
 8005866:	bf00      	nop
 8005868:	2000027c 	.word	0x2000027c

0800586c <__malloc_unlock>:
 800586c:	4801      	ldr	r0, [pc, #4]	; (8005874 <__malloc_unlock+0x8>)
 800586e:	f000 bc14 	b.w	800609a <__retarget_lock_release_recursive>
 8005872:	bf00      	nop
 8005874:	2000027c 	.word	0x2000027c

08005878 <_realloc_r>:
 8005878:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800587c:	4680      	mov	r8, r0
 800587e:	4614      	mov	r4, r2
 8005880:	460e      	mov	r6, r1
 8005882:	b921      	cbnz	r1, 800588e <_realloc_r+0x16>
 8005884:	4611      	mov	r1, r2
 8005886:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800588a:	f7ff bdad 	b.w	80053e8 <_malloc_r>
 800588e:	b92a      	cbnz	r2, 800589c <_realloc_r+0x24>
 8005890:	f7ff fd42 	bl	8005318 <_free_r>
 8005894:	4625      	mov	r5, r4
 8005896:	4628      	mov	r0, r5
 8005898:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800589c:	f000 fc64 	bl	8006168 <_malloc_usable_size_r>
 80058a0:	4284      	cmp	r4, r0
 80058a2:	4607      	mov	r7, r0
 80058a4:	d802      	bhi.n	80058ac <_realloc_r+0x34>
 80058a6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80058aa:	d812      	bhi.n	80058d2 <_realloc_r+0x5a>
 80058ac:	4621      	mov	r1, r4
 80058ae:	4640      	mov	r0, r8
 80058b0:	f7ff fd9a 	bl	80053e8 <_malloc_r>
 80058b4:	4605      	mov	r5, r0
 80058b6:	2800      	cmp	r0, #0
 80058b8:	d0ed      	beq.n	8005896 <_realloc_r+0x1e>
 80058ba:	42bc      	cmp	r4, r7
 80058bc:	4622      	mov	r2, r4
 80058be:	4631      	mov	r1, r6
 80058c0:	bf28      	it	cs
 80058c2:	463a      	movcs	r2, r7
 80058c4:	f7ff f984 	bl	8004bd0 <memcpy>
 80058c8:	4631      	mov	r1, r6
 80058ca:	4640      	mov	r0, r8
 80058cc:	f7ff fd24 	bl	8005318 <_free_r>
 80058d0:	e7e1      	b.n	8005896 <_realloc_r+0x1e>
 80058d2:	4635      	mov	r5, r6
 80058d4:	e7df      	b.n	8005896 <_realloc_r+0x1e>

080058d6 <__sfputc_r>:
 80058d6:	6893      	ldr	r3, [r2, #8]
 80058d8:	b410      	push	{r4}
 80058da:	3b01      	subs	r3, #1
 80058dc:	2b00      	cmp	r3, #0
 80058de:	6093      	str	r3, [r2, #8]
 80058e0:	da07      	bge.n	80058f2 <__sfputc_r+0x1c>
 80058e2:	6994      	ldr	r4, [r2, #24]
 80058e4:	42a3      	cmp	r3, r4
 80058e6:	db01      	blt.n	80058ec <__sfputc_r+0x16>
 80058e8:	290a      	cmp	r1, #10
 80058ea:	d102      	bne.n	80058f2 <__sfputc_r+0x1c>
 80058ec:	bc10      	pop	{r4}
 80058ee:	f000 b949 	b.w	8005b84 <__swbuf_r>
 80058f2:	6813      	ldr	r3, [r2, #0]
 80058f4:	1c58      	adds	r0, r3, #1
 80058f6:	6010      	str	r0, [r2, #0]
 80058f8:	7019      	strb	r1, [r3, #0]
 80058fa:	4608      	mov	r0, r1
 80058fc:	bc10      	pop	{r4}
 80058fe:	4770      	bx	lr

08005900 <__sfputs_r>:
 8005900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005902:	4606      	mov	r6, r0
 8005904:	460f      	mov	r7, r1
 8005906:	4614      	mov	r4, r2
 8005908:	18d5      	adds	r5, r2, r3
 800590a:	42ac      	cmp	r4, r5
 800590c:	d101      	bne.n	8005912 <__sfputs_r+0x12>
 800590e:	2000      	movs	r0, #0
 8005910:	e007      	b.n	8005922 <__sfputs_r+0x22>
 8005912:	463a      	mov	r2, r7
 8005914:	4630      	mov	r0, r6
 8005916:	f814 1b01 	ldrb.w	r1, [r4], #1
 800591a:	f7ff ffdc 	bl	80058d6 <__sfputc_r>
 800591e:	1c43      	adds	r3, r0, #1
 8005920:	d1f3      	bne.n	800590a <__sfputs_r+0xa>
 8005922:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005924 <_vfiprintf_r>:
 8005924:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005928:	460d      	mov	r5, r1
 800592a:	4614      	mov	r4, r2
 800592c:	4698      	mov	r8, r3
 800592e:	4606      	mov	r6, r0
 8005930:	b09d      	sub	sp, #116	; 0x74
 8005932:	b118      	cbz	r0, 800593c <_vfiprintf_r+0x18>
 8005934:	6983      	ldr	r3, [r0, #24]
 8005936:	b90b      	cbnz	r3, 800593c <_vfiprintf_r+0x18>
 8005938:	f000 fb10 	bl	8005f5c <__sinit>
 800593c:	4b89      	ldr	r3, [pc, #548]	; (8005b64 <_vfiprintf_r+0x240>)
 800593e:	429d      	cmp	r5, r3
 8005940:	d11b      	bne.n	800597a <_vfiprintf_r+0x56>
 8005942:	6875      	ldr	r5, [r6, #4]
 8005944:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005946:	07d9      	lsls	r1, r3, #31
 8005948:	d405      	bmi.n	8005956 <_vfiprintf_r+0x32>
 800594a:	89ab      	ldrh	r3, [r5, #12]
 800594c:	059a      	lsls	r2, r3, #22
 800594e:	d402      	bmi.n	8005956 <_vfiprintf_r+0x32>
 8005950:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005952:	f000 fba1 	bl	8006098 <__retarget_lock_acquire_recursive>
 8005956:	89ab      	ldrh	r3, [r5, #12]
 8005958:	071b      	lsls	r3, r3, #28
 800595a:	d501      	bpl.n	8005960 <_vfiprintf_r+0x3c>
 800595c:	692b      	ldr	r3, [r5, #16]
 800595e:	b9eb      	cbnz	r3, 800599c <_vfiprintf_r+0x78>
 8005960:	4629      	mov	r1, r5
 8005962:	4630      	mov	r0, r6
 8005964:	f000 f96e 	bl	8005c44 <__swsetup_r>
 8005968:	b1c0      	cbz	r0, 800599c <_vfiprintf_r+0x78>
 800596a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800596c:	07dc      	lsls	r4, r3, #31
 800596e:	d50e      	bpl.n	800598e <_vfiprintf_r+0x6a>
 8005970:	f04f 30ff 	mov.w	r0, #4294967295
 8005974:	b01d      	add	sp, #116	; 0x74
 8005976:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800597a:	4b7b      	ldr	r3, [pc, #492]	; (8005b68 <_vfiprintf_r+0x244>)
 800597c:	429d      	cmp	r5, r3
 800597e:	d101      	bne.n	8005984 <_vfiprintf_r+0x60>
 8005980:	68b5      	ldr	r5, [r6, #8]
 8005982:	e7df      	b.n	8005944 <_vfiprintf_r+0x20>
 8005984:	4b79      	ldr	r3, [pc, #484]	; (8005b6c <_vfiprintf_r+0x248>)
 8005986:	429d      	cmp	r5, r3
 8005988:	bf08      	it	eq
 800598a:	68f5      	ldreq	r5, [r6, #12]
 800598c:	e7da      	b.n	8005944 <_vfiprintf_r+0x20>
 800598e:	89ab      	ldrh	r3, [r5, #12]
 8005990:	0598      	lsls	r0, r3, #22
 8005992:	d4ed      	bmi.n	8005970 <_vfiprintf_r+0x4c>
 8005994:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005996:	f000 fb80 	bl	800609a <__retarget_lock_release_recursive>
 800599a:	e7e9      	b.n	8005970 <_vfiprintf_r+0x4c>
 800599c:	2300      	movs	r3, #0
 800599e:	9309      	str	r3, [sp, #36]	; 0x24
 80059a0:	2320      	movs	r3, #32
 80059a2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80059a6:	2330      	movs	r3, #48	; 0x30
 80059a8:	f04f 0901 	mov.w	r9, #1
 80059ac:	f8cd 800c 	str.w	r8, [sp, #12]
 80059b0:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8005b70 <_vfiprintf_r+0x24c>
 80059b4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80059b8:	4623      	mov	r3, r4
 80059ba:	469a      	mov	sl, r3
 80059bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80059c0:	b10a      	cbz	r2, 80059c6 <_vfiprintf_r+0xa2>
 80059c2:	2a25      	cmp	r2, #37	; 0x25
 80059c4:	d1f9      	bne.n	80059ba <_vfiprintf_r+0x96>
 80059c6:	ebba 0b04 	subs.w	fp, sl, r4
 80059ca:	d00b      	beq.n	80059e4 <_vfiprintf_r+0xc0>
 80059cc:	465b      	mov	r3, fp
 80059ce:	4622      	mov	r2, r4
 80059d0:	4629      	mov	r1, r5
 80059d2:	4630      	mov	r0, r6
 80059d4:	f7ff ff94 	bl	8005900 <__sfputs_r>
 80059d8:	3001      	adds	r0, #1
 80059da:	f000 80aa 	beq.w	8005b32 <_vfiprintf_r+0x20e>
 80059de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80059e0:	445a      	add	r2, fp
 80059e2:	9209      	str	r2, [sp, #36]	; 0x24
 80059e4:	f89a 3000 	ldrb.w	r3, [sl]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	f000 80a2 	beq.w	8005b32 <_vfiprintf_r+0x20e>
 80059ee:	2300      	movs	r3, #0
 80059f0:	f04f 32ff 	mov.w	r2, #4294967295
 80059f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80059f8:	f10a 0a01 	add.w	sl, sl, #1
 80059fc:	9304      	str	r3, [sp, #16]
 80059fe:	9307      	str	r3, [sp, #28]
 8005a00:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005a04:	931a      	str	r3, [sp, #104]	; 0x68
 8005a06:	4654      	mov	r4, sl
 8005a08:	2205      	movs	r2, #5
 8005a0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a0e:	4858      	ldr	r0, [pc, #352]	; (8005b70 <_vfiprintf_r+0x24c>)
 8005a10:	f7ff f8d0 	bl	8004bb4 <memchr>
 8005a14:	9a04      	ldr	r2, [sp, #16]
 8005a16:	b9d8      	cbnz	r0, 8005a50 <_vfiprintf_r+0x12c>
 8005a18:	06d1      	lsls	r1, r2, #27
 8005a1a:	bf44      	itt	mi
 8005a1c:	2320      	movmi	r3, #32
 8005a1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005a22:	0713      	lsls	r3, r2, #28
 8005a24:	bf44      	itt	mi
 8005a26:	232b      	movmi	r3, #43	; 0x2b
 8005a28:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005a2c:	f89a 3000 	ldrb.w	r3, [sl]
 8005a30:	2b2a      	cmp	r3, #42	; 0x2a
 8005a32:	d015      	beq.n	8005a60 <_vfiprintf_r+0x13c>
 8005a34:	4654      	mov	r4, sl
 8005a36:	2000      	movs	r0, #0
 8005a38:	f04f 0c0a 	mov.w	ip, #10
 8005a3c:	9a07      	ldr	r2, [sp, #28]
 8005a3e:	4621      	mov	r1, r4
 8005a40:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005a44:	3b30      	subs	r3, #48	; 0x30
 8005a46:	2b09      	cmp	r3, #9
 8005a48:	d94e      	bls.n	8005ae8 <_vfiprintf_r+0x1c4>
 8005a4a:	b1b0      	cbz	r0, 8005a7a <_vfiprintf_r+0x156>
 8005a4c:	9207      	str	r2, [sp, #28]
 8005a4e:	e014      	b.n	8005a7a <_vfiprintf_r+0x156>
 8005a50:	eba0 0308 	sub.w	r3, r0, r8
 8005a54:	fa09 f303 	lsl.w	r3, r9, r3
 8005a58:	4313      	orrs	r3, r2
 8005a5a:	46a2      	mov	sl, r4
 8005a5c:	9304      	str	r3, [sp, #16]
 8005a5e:	e7d2      	b.n	8005a06 <_vfiprintf_r+0xe2>
 8005a60:	9b03      	ldr	r3, [sp, #12]
 8005a62:	1d19      	adds	r1, r3, #4
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	9103      	str	r1, [sp, #12]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	bfbb      	ittet	lt
 8005a6c:	425b      	neglt	r3, r3
 8005a6e:	f042 0202 	orrlt.w	r2, r2, #2
 8005a72:	9307      	strge	r3, [sp, #28]
 8005a74:	9307      	strlt	r3, [sp, #28]
 8005a76:	bfb8      	it	lt
 8005a78:	9204      	strlt	r2, [sp, #16]
 8005a7a:	7823      	ldrb	r3, [r4, #0]
 8005a7c:	2b2e      	cmp	r3, #46	; 0x2e
 8005a7e:	d10c      	bne.n	8005a9a <_vfiprintf_r+0x176>
 8005a80:	7863      	ldrb	r3, [r4, #1]
 8005a82:	2b2a      	cmp	r3, #42	; 0x2a
 8005a84:	d135      	bne.n	8005af2 <_vfiprintf_r+0x1ce>
 8005a86:	9b03      	ldr	r3, [sp, #12]
 8005a88:	3402      	adds	r4, #2
 8005a8a:	1d1a      	adds	r2, r3, #4
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	9203      	str	r2, [sp, #12]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	bfb8      	it	lt
 8005a94:	f04f 33ff 	movlt.w	r3, #4294967295
 8005a98:	9305      	str	r3, [sp, #20]
 8005a9a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8005b74 <_vfiprintf_r+0x250>
 8005a9e:	2203      	movs	r2, #3
 8005aa0:	4650      	mov	r0, sl
 8005aa2:	7821      	ldrb	r1, [r4, #0]
 8005aa4:	f7ff f886 	bl	8004bb4 <memchr>
 8005aa8:	b140      	cbz	r0, 8005abc <_vfiprintf_r+0x198>
 8005aaa:	2340      	movs	r3, #64	; 0x40
 8005aac:	eba0 000a 	sub.w	r0, r0, sl
 8005ab0:	fa03 f000 	lsl.w	r0, r3, r0
 8005ab4:	9b04      	ldr	r3, [sp, #16]
 8005ab6:	3401      	adds	r4, #1
 8005ab8:	4303      	orrs	r3, r0
 8005aba:	9304      	str	r3, [sp, #16]
 8005abc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ac0:	2206      	movs	r2, #6
 8005ac2:	482d      	ldr	r0, [pc, #180]	; (8005b78 <_vfiprintf_r+0x254>)
 8005ac4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005ac8:	f7ff f874 	bl	8004bb4 <memchr>
 8005acc:	2800      	cmp	r0, #0
 8005ace:	d03f      	beq.n	8005b50 <_vfiprintf_r+0x22c>
 8005ad0:	4b2a      	ldr	r3, [pc, #168]	; (8005b7c <_vfiprintf_r+0x258>)
 8005ad2:	bb1b      	cbnz	r3, 8005b1c <_vfiprintf_r+0x1f8>
 8005ad4:	9b03      	ldr	r3, [sp, #12]
 8005ad6:	3307      	adds	r3, #7
 8005ad8:	f023 0307 	bic.w	r3, r3, #7
 8005adc:	3308      	adds	r3, #8
 8005ade:	9303      	str	r3, [sp, #12]
 8005ae0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ae2:	443b      	add	r3, r7
 8005ae4:	9309      	str	r3, [sp, #36]	; 0x24
 8005ae6:	e767      	b.n	80059b8 <_vfiprintf_r+0x94>
 8005ae8:	460c      	mov	r4, r1
 8005aea:	2001      	movs	r0, #1
 8005aec:	fb0c 3202 	mla	r2, ip, r2, r3
 8005af0:	e7a5      	b.n	8005a3e <_vfiprintf_r+0x11a>
 8005af2:	2300      	movs	r3, #0
 8005af4:	f04f 0c0a 	mov.w	ip, #10
 8005af8:	4619      	mov	r1, r3
 8005afa:	3401      	adds	r4, #1
 8005afc:	9305      	str	r3, [sp, #20]
 8005afe:	4620      	mov	r0, r4
 8005b00:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005b04:	3a30      	subs	r2, #48	; 0x30
 8005b06:	2a09      	cmp	r2, #9
 8005b08:	d903      	bls.n	8005b12 <_vfiprintf_r+0x1ee>
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d0c5      	beq.n	8005a9a <_vfiprintf_r+0x176>
 8005b0e:	9105      	str	r1, [sp, #20]
 8005b10:	e7c3      	b.n	8005a9a <_vfiprintf_r+0x176>
 8005b12:	4604      	mov	r4, r0
 8005b14:	2301      	movs	r3, #1
 8005b16:	fb0c 2101 	mla	r1, ip, r1, r2
 8005b1a:	e7f0      	b.n	8005afe <_vfiprintf_r+0x1da>
 8005b1c:	ab03      	add	r3, sp, #12
 8005b1e:	9300      	str	r3, [sp, #0]
 8005b20:	462a      	mov	r2, r5
 8005b22:	4630      	mov	r0, r6
 8005b24:	4b16      	ldr	r3, [pc, #88]	; (8005b80 <_vfiprintf_r+0x25c>)
 8005b26:	a904      	add	r1, sp, #16
 8005b28:	f7fd fdda 	bl	80036e0 <_printf_float>
 8005b2c:	4607      	mov	r7, r0
 8005b2e:	1c78      	adds	r0, r7, #1
 8005b30:	d1d6      	bne.n	8005ae0 <_vfiprintf_r+0x1bc>
 8005b32:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005b34:	07d9      	lsls	r1, r3, #31
 8005b36:	d405      	bmi.n	8005b44 <_vfiprintf_r+0x220>
 8005b38:	89ab      	ldrh	r3, [r5, #12]
 8005b3a:	059a      	lsls	r2, r3, #22
 8005b3c:	d402      	bmi.n	8005b44 <_vfiprintf_r+0x220>
 8005b3e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005b40:	f000 faab 	bl	800609a <__retarget_lock_release_recursive>
 8005b44:	89ab      	ldrh	r3, [r5, #12]
 8005b46:	065b      	lsls	r3, r3, #25
 8005b48:	f53f af12 	bmi.w	8005970 <_vfiprintf_r+0x4c>
 8005b4c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005b4e:	e711      	b.n	8005974 <_vfiprintf_r+0x50>
 8005b50:	ab03      	add	r3, sp, #12
 8005b52:	9300      	str	r3, [sp, #0]
 8005b54:	462a      	mov	r2, r5
 8005b56:	4630      	mov	r0, r6
 8005b58:	4b09      	ldr	r3, [pc, #36]	; (8005b80 <_vfiprintf_r+0x25c>)
 8005b5a:	a904      	add	r1, sp, #16
 8005b5c:	f7fe f85c 	bl	8003c18 <_printf_i>
 8005b60:	e7e4      	b.n	8005b2c <_vfiprintf_r+0x208>
 8005b62:	bf00      	nop
 8005b64:	0800675c 	.word	0x0800675c
 8005b68:	0800677c 	.word	0x0800677c
 8005b6c:	0800673c 	.word	0x0800673c
 8005b70:	080065e4 	.word	0x080065e4
 8005b74:	080065ea 	.word	0x080065ea
 8005b78:	080065ee 	.word	0x080065ee
 8005b7c:	080036e1 	.word	0x080036e1
 8005b80:	08005901 	.word	0x08005901

08005b84 <__swbuf_r>:
 8005b84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b86:	460e      	mov	r6, r1
 8005b88:	4614      	mov	r4, r2
 8005b8a:	4605      	mov	r5, r0
 8005b8c:	b118      	cbz	r0, 8005b96 <__swbuf_r+0x12>
 8005b8e:	6983      	ldr	r3, [r0, #24]
 8005b90:	b90b      	cbnz	r3, 8005b96 <__swbuf_r+0x12>
 8005b92:	f000 f9e3 	bl	8005f5c <__sinit>
 8005b96:	4b21      	ldr	r3, [pc, #132]	; (8005c1c <__swbuf_r+0x98>)
 8005b98:	429c      	cmp	r4, r3
 8005b9a:	d12b      	bne.n	8005bf4 <__swbuf_r+0x70>
 8005b9c:	686c      	ldr	r4, [r5, #4]
 8005b9e:	69a3      	ldr	r3, [r4, #24]
 8005ba0:	60a3      	str	r3, [r4, #8]
 8005ba2:	89a3      	ldrh	r3, [r4, #12]
 8005ba4:	071a      	lsls	r2, r3, #28
 8005ba6:	d52f      	bpl.n	8005c08 <__swbuf_r+0x84>
 8005ba8:	6923      	ldr	r3, [r4, #16]
 8005baa:	b36b      	cbz	r3, 8005c08 <__swbuf_r+0x84>
 8005bac:	6923      	ldr	r3, [r4, #16]
 8005bae:	6820      	ldr	r0, [r4, #0]
 8005bb0:	b2f6      	uxtb	r6, r6
 8005bb2:	1ac0      	subs	r0, r0, r3
 8005bb4:	6963      	ldr	r3, [r4, #20]
 8005bb6:	4637      	mov	r7, r6
 8005bb8:	4283      	cmp	r3, r0
 8005bba:	dc04      	bgt.n	8005bc6 <__swbuf_r+0x42>
 8005bbc:	4621      	mov	r1, r4
 8005bbe:	4628      	mov	r0, r5
 8005bc0:	f000 f938 	bl	8005e34 <_fflush_r>
 8005bc4:	bb30      	cbnz	r0, 8005c14 <__swbuf_r+0x90>
 8005bc6:	68a3      	ldr	r3, [r4, #8]
 8005bc8:	3001      	adds	r0, #1
 8005bca:	3b01      	subs	r3, #1
 8005bcc:	60a3      	str	r3, [r4, #8]
 8005bce:	6823      	ldr	r3, [r4, #0]
 8005bd0:	1c5a      	adds	r2, r3, #1
 8005bd2:	6022      	str	r2, [r4, #0]
 8005bd4:	701e      	strb	r6, [r3, #0]
 8005bd6:	6963      	ldr	r3, [r4, #20]
 8005bd8:	4283      	cmp	r3, r0
 8005bda:	d004      	beq.n	8005be6 <__swbuf_r+0x62>
 8005bdc:	89a3      	ldrh	r3, [r4, #12]
 8005bde:	07db      	lsls	r3, r3, #31
 8005be0:	d506      	bpl.n	8005bf0 <__swbuf_r+0x6c>
 8005be2:	2e0a      	cmp	r6, #10
 8005be4:	d104      	bne.n	8005bf0 <__swbuf_r+0x6c>
 8005be6:	4621      	mov	r1, r4
 8005be8:	4628      	mov	r0, r5
 8005bea:	f000 f923 	bl	8005e34 <_fflush_r>
 8005bee:	b988      	cbnz	r0, 8005c14 <__swbuf_r+0x90>
 8005bf0:	4638      	mov	r0, r7
 8005bf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005bf4:	4b0a      	ldr	r3, [pc, #40]	; (8005c20 <__swbuf_r+0x9c>)
 8005bf6:	429c      	cmp	r4, r3
 8005bf8:	d101      	bne.n	8005bfe <__swbuf_r+0x7a>
 8005bfa:	68ac      	ldr	r4, [r5, #8]
 8005bfc:	e7cf      	b.n	8005b9e <__swbuf_r+0x1a>
 8005bfe:	4b09      	ldr	r3, [pc, #36]	; (8005c24 <__swbuf_r+0xa0>)
 8005c00:	429c      	cmp	r4, r3
 8005c02:	bf08      	it	eq
 8005c04:	68ec      	ldreq	r4, [r5, #12]
 8005c06:	e7ca      	b.n	8005b9e <__swbuf_r+0x1a>
 8005c08:	4621      	mov	r1, r4
 8005c0a:	4628      	mov	r0, r5
 8005c0c:	f000 f81a 	bl	8005c44 <__swsetup_r>
 8005c10:	2800      	cmp	r0, #0
 8005c12:	d0cb      	beq.n	8005bac <__swbuf_r+0x28>
 8005c14:	f04f 37ff 	mov.w	r7, #4294967295
 8005c18:	e7ea      	b.n	8005bf0 <__swbuf_r+0x6c>
 8005c1a:	bf00      	nop
 8005c1c:	0800675c 	.word	0x0800675c
 8005c20:	0800677c 	.word	0x0800677c
 8005c24:	0800673c 	.word	0x0800673c

08005c28 <__ascii_wctomb>:
 8005c28:	4603      	mov	r3, r0
 8005c2a:	4608      	mov	r0, r1
 8005c2c:	b141      	cbz	r1, 8005c40 <__ascii_wctomb+0x18>
 8005c2e:	2aff      	cmp	r2, #255	; 0xff
 8005c30:	d904      	bls.n	8005c3c <__ascii_wctomb+0x14>
 8005c32:	228a      	movs	r2, #138	; 0x8a
 8005c34:	f04f 30ff 	mov.w	r0, #4294967295
 8005c38:	601a      	str	r2, [r3, #0]
 8005c3a:	4770      	bx	lr
 8005c3c:	2001      	movs	r0, #1
 8005c3e:	700a      	strb	r2, [r1, #0]
 8005c40:	4770      	bx	lr
	...

08005c44 <__swsetup_r>:
 8005c44:	4b32      	ldr	r3, [pc, #200]	; (8005d10 <__swsetup_r+0xcc>)
 8005c46:	b570      	push	{r4, r5, r6, lr}
 8005c48:	681d      	ldr	r5, [r3, #0]
 8005c4a:	4606      	mov	r6, r0
 8005c4c:	460c      	mov	r4, r1
 8005c4e:	b125      	cbz	r5, 8005c5a <__swsetup_r+0x16>
 8005c50:	69ab      	ldr	r3, [r5, #24]
 8005c52:	b913      	cbnz	r3, 8005c5a <__swsetup_r+0x16>
 8005c54:	4628      	mov	r0, r5
 8005c56:	f000 f981 	bl	8005f5c <__sinit>
 8005c5a:	4b2e      	ldr	r3, [pc, #184]	; (8005d14 <__swsetup_r+0xd0>)
 8005c5c:	429c      	cmp	r4, r3
 8005c5e:	d10f      	bne.n	8005c80 <__swsetup_r+0x3c>
 8005c60:	686c      	ldr	r4, [r5, #4]
 8005c62:	89a3      	ldrh	r3, [r4, #12]
 8005c64:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005c68:	0719      	lsls	r1, r3, #28
 8005c6a:	d42c      	bmi.n	8005cc6 <__swsetup_r+0x82>
 8005c6c:	06dd      	lsls	r5, r3, #27
 8005c6e:	d411      	bmi.n	8005c94 <__swsetup_r+0x50>
 8005c70:	2309      	movs	r3, #9
 8005c72:	6033      	str	r3, [r6, #0]
 8005c74:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005c78:	f04f 30ff 	mov.w	r0, #4294967295
 8005c7c:	81a3      	strh	r3, [r4, #12]
 8005c7e:	e03e      	b.n	8005cfe <__swsetup_r+0xba>
 8005c80:	4b25      	ldr	r3, [pc, #148]	; (8005d18 <__swsetup_r+0xd4>)
 8005c82:	429c      	cmp	r4, r3
 8005c84:	d101      	bne.n	8005c8a <__swsetup_r+0x46>
 8005c86:	68ac      	ldr	r4, [r5, #8]
 8005c88:	e7eb      	b.n	8005c62 <__swsetup_r+0x1e>
 8005c8a:	4b24      	ldr	r3, [pc, #144]	; (8005d1c <__swsetup_r+0xd8>)
 8005c8c:	429c      	cmp	r4, r3
 8005c8e:	bf08      	it	eq
 8005c90:	68ec      	ldreq	r4, [r5, #12]
 8005c92:	e7e6      	b.n	8005c62 <__swsetup_r+0x1e>
 8005c94:	0758      	lsls	r0, r3, #29
 8005c96:	d512      	bpl.n	8005cbe <__swsetup_r+0x7a>
 8005c98:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005c9a:	b141      	cbz	r1, 8005cae <__swsetup_r+0x6a>
 8005c9c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005ca0:	4299      	cmp	r1, r3
 8005ca2:	d002      	beq.n	8005caa <__swsetup_r+0x66>
 8005ca4:	4630      	mov	r0, r6
 8005ca6:	f7ff fb37 	bl	8005318 <_free_r>
 8005caa:	2300      	movs	r3, #0
 8005cac:	6363      	str	r3, [r4, #52]	; 0x34
 8005cae:	89a3      	ldrh	r3, [r4, #12]
 8005cb0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005cb4:	81a3      	strh	r3, [r4, #12]
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	6063      	str	r3, [r4, #4]
 8005cba:	6923      	ldr	r3, [r4, #16]
 8005cbc:	6023      	str	r3, [r4, #0]
 8005cbe:	89a3      	ldrh	r3, [r4, #12]
 8005cc0:	f043 0308 	orr.w	r3, r3, #8
 8005cc4:	81a3      	strh	r3, [r4, #12]
 8005cc6:	6923      	ldr	r3, [r4, #16]
 8005cc8:	b94b      	cbnz	r3, 8005cde <__swsetup_r+0x9a>
 8005cca:	89a3      	ldrh	r3, [r4, #12]
 8005ccc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005cd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005cd4:	d003      	beq.n	8005cde <__swsetup_r+0x9a>
 8005cd6:	4621      	mov	r1, r4
 8005cd8:	4630      	mov	r0, r6
 8005cda:	f000 fa05 	bl	80060e8 <__smakebuf_r>
 8005cde:	89a0      	ldrh	r0, [r4, #12]
 8005ce0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005ce4:	f010 0301 	ands.w	r3, r0, #1
 8005ce8:	d00a      	beq.n	8005d00 <__swsetup_r+0xbc>
 8005cea:	2300      	movs	r3, #0
 8005cec:	60a3      	str	r3, [r4, #8]
 8005cee:	6963      	ldr	r3, [r4, #20]
 8005cf0:	425b      	negs	r3, r3
 8005cf2:	61a3      	str	r3, [r4, #24]
 8005cf4:	6923      	ldr	r3, [r4, #16]
 8005cf6:	b943      	cbnz	r3, 8005d0a <__swsetup_r+0xc6>
 8005cf8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005cfc:	d1ba      	bne.n	8005c74 <__swsetup_r+0x30>
 8005cfe:	bd70      	pop	{r4, r5, r6, pc}
 8005d00:	0781      	lsls	r1, r0, #30
 8005d02:	bf58      	it	pl
 8005d04:	6963      	ldrpl	r3, [r4, #20]
 8005d06:	60a3      	str	r3, [r4, #8]
 8005d08:	e7f4      	b.n	8005cf4 <__swsetup_r+0xb0>
 8005d0a:	2000      	movs	r0, #0
 8005d0c:	e7f7      	b.n	8005cfe <__swsetup_r+0xba>
 8005d0e:	bf00      	nop
 8005d10:	2000000c 	.word	0x2000000c
 8005d14:	0800675c 	.word	0x0800675c
 8005d18:	0800677c 	.word	0x0800677c
 8005d1c:	0800673c 	.word	0x0800673c

08005d20 <abort>:
 8005d20:	2006      	movs	r0, #6
 8005d22:	b508      	push	{r3, lr}
 8005d24:	f000 fa50 	bl	80061c8 <raise>
 8005d28:	2001      	movs	r0, #1
 8005d2a:	f7fb fabf 	bl	80012ac <_exit>
	...

08005d30 <__sflush_r>:
 8005d30:	898a      	ldrh	r2, [r1, #12]
 8005d32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d34:	4605      	mov	r5, r0
 8005d36:	0710      	lsls	r0, r2, #28
 8005d38:	460c      	mov	r4, r1
 8005d3a:	d457      	bmi.n	8005dec <__sflush_r+0xbc>
 8005d3c:	684b      	ldr	r3, [r1, #4]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	dc04      	bgt.n	8005d4c <__sflush_r+0x1c>
 8005d42:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	dc01      	bgt.n	8005d4c <__sflush_r+0x1c>
 8005d48:	2000      	movs	r0, #0
 8005d4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005d4c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005d4e:	2e00      	cmp	r6, #0
 8005d50:	d0fa      	beq.n	8005d48 <__sflush_r+0x18>
 8005d52:	2300      	movs	r3, #0
 8005d54:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005d58:	682f      	ldr	r7, [r5, #0]
 8005d5a:	602b      	str	r3, [r5, #0]
 8005d5c:	d032      	beq.n	8005dc4 <__sflush_r+0x94>
 8005d5e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005d60:	89a3      	ldrh	r3, [r4, #12]
 8005d62:	075a      	lsls	r2, r3, #29
 8005d64:	d505      	bpl.n	8005d72 <__sflush_r+0x42>
 8005d66:	6863      	ldr	r3, [r4, #4]
 8005d68:	1ac0      	subs	r0, r0, r3
 8005d6a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005d6c:	b10b      	cbz	r3, 8005d72 <__sflush_r+0x42>
 8005d6e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005d70:	1ac0      	subs	r0, r0, r3
 8005d72:	2300      	movs	r3, #0
 8005d74:	4602      	mov	r2, r0
 8005d76:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005d78:	4628      	mov	r0, r5
 8005d7a:	6a21      	ldr	r1, [r4, #32]
 8005d7c:	47b0      	blx	r6
 8005d7e:	1c43      	adds	r3, r0, #1
 8005d80:	89a3      	ldrh	r3, [r4, #12]
 8005d82:	d106      	bne.n	8005d92 <__sflush_r+0x62>
 8005d84:	6829      	ldr	r1, [r5, #0]
 8005d86:	291d      	cmp	r1, #29
 8005d88:	d82c      	bhi.n	8005de4 <__sflush_r+0xb4>
 8005d8a:	4a29      	ldr	r2, [pc, #164]	; (8005e30 <__sflush_r+0x100>)
 8005d8c:	40ca      	lsrs	r2, r1
 8005d8e:	07d6      	lsls	r6, r2, #31
 8005d90:	d528      	bpl.n	8005de4 <__sflush_r+0xb4>
 8005d92:	2200      	movs	r2, #0
 8005d94:	6062      	str	r2, [r4, #4]
 8005d96:	6922      	ldr	r2, [r4, #16]
 8005d98:	04d9      	lsls	r1, r3, #19
 8005d9a:	6022      	str	r2, [r4, #0]
 8005d9c:	d504      	bpl.n	8005da8 <__sflush_r+0x78>
 8005d9e:	1c42      	adds	r2, r0, #1
 8005da0:	d101      	bne.n	8005da6 <__sflush_r+0x76>
 8005da2:	682b      	ldr	r3, [r5, #0]
 8005da4:	b903      	cbnz	r3, 8005da8 <__sflush_r+0x78>
 8005da6:	6560      	str	r0, [r4, #84]	; 0x54
 8005da8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005daa:	602f      	str	r7, [r5, #0]
 8005dac:	2900      	cmp	r1, #0
 8005dae:	d0cb      	beq.n	8005d48 <__sflush_r+0x18>
 8005db0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005db4:	4299      	cmp	r1, r3
 8005db6:	d002      	beq.n	8005dbe <__sflush_r+0x8e>
 8005db8:	4628      	mov	r0, r5
 8005dba:	f7ff faad 	bl	8005318 <_free_r>
 8005dbe:	2000      	movs	r0, #0
 8005dc0:	6360      	str	r0, [r4, #52]	; 0x34
 8005dc2:	e7c2      	b.n	8005d4a <__sflush_r+0x1a>
 8005dc4:	6a21      	ldr	r1, [r4, #32]
 8005dc6:	2301      	movs	r3, #1
 8005dc8:	4628      	mov	r0, r5
 8005dca:	47b0      	blx	r6
 8005dcc:	1c41      	adds	r1, r0, #1
 8005dce:	d1c7      	bne.n	8005d60 <__sflush_r+0x30>
 8005dd0:	682b      	ldr	r3, [r5, #0]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d0c4      	beq.n	8005d60 <__sflush_r+0x30>
 8005dd6:	2b1d      	cmp	r3, #29
 8005dd8:	d001      	beq.n	8005dde <__sflush_r+0xae>
 8005dda:	2b16      	cmp	r3, #22
 8005ddc:	d101      	bne.n	8005de2 <__sflush_r+0xb2>
 8005dde:	602f      	str	r7, [r5, #0]
 8005de0:	e7b2      	b.n	8005d48 <__sflush_r+0x18>
 8005de2:	89a3      	ldrh	r3, [r4, #12]
 8005de4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005de8:	81a3      	strh	r3, [r4, #12]
 8005dea:	e7ae      	b.n	8005d4a <__sflush_r+0x1a>
 8005dec:	690f      	ldr	r7, [r1, #16]
 8005dee:	2f00      	cmp	r7, #0
 8005df0:	d0aa      	beq.n	8005d48 <__sflush_r+0x18>
 8005df2:	0793      	lsls	r3, r2, #30
 8005df4:	bf18      	it	ne
 8005df6:	2300      	movne	r3, #0
 8005df8:	680e      	ldr	r6, [r1, #0]
 8005dfa:	bf08      	it	eq
 8005dfc:	694b      	ldreq	r3, [r1, #20]
 8005dfe:	1bf6      	subs	r6, r6, r7
 8005e00:	600f      	str	r7, [r1, #0]
 8005e02:	608b      	str	r3, [r1, #8]
 8005e04:	2e00      	cmp	r6, #0
 8005e06:	dd9f      	ble.n	8005d48 <__sflush_r+0x18>
 8005e08:	4633      	mov	r3, r6
 8005e0a:	463a      	mov	r2, r7
 8005e0c:	4628      	mov	r0, r5
 8005e0e:	6a21      	ldr	r1, [r4, #32]
 8005e10:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8005e14:	47e0      	blx	ip
 8005e16:	2800      	cmp	r0, #0
 8005e18:	dc06      	bgt.n	8005e28 <__sflush_r+0xf8>
 8005e1a:	89a3      	ldrh	r3, [r4, #12]
 8005e1c:	f04f 30ff 	mov.w	r0, #4294967295
 8005e20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e24:	81a3      	strh	r3, [r4, #12]
 8005e26:	e790      	b.n	8005d4a <__sflush_r+0x1a>
 8005e28:	4407      	add	r7, r0
 8005e2a:	1a36      	subs	r6, r6, r0
 8005e2c:	e7ea      	b.n	8005e04 <__sflush_r+0xd4>
 8005e2e:	bf00      	nop
 8005e30:	20400001 	.word	0x20400001

08005e34 <_fflush_r>:
 8005e34:	b538      	push	{r3, r4, r5, lr}
 8005e36:	690b      	ldr	r3, [r1, #16]
 8005e38:	4605      	mov	r5, r0
 8005e3a:	460c      	mov	r4, r1
 8005e3c:	b913      	cbnz	r3, 8005e44 <_fflush_r+0x10>
 8005e3e:	2500      	movs	r5, #0
 8005e40:	4628      	mov	r0, r5
 8005e42:	bd38      	pop	{r3, r4, r5, pc}
 8005e44:	b118      	cbz	r0, 8005e4e <_fflush_r+0x1a>
 8005e46:	6983      	ldr	r3, [r0, #24]
 8005e48:	b90b      	cbnz	r3, 8005e4e <_fflush_r+0x1a>
 8005e4a:	f000 f887 	bl	8005f5c <__sinit>
 8005e4e:	4b14      	ldr	r3, [pc, #80]	; (8005ea0 <_fflush_r+0x6c>)
 8005e50:	429c      	cmp	r4, r3
 8005e52:	d11b      	bne.n	8005e8c <_fflush_r+0x58>
 8005e54:	686c      	ldr	r4, [r5, #4]
 8005e56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d0ef      	beq.n	8005e3e <_fflush_r+0xa>
 8005e5e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005e60:	07d0      	lsls	r0, r2, #31
 8005e62:	d404      	bmi.n	8005e6e <_fflush_r+0x3a>
 8005e64:	0599      	lsls	r1, r3, #22
 8005e66:	d402      	bmi.n	8005e6e <_fflush_r+0x3a>
 8005e68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005e6a:	f000 f915 	bl	8006098 <__retarget_lock_acquire_recursive>
 8005e6e:	4628      	mov	r0, r5
 8005e70:	4621      	mov	r1, r4
 8005e72:	f7ff ff5d 	bl	8005d30 <__sflush_r>
 8005e76:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005e78:	4605      	mov	r5, r0
 8005e7a:	07da      	lsls	r2, r3, #31
 8005e7c:	d4e0      	bmi.n	8005e40 <_fflush_r+0xc>
 8005e7e:	89a3      	ldrh	r3, [r4, #12]
 8005e80:	059b      	lsls	r3, r3, #22
 8005e82:	d4dd      	bmi.n	8005e40 <_fflush_r+0xc>
 8005e84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005e86:	f000 f908 	bl	800609a <__retarget_lock_release_recursive>
 8005e8a:	e7d9      	b.n	8005e40 <_fflush_r+0xc>
 8005e8c:	4b05      	ldr	r3, [pc, #20]	; (8005ea4 <_fflush_r+0x70>)
 8005e8e:	429c      	cmp	r4, r3
 8005e90:	d101      	bne.n	8005e96 <_fflush_r+0x62>
 8005e92:	68ac      	ldr	r4, [r5, #8]
 8005e94:	e7df      	b.n	8005e56 <_fflush_r+0x22>
 8005e96:	4b04      	ldr	r3, [pc, #16]	; (8005ea8 <_fflush_r+0x74>)
 8005e98:	429c      	cmp	r4, r3
 8005e9a:	bf08      	it	eq
 8005e9c:	68ec      	ldreq	r4, [r5, #12]
 8005e9e:	e7da      	b.n	8005e56 <_fflush_r+0x22>
 8005ea0:	0800675c 	.word	0x0800675c
 8005ea4:	0800677c 	.word	0x0800677c
 8005ea8:	0800673c 	.word	0x0800673c

08005eac <std>:
 8005eac:	2300      	movs	r3, #0
 8005eae:	b510      	push	{r4, lr}
 8005eb0:	4604      	mov	r4, r0
 8005eb2:	e9c0 3300 	strd	r3, r3, [r0]
 8005eb6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005eba:	6083      	str	r3, [r0, #8]
 8005ebc:	8181      	strh	r1, [r0, #12]
 8005ebe:	6643      	str	r3, [r0, #100]	; 0x64
 8005ec0:	81c2      	strh	r2, [r0, #14]
 8005ec2:	6183      	str	r3, [r0, #24]
 8005ec4:	4619      	mov	r1, r3
 8005ec6:	2208      	movs	r2, #8
 8005ec8:	305c      	adds	r0, #92	; 0x5c
 8005eca:	f7fd fb63 	bl	8003594 <memset>
 8005ece:	4b05      	ldr	r3, [pc, #20]	; (8005ee4 <std+0x38>)
 8005ed0:	6224      	str	r4, [r4, #32]
 8005ed2:	6263      	str	r3, [r4, #36]	; 0x24
 8005ed4:	4b04      	ldr	r3, [pc, #16]	; (8005ee8 <std+0x3c>)
 8005ed6:	62a3      	str	r3, [r4, #40]	; 0x28
 8005ed8:	4b04      	ldr	r3, [pc, #16]	; (8005eec <std+0x40>)
 8005eda:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005edc:	4b04      	ldr	r3, [pc, #16]	; (8005ef0 <std+0x44>)
 8005ede:	6323      	str	r3, [r4, #48]	; 0x30
 8005ee0:	bd10      	pop	{r4, pc}
 8005ee2:	bf00      	nop
 8005ee4:	08006201 	.word	0x08006201
 8005ee8:	08006223 	.word	0x08006223
 8005eec:	0800625b 	.word	0x0800625b
 8005ef0:	0800627f 	.word	0x0800627f

08005ef4 <_cleanup_r>:
 8005ef4:	4901      	ldr	r1, [pc, #4]	; (8005efc <_cleanup_r+0x8>)
 8005ef6:	f000 b8af 	b.w	8006058 <_fwalk_reent>
 8005efa:	bf00      	nop
 8005efc:	08005e35 	.word	0x08005e35

08005f00 <__sfmoreglue>:
 8005f00:	2268      	movs	r2, #104	; 0x68
 8005f02:	b570      	push	{r4, r5, r6, lr}
 8005f04:	1e4d      	subs	r5, r1, #1
 8005f06:	4355      	muls	r5, r2
 8005f08:	460e      	mov	r6, r1
 8005f0a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005f0e:	f7ff fa6b 	bl	80053e8 <_malloc_r>
 8005f12:	4604      	mov	r4, r0
 8005f14:	b140      	cbz	r0, 8005f28 <__sfmoreglue+0x28>
 8005f16:	2100      	movs	r1, #0
 8005f18:	e9c0 1600 	strd	r1, r6, [r0]
 8005f1c:	300c      	adds	r0, #12
 8005f1e:	60a0      	str	r0, [r4, #8]
 8005f20:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005f24:	f7fd fb36 	bl	8003594 <memset>
 8005f28:	4620      	mov	r0, r4
 8005f2a:	bd70      	pop	{r4, r5, r6, pc}

08005f2c <__sfp_lock_acquire>:
 8005f2c:	4801      	ldr	r0, [pc, #4]	; (8005f34 <__sfp_lock_acquire+0x8>)
 8005f2e:	f000 b8b3 	b.w	8006098 <__retarget_lock_acquire_recursive>
 8005f32:	bf00      	nop
 8005f34:	2000027d 	.word	0x2000027d

08005f38 <__sfp_lock_release>:
 8005f38:	4801      	ldr	r0, [pc, #4]	; (8005f40 <__sfp_lock_release+0x8>)
 8005f3a:	f000 b8ae 	b.w	800609a <__retarget_lock_release_recursive>
 8005f3e:	bf00      	nop
 8005f40:	2000027d 	.word	0x2000027d

08005f44 <__sinit_lock_acquire>:
 8005f44:	4801      	ldr	r0, [pc, #4]	; (8005f4c <__sinit_lock_acquire+0x8>)
 8005f46:	f000 b8a7 	b.w	8006098 <__retarget_lock_acquire_recursive>
 8005f4a:	bf00      	nop
 8005f4c:	2000027e 	.word	0x2000027e

08005f50 <__sinit_lock_release>:
 8005f50:	4801      	ldr	r0, [pc, #4]	; (8005f58 <__sinit_lock_release+0x8>)
 8005f52:	f000 b8a2 	b.w	800609a <__retarget_lock_release_recursive>
 8005f56:	bf00      	nop
 8005f58:	2000027e 	.word	0x2000027e

08005f5c <__sinit>:
 8005f5c:	b510      	push	{r4, lr}
 8005f5e:	4604      	mov	r4, r0
 8005f60:	f7ff fff0 	bl	8005f44 <__sinit_lock_acquire>
 8005f64:	69a3      	ldr	r3, [r4, #24]
 8005f66:	b11b      	cbz	r3, 8005f70 <__sinit+0x14>
 8005f68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f6c:	f7ff bff0 	b.w	8005f50 <__sinit_lock_release>
 8005f70:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005f74:	6523      	str	r3, [r4, #80]	; 0x50
 8005f76:	4b13      	ldr	r3, [pc, #76]	; (8005fc4 <__sinit+0x68>)
 8005f78:	4a13      	ldr	r2, [pc, #76]	; (8005fc8 <__sinit+0x6c>)
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	62a2      	str	r2, [r4, #40]	; 0x28
 8005f7e:	42a3      	cmp	r3, r4
 8005f80:	bf08      	it	eq
 8005f82:	2301      	moveq	r3, #1
 8005f84:	4620      	mov	r0, r4
 8005f86:	bf08      	it	eq
 8005f88:	61a3      	streq	r3, [r4, #24]
 8005f8a:	f000 f81f 	bl	8005fcc <__sfp>
 8005f8e:	6060      	str	r0, [r4, #4]
 8005f90:	4620      	mov	r0, r4
 8005f92:	f000 f81b 	bl	8005fcc <__sfp>
 8005f96:	60a0      	str	r0, [r4, #8]
 8005f98:	4620      	mov	r0, r4
 8005f9a:	f000 f817 	bl	8005fcc <__sfp>
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	2104      	movs	r1, #4
 8005fa2:	60e0      	str	r0, [r4, #12]
 8005fa4:	6860      	ldr	r0, [r4, #4]
 8005fa6:	f7ff ff81 	bl	8005eac <std>
 8005faa:	2201      	movs	r2, #1
 8005fac:	2109      	movs	r1, #9
 8005fae:	68a0      	ldr	r0, [r4, #8]
 8005fb0:	f7ff ff7c 	bl	8005eac <std>
 8005fb4:	2202      	movs	r2, #2
 8005fb6:	2112      	movs	r1, #18
 8005fb8:	68e0      	ldr	r0, [r4, #12]
 8005fba:	f7ff ff77 	bl	8005eac <std>
 8005fbe:	2301      	movs	r3, #1
 8005fc0:	61a3      	str	r3, [r4, #24]
 8005fc2:	e7d1      	b.n	8005f68 <__sinit+0xc>
 8005fc4:	080063c0 	.word	0x080063c0
 8005fc8:	08005ef5 	.word	0x08005ef5

08005fcc <__sfp>:
 8005fcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fce:	4607      	mov	r7, r0
 8005fd0:	f7ff ffac 	bl	8005f2c <__sfp_lock_acquire>
 8005fd4:	4b1e      	ldr	r3, [pc, #120]	; (8006050 <__sfp+0x84>)
 8005fd6:	681e      	ldr	r6, [r3, #0]
 8005fd8:	69b3      	ldr	r3, [r6, #24]
 8005fda:	b913      	cbnz	r3, 8005fe2 <__sfp+0x16>
 8005fdc:	4630      	mov	r0, r6
 8005fde:	f7ff ffbd 	bl	8005f5c <__sinit>
 8005fe2:	3648      	adds	r6, #72	; 0x48
 8005fe4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005fe8:	3b01      	subs	r3, #1
 8005fea:	d503      	bpl.n	8005ff4 <__sfp+0x28>
 8005fec:	6833      	ldr	r3, [r6, #0]
 8005fee:	b30b      	cbz	r3, 8006034 <__sfp+0x68>
 8005ff0:	6836      	ldr	r6, [r6, #0]
 8005ff2:	e7f7      	b.n	8005fe4 <__sfp+0x18>
 8005ff4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005ff8:	b9d5      	cbnz	r5, 8006030 <__sfp+0x64>
 8005ffa:	4b16      	ldr	r3, [pc, #88]	; (8006054 <__sfp+0x88>)
 8005ffc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006000:	60e3      	str	r3, [r4, #12]
 8006002:	6665      	str	r5, [r4, #100]	; 0x64
 8006004:	f000 f847 	bl	8006096 <__retarget_lock_init_recursive>
 8006008:	f7ff ff96 	bl	8005f38 <__sfp_lock_release>
 800600c:	2208      	movs	r2, #8
 800600e:	4629      	mov	r1, r5
 8006010:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006014:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006018:	6025      	str	r5, [r4, #0]
 800601a:	61a5      	str	r5, [r4, #24]
 800601c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006020:	f7fd fab8 	bl	8003594 <memset>
 8006024:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006028:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800602c:	4620      	mov	r0, r4
 800602e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006030:	3468      	adds	r4, #104	; 0x68
 8006032:	e7d9      	b.n	8005fe8 <__sfp+0x1c>
 8006034:	2104      	movs	r1, #4
 8006036:	4638      	mov	r0, r7
 8006038:	f7ff ff62 	bl	8005f00 <__sfmoreglue>
 800603c:	4604      	mov	r4, r0
 800603e:	6030      	str	r0, [r6, #0]
 8006040:	2800      	cmp	r0, #0
 8006042:	d1d5      	bne.n	8005ff0 <__sfp+0x24>
 8006044:	f7ff ff78 	bl	8005f38 <__sfp_lock_release>
 8006048:	230c      	movs	r3, #12
 800604a:	603b      	str	r3, [r7, #0]
 800604c:	e7ee      	b.n	800602c <__sfp+0x60>
 800604e:	bf00      	nop
 8006050:	080063c0 	.word	0x080063c0
 8006054:	ffff0001 	.word	0xffff0001

08006058 <_fwalk_reent>:
 8006058:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800605c:	4606      	mov	r6, r0
 800605e:	4688      	mov	r8, r1
 8006060:	2700      	movs	r7, #0
 8006062:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006066:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800606a:	f1b9 0901 	subs.w	r9, r9, #1
 800606e:	d505      	bpl.n	800607c <_fwalk_reent+0x24>
 8006070:	6824      	ldr	r4, [r4, #0]
 8006072:	2c00      	cmp	r4, #0
 8006074:	d1f7      	bne.n	8006066 <_fwalk_reent+0xe>
 8006076:	4638      	mov	r0, r7
 8006078:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800607c:	89ab      	ldrh	r3, [r5, #12]
 800607e:	2b01      	cmp	r3, #1
 8006080:	d907      	bls.n	8006092 <_fwalk_reent+0x3a>
 8006082:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006086:	3301      	adds	r3, #1
 8006088:	d003      	beq.n	8006092 <_fwalk_reent+0x3a>
 800608a:	4629      	mov	r1, r5
 800608c:	4630      	mov	r0, r6
 800608e:	47c0      	blx	r8
 8006090:	4307      	orrs	r7, r0
 8006092:	3568      	adds	r5, #104	; 0x68
 8006094:	e7e9      	b.n	800606a <_fwalk_reent+0x12>

08006096 <__retarget_lock_init_recursive>:
 8006096:	4770      	bx	lr

08006098 <__retarget_lock_acquire_recursive>:
 8006098:	4770      	bx	lr

0800609a <__retarget_lock_release_recursive>:
 800609a:	4770      	bx	lr

0800609c <__swhatbuf_r>:
 800609c:	b570      	push	{r4, r5, r6, lr}
 800609e:	460e      	mov	r6, r1
 80060a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060a4:	4614      	mov	r4, r2
 80060a6:	2900      	cmp	r1, #0
 80060a8:	461d      	mov	r5, r3
 80060aa:	b096      	sub	sp, #88	; 0x58
 80060ac:	da08      	bge.n	80060c0 <__swhatbuf_r+0x24>
 80060ae:	2200      	movs	r2, #0
 80060b0:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80060b4:	602a      	str	r2, [r5, #0]
 80060b6:	061a      	lsls	r2, r3, #24
 80060b8:	d410      	bmi.n	80060dc <__swhatbuf_r+0x40>
 80060ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80060be:	e00e      	b.n	80060de <__swhatbuf_r+0x42>
 80060c0:	466a      	mov	r2, sp
 80060c2:	f000 f903 	bl	80062cc <_fstat_r>
 80060c6:	2800      	cmp	r0, #0
 80060c8:	dbf1      	blt.n	80060ae <__swhatbuf_r+0x12>
 80060ca:	9a01      	ldr	r2, [sp, #4]
 80060cc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80060d0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80060d4:	425a      	negs	r2, r3
 80060d6:	415a      	adcs	r2, r3
 80060d8:	602a      	str	r2, [r5, #0]
 80060da:	e7ee      	b.n	80060ba <__swhatbuf_r+0x1e>
 80060dc:	2340      	movs	r3, #64	; 0x40
 80060de:	2000      	movs	r0, #0
 80060e0:	6023      	str	r3, [r4, #0]
 80060e2:	b016      	add	sp, #88	; 0x58
 80060e4:	bd70      	pop	{r4, r5, r6, pc}
	...

080060e8 <__smakebuf_r>:
 80060e8:	898b      	ldrh	r3, [r1, #12]
 80060ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80060ec:	079d      	lsls	r5, r3, #30
 80060ee:	4606      	mov	r6, r0
 80060f0:	460c      	mov	r4, r1
 80060f2:	d507      	bpl.n	8006104 <__smakebuf_r+0x1c>
 80060f4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80060f8:	6023      	str	r3, [r4, #0]
 80060fa:	6123      	str	r3, [r4, #16]
 80060fc:	2301      	movs	r3, #1
 80060fe:	6163      	str	r3, [r4, #20]
 8006100:	b002      	add	sp, #8
 8006102:	bd70      	pop	{r4, r5, r6, pc}
 8006104:	466a      	mov	r2, sp
 8006106:	ab01      	add	r3, sp, #4
 8006108:	f7ff ffc8 	bl	800609c <__swhatbuf_r>
 800610c:	9900      	ldr	r1, [sp, #0]
 800610e:	4605      	mov	r5, r0
 8006110:	4630      	mov	r0, r6
 8006112:	f7ff f969 	bl	80053e8 <_malloc_r>
 8006116:	b948      	cbnz	r0, 800612c <__smakebuf_r+0x44>
 8006118:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800611c:	059a      	lsls	r2, r3, #22
 800611e:	d4ef      	bmi.n	8006100 <__smakebuf_r+0x18>
 8006120:	f023 0303 	bic.w	r3, r3, #3
 8006124:	f043 0302 	orr.w	r3, r3, #2
 8006128:	81a3      	strh	r3, [r4, #12]
 800612a:	e7e3      	b.n	80060f4 <__smakebuf_r+0xc>
 800612c:	4b0d      	ldr	r3, [pc, #52]	; (8006164 <__smakebuf_r+0x7c>)
 800612e:	62b3      	str	r3, [r6, #40]	; 0x28
 8006130:	89a3      	ldrh	r3, [r4, #12]
 8006132:	6020      	str	r0, [r4, #0]
 8006134:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006138:	81a3      	strh	r3, [r4, #12]
 800613a:	9b00      	ldr	r3, [sp, #0]
 800613c:	6120      	str	r0, [r4, #16]
 800613e:	6163      	str	r3, [r4, #20]
 8006140:	9b01      	ldr	r3, [sp, #4]
 8006142:	b15b      	cbz	r3, 800615c <__smakebuf_r+0x74>
 8006144:	4630      	mov	r0, r6
 8006146:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800614a:	f000 f8d1 	bl	80062f0 <_isatty_r>
 800614e:	b128      	cbz	r0, 800615c <__smakebuf_r+0x74>
 8006150:	89a3      	ldrh	r3, [r4, #12]
 8006152:	f023 0303 	bic.w	r3, r3, #3
 8006156:	f043 0301 	orr.w	r3, r3, #1
 800615a:	81a3      	strh	r3, [r4, #12]
 800615c:	89a0      	ldrh	r0, [r4, #12]
 800615e:	4305      	orrs	r5, r0
 8006160:	81a5      	strh	r5, [r4, #12]
 8006162:	e7cd      	b.n	8006100 <__smakebuf_r+0x18>
 8006164:	08005ef5 	.word	0x08005ef5

08006168 <_malloc_usable_size_r>:
 8006168:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800616c:	1f18      	subs	r0, r3, #4
 800616e:	2b00      	cmp	r3, #0
 8006170:	bfbc      	itt	lt
 8006172:	580b      	ldrlt	r3, [r1, r0]
 8006174:	18c0      	addlt	r0, r0, r3
 8006176:	4770      	bx	lr

08006178 <_raise_r>:
 8006178:	291f      	cmp	r1, #31
 800617a:	b538      	push	{r3, r4, r5, lr}
 800617c:	4604      	mov	r4, r0
 800617e:	460d      	mov	r5, r1
 8006180:	d904      	bls.n	800618c <_raise_r+0x14>
 8006182:	2316      	movs	r3, #22
 8006184:	6003      	str	r3, [r0, #0]
 8006186:	f04f 30ff 	mov.w	r0, #4294967295
 800618a:	bd38      	pop	{r3, r4, r5, pc}
 800618c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800618e:	b112      	cbz	r2, 8006196 <_raise_r+0x1e>
 8006190:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006194:	b94b      	cbnz	r3, 80061aa <_raise_r+0x32>
 8006196:	4620      	mov	r0, r4
 8006198:	f000 f830 	bl	80061fc <_getpid_r>
 800619c:	462a      	mov	r2, r5
 800619e:	4601      	mov	r1, r0
 80061a0:	4620      	mov	r0, r4
 80061a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80061a6:	f000 b817 	b.w	80061d8 <_kill_r>
 80061aa:	2b01      	cmp	r3, #1
 80061ac:	d00a      	beq.n	80061c4 <_raise_r+0x4c>
 80061ae:	1c59      	adds	r1, r3, #1
 80061b0:	d103      	bne.n	80061ba <_raise_r+0x42>
 80061b2:	2316      	movs	r3, #22
 80061b4:	6003      	str	r3, [r0, #0]
 80061b6:	2001      	movs	r0, #1
 80061b8:	e7e7      	b.n	800618a <_raise_r+0x12>
 80061ba:	2400      	movs	r4, #0
 80061bc:	4628      	mov	r0, r5
 80061be:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80061c2:	4798      	blx	r3
 80061c4:	2000      	movs	r0, #0
 80061c6:	e7e0      	b.n	800618a <_raise_r+0x12>

080061c8 <raise>:
 80061c8:	4b02      	ldr	r3, [pc, #8]	; (80061d4 <raise+0xc>)
 80061ca:	4601      	mov	r1, r0
 80061cc:	6818      	ldr	r0, [r3, #0]
 80061ce:	f7ff bfd3 	b.w	8006178 <_raise_r>
 80061d2:	bf00      	nop
 80061d4:	2000000c 	.word	0x2000000c

080061d8 <_kill_r>:
 80061d8:	b538      	push	{r3, r4, r5, lr}
 80061da:	2300      	movs	r3, #0
 80061dc:	4d06      	ldr	r5, [pc, #24]	; (80061f8 <_kill_r+0x20>)
 80061de:	4604      	mov	r4, r0
 80061e0:	4608      	mov	r0, r1
 80061e2:	4611      	mov	r1, r2
 80061e4:	602b      	str	r3, [r5, #0]
 80061e6:	f7fb f851 	bl	800128c <_kill>
 80061ea:	1c43      	adds	r3, r0, #1
 80061ec:	d102      	bne.n	80061f4 <_kill_r+0x1c>
 80061ee:	682b      	ldr	r3, [r5, #0]
 80061f0:	b103      	cbz	r3, 80061f4 <_kill_r+0x1c>
 80061f2:	6023      	str	r3, [r4, #0]
 80061f4:	bd38      	pop	{r3, r4, r5, pc}
 80061f6:	bf00      	nop
 80061f8:	20000278 	.word	0x20000278

080061fc <_getpid_r>:
 80061fc:	f7fb b83f 	b.w	800127e <_getpid>

08006200 <__sread>:
 8006200:	b510      	push	{r4, lr}
 8006202:	460c      	mov	r4, r1
 8006204:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006208:	f000 f894 	bl	8006334 <_read_r>
 800620c:	2800      	cmp	r0, #0
 800620e:	bfab      	itete	ge
 8006210:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006212:	89a3      	ldrhlt	r3, [r4, #12]
 8006214:	181b      	addge	r3, r3, r0
 8006216:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800621a:	bfac      	ite	ge
 800621c:	6563      	strge	r3, [r4, #84]	; 0x54
 800621e:	81a3      	strhlt	r3, [r4, #12]
 8006220:	bd10      	pop	{r4, pc}

08006222 <__swrite>:
 8006222:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006226:	461f      	mov	r7, r3
 8006228:	898b      	ldrh	r3, [r1, #12]
 800622a:	4605      	mov	r5, r0
 800622c:	05db      	lsls	r3, r3, #23
 800622e:	460c      	mov	r4, r1
 8006230:	4616      	mov	r6, r2
 8006232:	d505      	bpl.n	8006240 <__swrite+0x1e>
 8006234:	2302      	movs	r3, #2
 8006236:	2200      	movs	r2, #0
 8006238:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800623c:	f000 f868 	bl	8006310 <_lseek_r>
 8006240:	89a3      	ldrh	r3, [r4, #12]
 8006242:	4632      	mov	r2, r6
 8006244:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006248:	81a3      	strh	r3, [r4, #12]
 800624a:	4628      	mov	r0, r5
 800624c:	463b      	mov	r3, r7
 800624e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006252:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006256:	f000 b817 	b.w	8006288 <_write_r>

0800625a <__sseek>:
 800625a:	b510      	push	{r4, lr}
 800625c:	460c      	mov	r4, r1
 800625e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006262:	f000 f855 	bl	8006310 <_lseek_r>
 8006266:	1c43      	adds	r3, r0, #1
 8006268:	89a3      	ldrh	r3, [r4, #12]
 800626a:	bf15      	itete	ne
 800626c:	6560      	strne	r0, [r4, #84]	; 0x54
 800626e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006272:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006276:	81a3      	strheq	r3, [r4, #12]
 8006278:	bf18      	it	ne
 800627a:	81a3      	strhne	r3, [r4, #12]
 800627c:	bd10      	pop	{r4, pc}

0800627e <__sclose>:
 800627e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006282:	f000 b813 	b.w	80062ac <_close_r>
	...

08006288 <_write_r>:
 8006288:	b538      	push	{r3, r4, r5, lr}
 800628a:	4604      	mov	r4, r0
 800628c:	4608      	mov	r0, r1
 800628e:	4611      	mov	r1, r2
 8006290:	2200      	movs	r2, #0
 8006292:	4d05      	ldr	r5, [pc, #20]	; (80062a8 <_write_r+0x20>)
 8006294:	602a      	str	r2, [r5, #0]
 8006296:	461a      	mov	r2, r3
 8006298:	f7fb f82f 	bl	80012fa <_write>
 800629c:	1c43      	adds	r3, r0, #1
 800629e:	d102      	bne.n	80062a6 <_write_r+0x1e>
 80062a0:	682b      	ldr	r3, [r5, #0]
 80062a2:	b103      	cbz	r3, 80062a6 <_write_r+0x1e>
 80062a4:	6023      	str	r3, [r4, #0]
 80062a6:	bd38      	pop	{r3, r4, r5, pc}
 80062a8:	20000278 	.word	0x20000278

080062ac <_close_r>:
 80062ac:	b538      	push	{r3, r4, r5, lr}
 80062ae:	2300      	movs	r3, #0
 80062b0:	4d05      	ldr	r5, [pc, #20]	; (80062c8 <_close_r+0x1c>)
 80062b2:	4604      	mov	r4, r0
 80062b4:	4608      	mov	r0, r1
 80062b6:	602b      	str	r3, [r5, #0]
 80062b8:	f7fb f83b 	bl	8001332 <_close>
 80062bc:	1c43      	adds	r3, r0, #1
 80062be:	d102      	bne.n	80062c6 <_close_r+0x1a>
 80062c0:	682b      	ldr	r3, [r5, #0]
 80062c2:	b103      	cbz	r3, 80062c6 <_close_r+0x1a>
 80062c4:	6023      	str	r3, [r4, #0]
 80062c6:	bd38      	pop	{r3, r4, r5, pc}
 80062c8:	20000278 	.word	0x20000278

080062cc <_fstat_r>:
 80062cc:	b538      	push	{r3, r4, r5, lr}
 80062ce:	2300      	movs	r3, #0
 80062d0:	4d06      	ldr	r5, [pc, #24]	; (80062ec <_fstat_r+0x20>)
 80062d2:	4604      	mov	r4, r0
 80062d4:	4608      	mov	r0, r1
 80062d6:	4611      	mov	r1, r2
 80062d8:	602b      	str	r3, [r5, #0]
 80062da:	f7fb f835 	bl	8001348 <_fstat>
 80062de:	1c43      	adds	r3, r0, #1
 80062e0:	d102      	bne.n	80062e8 <_fstat_r+0x1c>
 80062e2:	682b      	ldr	r3, [r5, #0]
 80062e4:	b103      	cbz	r3, 80062e8 <_fstat_r+0x1c>
 80062e6:	6023      	str	r3, [r4, #0]
 80062e8:	bd38      	pop	{r3, r4, r5, pc}
 80062ea:	bf00      	nop
 80062ec:	20000278 	.word	0x20000278

080062f0 <_isatty_r>:
 80062f0:	b538      	push	{r3, r4, r5, lr}
 80062f2:	2300      	movs	r3, #0
 80062f4:	4d05      	ldr	r5, [pc, #20]	; (800630c <_isatty_r+0x1c>)
 80062f6:	4604      	mov	r4, r0
 80062f8:	4608      	mov	r0, r1
 80062fa:	602b      	str	r3, [r5, #0]
 80062fc:	f7fb f833 	bl	8001366 <_isatty>
 8006300:	1c43      	adds	r3, r0, #1
 8006302:	d102      	bne.n	800630a <_isatty_r+0x1a>
 8006304:	682b      	ldr	r3, [r5, #0]
 8006306:	b103      	cbz	r3, 800630a <_isatty_r+0x1a>
 8006308:	6023      	str	r3, [r4, #0]
 800630a:	bd38      	pop	{r3, r4, r5, pc}
 800630c:	20000278 	.word	0x20000278

08006310 <_lseek_r>:
 8006310:	b538      	push	{r3, r4, r5, lr}
 8006312:	4604      	mov	r4, r0
 8006314:	4608      	mov	r0, r1
 8006316:	4611      	mov	r1, r2
 8006318:	2200      	movs	r2, #0
 800631a:	4d05      	ldr	r5, [pc, #20]	; (8006330 <_lseek_r+0x20>)
 800631c:	602a      	str	r2, [r5, #0]
 800631e:	461a      	mov	r2, r3
 8006320:	f7fb f82b 	bl	800137a <_lseek>
 8006324:	1c43      	adds	r3, r0, #1
 8006326:	d102      	bne.n	800632e <_lseek_r+0x1e>
 8006328:	682b      	ldr	r3, [r5, #0]
 800632a:	b103      	cbz	r3, 800632e <_lseek_r+0x1e>
 800632c:	6023      	str	r3, [r4, #0]
 800632e:	bd38      	pop	{r3, r4, r5, pc}
 8006330:	20000278 	.word	0x20000278

08006334 <_read_r>:
 8006334:	b538      	push	{r3, r4, r5, lr}
 8006336:	4604      	mov	r4, r0
 8006338:	4608      	mov	r0, r1
 800633a:	4611      	mov	r1, r2
 800633c:	2200      	movs	r2, #0
 800633e:	4d05      	ldr	r5, [pc, #20]	; (8006354 <_read_r+0x20>)
 8006340:	602a      	str	r2, [r5, #0]
 8006342:	461a      	mov	r2, r3
 8006344:	f7fa ffbc 	bl	80012c0 <_read>
 8006348:	1c43      	adds	r3, r0, #1
 800634a:	d102      	bne.n	8006352 <_read_r+0x1e>
 800634c:	682b      	ldr	r3, [r5, #0]
 800634e:	b103      	cbz	r3, 8006352 <_read_r+0x1e>
 8006350:	6023      	str	r3, [r4, #0]
 8006352:	bd38      	pop	{r3, r4, r5, pc}
 8006354:	20000278 	.word	0x20000278

08006358 <_init>:
 8006358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800635a:	bf00      	nop
 800635c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800635e:	bc08      	pop	{r3}
 8006360:	469e      	mov	lr, r3
 8006362:	4770      	bx	lr

08006364 <_fini>:
 8006364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006366:	bf00      	nop
 8006368:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800636a:	bc08      	pop	{r3}
 800636c:	469e      	mov	lr, r3
 800636e:	4770      	bx	lr
